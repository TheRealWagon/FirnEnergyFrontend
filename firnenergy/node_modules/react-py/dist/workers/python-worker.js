var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
importScripts('https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js');
// Monkey patch console.log to prevent the script from outputting logs
if (self.location.hostname !== 'localhost') {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    console.log = function () { };
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    console.error = function () { };
}
import { expose } from 'comlink';
var reactPyModule = {
    getInput: function (id, prompt) {
        var request = new XMLHttpRequest();
        // Synchronous request to be intercepted by service worker
        request.open('GET', "/react-py-get-input/?id=".concat(id, "&prompt=").concat(prompt), false);
        request.send(null);
        return request.responseText;
    }
};
var python = {
    init: function (stdout, onLoad, packages) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, micropip, id, version, initCode, patchInputCode;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = self;
                        return [4 /*yield*/, self.loadPyodide({
                                stdout: stdout
                            })];
                    case 1:
                        _a.pyodide = _b.sent();
                        return [4 /*yield*/, self.pyodide.loadPackage(['pyodide-http'])];
                    case 2:
                        _b.sent();
                        if (!(packages[0].length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, self.pyodide.loadPackage(packages[0])];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        if (!(packages[1].length > 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, self.pyodide.loadPackage(['micropip'])];
                    case 5:
                        _b.sent();
                        micropip = self.pyodide.pyimport('micropip');
                        return [4 /*yield*/, micropip.install(packages[1])];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        id = self.crypto.randomUUID();
                        version = self.pyodide.version;
                        self.pyodide.registerJsModule('react_py', reactPyModule);
                        initCode = "\nimport pyodide_http\npyodide_http.patch_all()\n";
                        return [4 /*yield*/, self.pyodide.runPythonAsync(initCode)];
                    case 8:
                        _b.sent();
                        patchInputCode = "\nimport sys, builtins\nimport react_py\n__prompt_str__ = \"\"\ndef get_input(prompt=\"\"):\n    global __prompt_str__\n    __prompt_str__ = prompt\n    print(prompt, end=\"\")\n    s = react_py.getInput(\"".concat(id, "\", prompt)\n    print(s)\n    return s\nbuiltins.input = get_input\nsys.stdin.readline = lambda: react_py.getInput(\"").concat(id, "\", __prompt_str__)\n");
                        return [4 /*yield*/, self.pyodide.runPythonAsync(patchInputCode)];
                    case 9:
                        _b.sent();
                        onLoad({ id: id, version: version });
                        return [2 /*return*/];
                }
            });
        });
    },
    run: function (code) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, self.pyodide.runPythonAsync(code)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    },
    readFile: function (name) {
        return self.pyodide.FS.readFile(name, { encoding: 'utf8' });
    },
    writeFile: function (name, data) {
        return self.pyodide.FS.writeFile(name, data, { encoding: 'utf8' });
    },
    mkdir: function (name) {
        self.pyodide.FS.mkdir(name);
    },
    rmdir: function (name) {
        self.pyodide.FS.rmdir(name);
    }
};
expose(python);
