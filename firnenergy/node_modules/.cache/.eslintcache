[{"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\index.js":"1","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\App.js":"2","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\reportWebVitals.js":"3","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Navbar\\navbar.jsx":"4","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\bodyContainer.jsx":"5","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\pages\\pages.jsx":"6","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\authenticate.js":"7","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\measurements.js":"8","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\user.js":"9","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\QuickViewDetails\\QuickView.jsx":"10","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\auth\\auth.jsx":"11","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\charts\\charts.jsx":"12","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\currentFlow\\currentFlow.jsx":"13","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\WebHomePage.jsx":"14","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Authentication\\login.jsx":"15","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\adminPage.jsx":"16","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\usersList.jsx":"17","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\userDisplay.jsx":"18","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\OldWebHomePage.jsx":"19","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\signals\\signalDisplay.jsx":"20"},{"size":648,"mtime":1694519247934,"results":"21","hashOfConfig":"22"},{"size":868,"mtime":1694519246503,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1694519248028,"results":"24","hashOfConfig":"22"},{"size":3592,"mtime":1694519247572,"results":"25","hashOfConfig":"22"},{"size":10107,"mtime":1695220603214,"results":"26","hashOfConfig":"22"},{"size":1251,"mtime":1696890419171,"results":"27","hashOfConfig":"22"},{"size":3530,"mtime":1694519247456,"results":"28","hashOfConfig":"22"},{"size":36574,"mtime":1697328796863,"results":"29","hashOfConfig":"22"},{"size":7928,"mtime":1694616436528,"results":"30","hashOfConfig":"22"},{"size":4858,"mtime":1694519247619,"results":"31","hashOfConfig":"22"},{"size":1934,"mtime":1694519247698,"results":"32","hashOfConfig":"22"},{"size":17030,"mtime":1695217500621,"results":"33","hashOfConfig":"22"},{"size":33925,"mtime":1694519247793,"results":"34","hashOfConfig":"22"},{"size":4772,"mtime":1696889770871,"results":"35","hashOfConfig":"22"},{"size":10055,"mtime":1694616509543,"results":"36","hashOfConfig":"22"},{"size":648,"mtime":1696891121260,"results":"37","hashOfConfig":"22"},{"size":2537,"mtime":1694616581804,"results":"38","hashOfConfig":"22"},{"size":8247,"mtime":1694519247651,"results":"39","hashOfConfig":"22"},{"size":9664,"mtime":1696890447836,"results":"40","hashOfConfig":"22"},{"size":4742,"mtime":1697332862941,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1da4y6f",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"45"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"45"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"45"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"45"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\index.js",[],[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\App.js",["115","116","117","118"],[],"import { useState } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/navbar'\r\nimport Body from './components/body/bodyContainer'\r\nimport { LoginPage, HomePage, WebsiteHomePage, WebAdminPage } from './components/pages/pages'\r\nimport { Routes, Route, Router} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n    const [darkMode, setDarkmode] = useState(false);\r\n\r\n    const toggleDarkMode = () => {\r\n        setDarkmode(!darkMode);\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route index element={<WebsiteHomePage></WebsiteHomePage>}></Route>\r\n        <Route path=\"LoginPage\" element={<LoginPage></LoginPage>}></Route>\r\n        <Route path='HomePage' element={<HomePage></HomePage>}></Route>\r\n        <Route path='AdminPage' element={<WebAdminPage></WebAdminPage>}></Route>\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\reportWebVitals.js",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Navbar\\navbar.jsx",["119","120","121","122"],[],"import './navbar.css'\r\nimport Logo from '../../Images/firnenergyLogo.png'\r\nimport globeIcon from '../../Images/globe_icon.png'\r\nimport userIcon from '../../Images/user_icon.png'\r\nimport infoIcon from \"../../Images/info_icon.png\"\r\nimport Authenticate from \"../../api/authenticate\"\r\nimport { useEffect, useState } from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport User from '../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport userIconBlack from '../../Images/6522516.png';\r\n\r\nconst Navbar = ({ darkMode, toggleDarkMode }) => {\r\n    const [logout, setLogout] = useState(false);\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('');\r\n\r\n    // useEffect(async () => {\r\n        \r\n    //     // const user = await userApi.GetUsername();\r\n    //     // console.log(user)\r\n    //     // setUsername(user.data)\r\n    // }, []);\r\n\r\n    const token = localStorage.getItem('jwtToken');\r\n\r\n    const getUsername = async() => {\r\n        try {\r\n            const user = await userApi.GetUsername(token);\r\n            setUsername(user.data.user.name.split('@')[0]);\r\n        } catch (error) {\r\n            //token expired or invalid navigate to Login\r\n            localStorage.removeItem('jwtToken');\r\n            navigate('/');\r\n        }\r\n    }\r\n   \r\n    const handleLogout = () => {\r\n        setLogout(true);\r\n    }\r\n\r\n    const handleBacklogout = () => {\r\n        setLogout(false);\r\n    }\r\n\r\n    const handleDefLogout = () => {\r\n        setLogout(false);\r\n        localStorage.removeItem('jwtToken');\r\n        navigate('/');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getUsername();\r\n    }, []);\r\n    \r\n    \r\n    return (\r\n        <>\r\n            {logout && (<div className='Logout-Background'><div className='logout-Container'><div className='logout-Label'><div>Do you wish to logout?</div><div className='logout-Label-username'><div><img width={40} src={userIconBlack} alt=\"\" /></div><div>{username}</div></div></div><div className='logout-button-Container'><button className='logout-button' onClick={handleDefLogout}>Logout</button><button className='logout-button' onClick={handleBacklogout}>Back</button></div></div></div>) }\r\n            <div className='NavbarContainer'>\r\n                <div className='LogoContainer'>\r\n                    <div className='Logo'>\r\n                        <img src={Logo} alt='logo_icon' />\r\n                    </div>\r\n                </div>\r\n                <div className='PageContainer'>\r\n                    <div className='Page selected'>Home</div>\r\n                    <div className='Page'>About us</div>\r\n                    <div className='Page'>Feature</div>\r\n                    <div className='Page'>Contact</div>\r\n                </div>\r\n                <div className='InfoContainer'>\r\n                    <div><img src={globeIcon} alt=\"globe_Icon\" />english</div>\r\n                    <div className='NavbarAccount'><button className='AccountLink' onClick={handleLogout}><img style={{paddingRight: \"10px\"}} src={userIcon} alt=\"\" />{username}</button></div>\r\n                    <div className='PageDivider'></div>\r\n                    {/* <div className='Navbar_Info'><img src={infoIcon} alt=\"\" /></div> */}\r\n                    {/* <div><input type='checkbox' checked={darkMode} onChange={toggleDarkMode}/><span className='slider round'></span></div> */}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {/* <button onClick={Login}>Login</button> */}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\bodyContainer.jsx",["123","124","125","126","127","128","129"],[],"import './bodyContainer.css'\r\nimport Auth from './auth/auth'\r\nimport CurrentFlow from './currentFlow/currentFlow'\r\nimport Authenticate from \"../../api/authenticate\"\r\nimport Measurement from '../../api/measurements'\r\nimport { useEffect, useState } from 'react'\r\nimport Charts from './charts/charts'\r\nimport loaderGIF from '../../Images/firn-embleem-animation.gif'\r\nimport QuickView from './QuickViewDetails/QuickView';\r\nimport User from '../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Body = ({darkMode}) => {\r\n    //API's\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    const measurementApi = Measurement();\r\n\r\n    //variable state's\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //Data\r\n    // const [currentFlowData, setCurrentFlowData] = useState([]);\r\n    // const [quickViewData, setQuickViewData] = useState();\r\n    const [barChartData, setBarChartData] = useState();\r\n    \r\n\r\n    //CurrentflowDataStates\r\n    const [SolarW, setSolarW] = useState('');\r\n    const [BatteryW, setBatteryW] = useState('');\r\n    const [GridW, setGridW] = useState('');\r\n    const [HomeW, setHomeW] = useState('');\r\n    const [BatteryP, setBatteryP] = useState(0);\r\n\r\n    //QuickViewData\r\n    const [YieldToday, setYieldToday] = useState('');\r\n    const [ConsumptionToday, setConsumptionToday] = useState('');\r\n    const [RevenueToday, setRevenueToday] = useState('');\r\n    const [foundFlowData, setfoundFlowData] = useState(false);\r\n\r\n    const [NodeIdList, setNodeIdList] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        //Initialize nodeId list\r\n\r\n        const getReturnList = async() => {\r\n            const accessToken = GetAccessToken();\r\n            const returnList = await measurementApi.initialize(accessToken);\r\n\r\n            setNodeIdList(returnList.data)\r\n        }\r\n        getReturnList();\r\n\r\n    }, [])\r\n\r\n\r\n    // CurrentFlowData\r\n    useEffect(() => {\r\n\r\n        if (NodeIdList != null) {\r\n            const temp = () => {\r\n                const date = new Date();\r\n    \r\n                console.log(\"CurrentFlowData\")\r\n    \r\n                const GetCurrentFlowDataTemp = async() => {\r\n                    setLoading(true)\r\n    \r\n                    const AccessToken = GetAccessToken();\r\n                    await GetCurrentFlowData(AccessToken, date);\r\n\r\n                    setLoading(false)\r\n                }\r\n                GetCurrentFlowDataTemp();\r\n            }\r\n            temp();\r\n    \r\n            const intervalId = setInterval(temp, 60 * 1000);\r\n    \r\n            return () => clearInterval(intervalId);\r\n        } \r\n    }, [NodeIdList])\r\n\r\n    // QuickViewData\r\n    useEffect(() => {\r\n\r\n        if (NodeIdList != null) {\r\n        \r\n            const temp = () => {\r\n                const date = new Date();\r\n    \r\n                console.log(\"QuickViewData\")\r\n    \r\n                const GetQuickViewDataTemp = async() => {\r\n                    setLoading(true)\r\n    \r\n                    const AccessToken = GetAccessToken();\r\n                    await GetQuickViewData(AccessToken, date);\r\n    \r\n                    setLoading(false)\r\n                }\r\n                GetQuickViewDataTemp();\r\n            }\r\n            temp();\r\n        \r\n            const QuickintervalId = setInterval(temp, 15 * 60 * 1000);\r\n\r\n            return () => clearInterval(QuickintervalId);\r\n        }\r\n\r\n    }, [NodeIdList])\r\n\r\n    // BarChartData\r\n    useEffect(() => {\r\n        if (NodeIdList != null) {\r\n\r\n            const temp = () => {\r\n                const date = new Date();\r\n    \r\n                console.log(\"BarChartData\")\r\n    \r\n                const GetBarChartDataTemp = async() => {\r\n                    setLoading(true)\r\n    \r\n                    const AccessToken = GetAccessToken();\r\n                    await GetBarChartData(AccessToken, date);\r\n    \r\n                    setLoading(false)\r\n                }\r\n                GetBarChartDataTemp();\r\n            }\r\n            temp();\r\n    \r\n            const BARintervalId = setInterval(temp, 15 * 60 * 1000);\r\n    \r\n            return () => clearInterval(BARintervalId);\r\n        }\r\n    }, [NodeIdList]);\r\n\r\n    //Gets the access token from the back-end\r\n    const GetAccessToken = () => {\r\n        const JwtToken = localStorage.getItem('jwtToken');\r\n        if (JwtToken) {\r\n            return JwtToken;\r\n        } else {\r\n            localStorage.removeItem('jwtToken');\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    const GetCurrentFlowData = async (AccessToken, date) => {\r\n\r\n        const data = await measurementApi.getCurrentFlowData(AccessToken, date, NodeIdList.currentFlowDataNodeId);\r\n\r\n        const columns = data[0].columns\r\n        const indexes = {}\r\n\r\n        for (let index = 0; index < columns.length; index++) {\r\n            const element = columns[index];\r\n\r\n            if (element === \"actualPowerTot_W\") {\r\n                indexes[\"Grid\"] = index;\r\n            } else if (element === \"childrenConsumedPower_W\") {\r\n                indexes[\"Consumption\"] = index;\r\n            } else if (element === \"childrenProducedPower_W\") {\r\n                indexes[\"Production\"] = index;\r\n            } else if (element === \"childrenStoragePower_W\") {\r\n                indexes[\"Battery\"] = index;\r\n            }\r\n        }\r\n        const values = data[0].values[0]\r\n        setGridW(Math.round(values[indexes[\"Grid\"]]));\r\n        setHomeW(Math.round(values[indexes[\"Consumption\"]]));\r\n        setSolarW(Math.round(values[indexes[\"Production\"]]));\r\n        setBatteryW(Math.round(values[indexes[\"Battery\"]]));\r\n\r\n        const BatteryData = await measurementApi.getBatteryPercentage(AccessToken, date, NodeIdList.batteryPercentageDataNodeId);\r\n        const BattVal = BatteryData[0].values[0]\r\n\r\n        setBatteryP(BattVal[1])\r\n    }\r\n\r\n    const GetQuickViewData = async (AccessToken, date) => {\r\n        // const FoundFlowData = false\r\n\r\n        const result = await measurementApi.getBarChartRevenueData(AccessToken, date, NodeIdList.currentFlowDataNodeId);\r\n        let total = 0\r\n        for (let index = 0; index < Object.keys(result).length; index++) {\r\n            const element = parseFloat(result[index]['Fed to grid']) + parseFloat(result[index]['FirnController Profit']);\r\n            total = total + parseFloat(element);\r\n        }\r\n        total = total.toFixed(2);\r\n        setRevenueToday(total)\r\n\r\n        const QuickViewdata = await measurementApi.getQuickViewData(AccessToken, date, NodeIdList.quickViewDataNodeId);\r\n        const QuickViewDataValues = QuickViewdata[0].values[0]\r\n\r\n        setYieldToday((QuickViewDataValues[1] / 1000).toFixed(1));\r\n        setConsumptionToday((QuickViewDataValues[2] / 1000).toFixed(1));\r\n\r\n        setfoundFlowData(true);\r\n    }           \r\n\r\n    const GetBarChartData = async (AccessToken, date) => {\r\n\r\n        const result = await measurementApi.getBarChartData(AccessToken, date, NodeIdList.barChartDataNodeId);\r\n        setBarChartData(result);\r\n        \r\n    }\r\n\r\n    const requestBarChartData = async (dataToRequest) => {\r\n\r\n        const date = new Date();\r\n\r\n        if (dataToRequest === \"BarChartConsumptionData\") {\r\n            const AccessToken = GetAccessToken();\r\n            // let result = 1;\r\n            // switch (timePeriod) {\r\n                \r\n\r\n            //     case \"day\":\r\n                    \r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n\r\n            //     case \"month\":\r\n\r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n                \r\n            //     case \"year\":\r\n\r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n                \r\n            //     default:\r\n            //         break;\r\n            // }\r\n\r\n\r\n            const result = await measurementApi.getBarChartData(AccessToken, date, NodeIdList.barChartDataNodeId);\r\n            setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartBatteryData\") {\r\n            const AccessToken = GetAccessToken();\r\n            const result = await measurementApi.getBatteryPercentageRange(AccessToken, date, NodeIdList.batteryPercentageDataNodeId);\r\n            setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartRevenueData\") {\r\n            const AccessToken = GetAccessToken();\r\n            const result = await measurementApi.getBarChartRevenueData(AccessToken, date, NodeIdList.currentFlowDataNodeId);\r\n            setBarChartData(result);\r\n        }\r\n    }\r\n\r\n    const ToggleLoading = (bool) => {\r\n        setLoading(bool)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`Body-Container ${darkMode ? 'Body-Container-Dark' : 'Body-Container-Light'}`}>\r\n                {/* {logout && (<div className='Logout-Background'><div className='logout-Container'><div className='logout-Label'>Do you wish to logout?</div><div className='logout-button-Container'><button className='logout-button'>logout</button><button className='logout-button'>back</button></div></div></div>) } */}\r\n                {loading ? (<div className='overlay block-interactions'><div className=\"loading-container\"><img className='loading-gif' src={loaderGIF} alt=\"\" /></div></div>) : <></> }\r\n                <div className='Body-First-Row'>\r\n                    <div><CurrentFlow darkMode={darkMode} SOLARW={SolarW} GRIDW={GridW} BATTERYW={BatteryW} HOMEW={HomeW} BATTERYP={BatteryP}></CurrentFlow></div>\r\n                    <div><QuickView foundFlowData={foundFlowData} YieldToday={YieldToday} BatteryP={BatteryP} ConsumptionToday={ConsumptionToday} RevenueToday={RevenueToday}/></div>\r\n                </div>\r\n                <div className='Body-Second-row'>\r\n                    <div className='Charts-Container'><Charts Data={barChartData} darkMode={darkMode} requestBarChartData={requestBarChartData} ToggleLoading={ToggleLoading}></Charts></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Body;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\pages\\pages.jsx",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\authenticate.js",["130","131","132"],[],"import { useEffect } from 'react';\r\nimport { usePython } from 'react-py'\r\nimport axios from 'axios';\r\n\r\nconst baseURL = \"https://authentication.eniris.be/\";\r\n\r\nconst Authenticate = () => {\r\n\r\n    const login = async (username, password) => {    \r\n        console.log(\"Login Attempt\")\r\n        let data = JSON.stringify({\r\n            \"username\": username,\r\n            \"password\": password\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/login',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const logout = async (token) => {    \r\n        console.log(\"Logout Attempt\")\r\n        let data = '';\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/logout',\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const Accesstoken = async (token) => {    \r\n        console.log(\"AccessToken Retrieve\")\r\n        let data = '';\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/accesstoken',\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios(config);\r\n            return response.data; // Return the data after successful response\r\n          } catch (error) {\r\n            console.log(error);\r\n            // throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n          }\r\n\r\n    }\r\n\r\n    const Devices = async (accessToken) => {    \r\n        console.log(\"Devices Retrieve\")\r\n        let data = JSON.stringify([\r\n            {\r\n              \r\n            }\r\n          ]);\r\n          \r\n          const corsProxy = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n          let config = {\r\n            method: 'get',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://api.eniris.be/v1/device?id=137206',\r\n            headers: { \r\n              'Content-Type': 'application/json', \r\n              'Authorization': `Bearer ${accessToken}`,\r\n            },\r\n            data : data\r\n          };\r\n          \r\n          try {\r\n            const response = await axios.get(corsProxy + config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        login,\r\n        logout,\r\n        Accesstoken,\r\n        Devices,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Authenticate;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\measurements.js",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\user.js",["133","134","135","136","137"],[],"import axios from \"axios\";\r\n\r\nconst baseURL = \"https://firnenergybackend.onrender.com/api/users/\";\r\n\r\nconst User = () => {\r\n\r\n    const login = async (email, password, remember) => {\r\n\r\n        let data = JSON.stringify({\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"remember\": remember,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/login`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const GetUsername = async (token) => {\r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/info`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const GetAccessToken = async (token) => {    \r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/AccessToken`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const register = async (user) => {\r\n\r\n        let data = JSON.stringify({\r\n            \"email\": user.email,\r\n            \"password\": user.password,\r\n            \"phonenumber\": user.phonenumber,\r\n            \"city\": user.city,\r\n            \"street\": user.street,\r\n            \"housenumber\": user.housenumber,\r\n            \"postcode\": user.postcode,\r\n            \"role\": \"USER\",\r\n            \"deviceid\": \"\",\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/add`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    const GetUserData = async (token) => {    \r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/users`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const changeEnirisEmail = async (token, email, enirisEmail) => {\r\n\r\n        let data = JSON.stringify({\r\n            email: email,\r\n            enirisEmail, enirisEmail,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/change/enirisEmail`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    const changeDeviceId = async (token, email, deviceid) => {\r\n\r\n        let data = JSON.stringify({\r\n            email: email,\r\n            deviceid, deviceid,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/change/deviceid`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    const changeEnirisPassword = async (token, email, enirisPassword) => {\r\n\r\n        let data = JSON.stringify({\r\n            email: email,\r\n            enirisPassword, enirisPassword,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/change/enirispassword`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    const ResetPassword = async (token, email, password) => {\r\n\r\n        let data = JSON.stringify({\r\n            email: email,\r\n            password, password,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `https://firnenergybackend.onrender.com/api/users/ResetPassword`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        login,\r\n        GetUsername,\r\n        GetAccessToken,\r\n        register,\r\n        GetUserData,\r\n        changeEnirisEmail,\r\n        changeDeviceId,\r\n        changeEnirisPassword,\r\n        ResetPassword,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default User;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\QuickViewDetails\\QuickView.jsx",["138"],[],"import './QuickView.css'\r\nimport SunIcon from '../../../Images/sun.png'\r\nimport BatteryIcon from '../../../Images/battery.png'\r\nimport BoltIcon from '../../../Images/bolt.png'\r\nimport CoinIcon from '../../../Images/coin.png'\r\nimport CashIcon from '../../../Images/cash.png'\r\nimport GearIcon from '../../../Images/gear.png'\r\nimport ArrowIcon from '../../../Images/icons8-arrow-100.png';\r\nimport PcIcon from '../../../Images/computer-dynamic-color.png';\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst QuickView = ({foundFlowData, YieldToday, BatteryP, ConsumptionToday, RevenueToday}) => {\r\n    const [battCharge, setBattCharge] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (BatteryP >= 0.2) {\r\n            const battpercentage = Math.floor(BatteryP * 100)\r\n            setBattCharge(battpercentage)\r\n        } else {\r\n            setBattCharge(20)\r\n        }\r\n    }, [BatteryP])\r\n\r\n    return (\r\n\r\n        <div className='QuickViewDetails'>\r\n            <div className='QuickViewDetails-Left-Side'>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={SunIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>Yield today</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{YieldToday} kWh</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' src={BatteryIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>Battery charge</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{battCharge} %</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={BoltIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title' style={{fontSize: '90%'}}>Consumption today</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{ConsumptionToday} kWh</span>\r\n                </div>\r\n            </div>\r\n            <div className='QuickViewDetails-Right-Side'>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={CoinIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>\r\n                        <span>Earnings today</span> \r\n                        <span className='QuickViewDetails-Item-Under-Titel'>Energy back to grid</span>\r\n                    </span>\r\n                    <span className='QuickViewDetails-Item-Value'>€ {RevenueToday}</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <a className='QuickViewDetails-Link' href=\"https://insights.eniris.be/#/login\">\r\n                        <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={PcIcon} alt=\"\" /></div>\r\n                        <span className='QuickViewDetails-Item-Title'>\r\n                            <span>Advanced view</span>\r\n                            <span className='QuickViewDetails-Item-Under-Titel'>Our partner Eniris</span>\r\n                        </span>\r\n                        <span className='QuickViewDetails-Item-Value'><img width={35} src={ArrowIcon} alt=\"\" /></span>\r\n                    </a>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={GearIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>{foundFlowData ? <div>Status <span className='Title_Online'>Online</span></div> : <div>Status <span className='Title_Offline'>Offline</span></div>}</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{foundFlowData ? <div className='Status_Online'></div> : <div className='Status_Offline'></div>}</span>\r\n                </div>\r\n                {/* <div className='QuickViewDetails-Item'>\r\n                    <img className='test-quick-image' width=\"17%\" height=\"auto\" src={GearIcon} alt=\"\" />\r\n                    <span className='test-quick-title'></span>\r\n                    <span className='test-quick-val'></span>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default QuickView;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\auth\\auth.jsx",["139"],[],"import Authenticate from \"../../../api/authenticate\"\r\nimport { useState } from 'react'\r\n\r\nconst Auth = () => {\r\n    const [token, setToken] = useState('');\r\n    const [accessToken, setAccessToken] = useState('');\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isAccessed, setIsAccessed] = useState(false);\r\n    const [response, setResponse] = useState('');\r\n    const [devices, setDevices] = useState('');\r\n    const [foundDevices, setFoundDevices] = useState(false);\r\n\r\n    const authApi = Authenticate();\r\n\r\n    const HandleLoginEvent = async () => {\r\n\r\n        setToken(await authApi.login(\"frank@avalasia.com\", \"8695e05d865d6196\"));\r\n        setIsLoggedIn(true);\r\n    }\r\n\r\n    const HandleLogoutEvent = async () => {\r\n\r\n        setResponse(await authApi.logout(token));\r\n        if (response === \"\") {\r\n            setIsLoggedIn(false);\r\n            setIsAccessed(false);\r\n            setAccessToken('');\r\n            setToken('');\r\n        }\r\n    }\r\n\r\n    const HandleAccessToken = async () => {\r\n\r\n        setAccessToken(await authApi.Accesstoken(token));\r\n        setIsAccessed(true);\r\n    }\r\n\r\n    const handleGetDevices = async () => {\r\n\r\n        setDevices(await authApi.Devices(accessToken));\r\n        setFoundDevices(true);\r\n        console.log(devices)\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <button onClick={HandleLoginEvent}>Login</button>\r\n            {isLoggedIn ? <div>You are logged in</div> : <div>You are logged off</div>}\r\n            {isLoggedIn ? <button onClick={HandleAccessToken}>AccessToken</button> : <></>}\r\n            {isAccessed ? <div>You are accessed</div> : <div></div>}\r\n            <button onClick={HandleLogoutEvent}>logout</button>\r\n            <br />\r\n            <button className='Devices' onClick={handleGetDevices}>Devices</button>\r\n            {/* {foundDevices ? <div>{devices}</div> : <></>} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\charts\\charts.jsx",["140","141","142","143","144"],[],"import React, { useEffect, useState } from \"react\";\r\nimport './charts.css'\r\nimport {\r\n    ResponsiveContainer,\r\n    AreaChart,\r\n    BarChart,\r\n    Legend,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    Area,\r\n    Tooltip,\r\n    CartesianGrid,\r\n    ReferenceDot,\r\n} from \"recharts\";\r\nimport './charts.css';\r\n\r\nconst Charts = ({Data, darkMode, requestBarChartData, ToggleLoading}) => {\r\n    const [data, setData] = useState();\r\n    const [showSolarProd, setShowSolarProd] = useState(true);\r\n    const [showConsumption, setShowConsumption] = useState(true);\r\n    const [showImportFromGrid, setShowImportFromGrid] = useState(true);\r\n    const [showConsumedFromPv, setShowConsumedFromPv] = useState(true);\r\n    const [axisColors, setAxisColors] = useState(\"black\");\r\n    const [toolTipStyle, setToolTipStyle] = useState(\"black\");\r\n    const [legendStyle, setLegendStyle] = useState();\r\n    const [activeHeader, setActiveHeader] = useState(\"ConsumptionProduction\");\r\n    const [ConsumptionProductionHeaderStyle, setConsumptionProductionHeaderStyle] = useState(true);\r\n    const [BatteryStyle, setBatteryStyle] = useState(false);\r\n    const [RevenueStyle, setRevenueStyle] = useState(false);\r\n    const [dayStyle, setDayStyle] = useState(true);\r\n    const [monthStyle, setMonthStyle] = useState(false);\r\n    const [yearStyle, setYearStyle] = useState(false);\r\n    const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\r\n    const [actualDate, setActualDate] = useState(new Date());\r\n    const [allowRightArrow, setAllowRightArrow] = useState(false);\r\n    const arr = {\"SolarProd\": setShowSolarProd, \"Consumed\": setShowConsumption, \"Import\": setShowImportFromGrid, \"FromPv\": setShowConsumedFromPv}\r\n\r\n    //Updates the data if changed\r\n    useEffect(() => {\r\n\r\n        setData(Data)\r\n\r\n    }, [Data])\r\n    \r\n    //hides the bar by clicking on the legend\r\n    const ShowOrHideData = (val) => {\r\n        const methode = arr[val['payload'].id]\r\n        methode(val.inactive);\r\n    }\r\n\r\n    //checks for darkmode\r\n    useEffect(() => {\r\n\r\n        darkMode ? setAxisColors(\"white\") : setAxisColors(\"black\");\r\n        darkMode ? setToolTipStyle({borderRadius: \"25px\", color: \"white\", backgroundColor: \"#181A18\", border: \"solid white 1px\"}) : setToolTipStyle({borderRadius: \"25px\"});\r\n\r\n        // darkMode ? setLegendStyle({color: \"white\"}) : setLegendStyle({color: \"black\"});\r\n\r\n    }, [darkMode]);\r\n\r\n    //checks for darkmode and applies styles\r\n    const LegendStyle = (entry) => {\r\n\r\n        if (entry.inactive) {   \r\n            if (darkMode) {\r\n                return({color: \"white\", opacity: \"0.5\"})\r\n            } else {\r\n                return({color: \"black\", opacity: \"0.5\"})\r\n            }\r\n        } else {\r\n            if (darkMode) {\r\n                return( {color: \"white\"});\r\n            } else {\r\n                return( {color: \"black\"});\r\n            }\r\n        }\r\n        \r\n    }   \r\n\r\n    //this is the tooltip constructor\r\n    const CustomConsumptionToolTip = ({ active, payload, label}) => {\r\n\r\n        const colors = {\"SolarProd\": [\"#ff8057\", \"#ffd17f\"], \"Consumed\": [\"#c069e4\", \"#6c32fb\"], \"Import\": [\"#f46286\", \"#ec2871\"], \"FromPv\": [\"#06d3ba\", \"#189cd8\"], \"BatteryPercent\": [\"#8ad7b2\", \"#22df83\"], \"FedToGrid\": [\"#06d3ba\", \"#189cd8\"], \"FirnControllerProfit\": [\"#020024\", \"#090979\"]}\r\n        const parentStyle = darkMode? {borderRadius: \"25px\", color: \"white\", backgroundColor: \"#181A18\", border: \"solid white 2px\", padding: \"5px 10px 15px 15px\"} : {background: \"white\", borderRadius: \"25px\", padding: \"5px 10px 15px 15px\", border: \"black solid 2px\"}\r\n        if (active && payload && payload.length) {\r\n            return (\r\n                <div style={parentStyle}>\r\n                    <p>{label}</p>\r\n                    {payload.map((item) => <div style={{padding: \"3px 0px\",display: \"flex\", flexFlow: \"row nowrap\", alignItems: \"center\"}}><div style={{width: \"15px\", height: \"15px\", marginLeft: \"-5px\", marginRight: \"5px\", borderRadius: \"50%\", background: `linear-gradient(0deg, ${colors[item.id][0]}, ${colors[item.id][1]})`}}></div><div style={{width: '165px'}}>{item.dataKey}:</div><div>{item.value}</div><div>{item.unit}</div></div>)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if (dayStyle) {\r\n            setDate(new Date().toISOString().split('T')[0]);\r\n            setActualDate(new Date());\r\n        } else if (monthStyle) {\r\n            const newDate = (new Date().toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${newDate[0]}-${newDate[1]}`);\r\n            setActualDate(new Date());\r\n        } else {\r\n            const newDate = (new Date().toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${newDate[0]}`);\r\n            setActualDate(new Date());\r\n        }\r\n\r\n    }, [dayStyle, monthStyle, yearStyle])\r\n\r\n\r\n    //see which header is active and activate the correct graph and request correct data\r\n    const ConsumptionProductionClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(true)\r\n        setBatteryStyle(false)\r\n        setRevenueStyle(false)\r\n\r\n        //request consumptiondata\r\n        await requestBarChartData(\"BarChartConsumptionData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const BatteryClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(false)\r\n        setBatteryStyle(true)\r\n        setRevenueStyle(false)\r\n        \r\n        //request battery data\r\n        await requestBarChartData(\"BarChartBatteryData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const RevenueClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(false)\r\n        setBatteryStyle(false)\r\n        setRevenueStyle(true)\r\n\r\n        //request revenue data\r\n        await requestBarChartData(\"BarChartRevenueData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const DayClick = async() => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(true)\r\n        setMonthStyle(false)\r\n        setYearStyle(false)\r\n\r\n        //request data for day actualdate\r\n\r\n        if (ConsumptionProductionHeaderStyle) {\r\n            await requestBarChartData(\"BarChartConsumptionData\");\r\n        } else if (BatteryStyle) {\r\n            await requestBarChartData(\"BarChartBatteryData\");\r\n        } else {\r\n            await requestBarChartData(\"BarChartRevenueData\");\r\n        }\r\n\r\n        \r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const MonthClick = () => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(false)\r\n        setMonthStyle(true)\r\n        setYearStyle(false)\r\n\r\n\r\n        //request data per day actualdate\r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const YearClick = () => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(false)\r\n        setMonthStyle(false)\r\n        setYearStyle(true)\r\n\r\n        //request data per month actualdate\r\n\r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const HandleBeforeClick = () => {\r\n\r\n        if (dayStyle) {\r\n            let newDate = actualDate;\r\n            newDate.setDate(newDate.getDate() - 1);\r\n\r\n            setDate(newDate.toISOString().split('T')[0]);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n\r\n            //request data\r\n\r\n\r\n\r\n        } else if (monthStyle) {\r\n            let newDate = actualDate;\r\n            newDate.setMonth(newDate.getMonth() - 1);\r\n\r\n            const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${tempDate[0]}-${tempDate[1]}`);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n        } else {\r\n            let newDate = actualDate;\r\n            newDate.setFullYear(newDate.getFullYear() - 1);\r\n\r\n            const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${tempDate[0]}`);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n        }\r\n\r\n    }\r\n    const HandleAfterClick = () => {\r\n\r\n        if (allowRightArrow) {\r\n            if (dayStyle) {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setDate(newDate.getDate() + 1);\r\n    \r\n                setDate(newDate.toISOString().split('T')[0])\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getDate() === todayDate.getDate() && newDate.getMonth() === todayDate.getMonth() && newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            } else if (monthStyle) {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setMonth(newDate.getMonth() + 1);\r\n    \r\n                const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n                setDate(`${tempDate[0]}-${tempDate[1]}`);\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getMonth() === todayDate.getMonth() && newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            } else {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setFullYear(newDate.getFullYear() + 1);\r\n    \r\n                const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n                setDate(`${tempDate[0]}`);\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"Graphs\">\r\n            <div className=\"Graph-Headers\">\r\n                <button className=\"Graph-Title\" onClick={ConsumptionProductionClick}><div className={ConsumptionProductionHeaderStyle ? \"activeCons\" : \"inactiveCons\"}>Consumption & Production</div></button>\r\n                <button className=\"Graph-Title\" onClick={BatteryClick}><div className={BatteryStyle ? \"activeBattery\" : \"inactiveBattery\"}>Battery</div></button>\r\n                <button className=\"Graph-Title\" onClick={RevenueClick}><div className={RevenueStyle ? \"activeRevenue\" : \"inactiveRevenue\"}>Revenue</div></button>\r\n                <div className=\"TimeFrame-Container\">\r\n                    <div className=\"TimePeriodButtons\"><button onClick={DayClick} style={dayStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}}>Day</button><button onClick={MonthClick} style={monthStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}} id=\"TimeFrame-Button-Middle\">Month</button><button onClick={YearClick} style={yearStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}}>Year</button></div>\r\n                    <div className=\"TimeFrame-Time\"><button onClick={HandleBeforeClick} className=\"TimeFrame-Time-Arrow Time-Frame-Time-Arrow-Left\">{\"<\"}</button><button className=\"TimeFrame-Time-TimeDisplay\">{date}</button><button onClick={HandleAfterClick} style={allowRightArrow ? {} : {opacity: 0.5, cursor: \"default\"}} className=\"TimeFrame-Time-Arrow Time-Frame-Time-Arrow-Right\">{\">\"}</button></div>\r\n                </div>\r\n            </div>\r\n            {/* ConsumptionAndProduction Chart */}\r\n            {ConsumptionProductionHeaderStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id={`SolarProductionColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#ffd17f' />\r\n                            <stop offset='1' stopColor='#ff8057' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ConsumptionColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#c069e4' />\r\n                            <stop offset='1' stopColor='#6c32fb' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ImportFromGridColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#f46286' />\r\n                            <stop offset='1' stopColor='#ec2871' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ConsumedFromPV`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#06d3ba' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"0 0\" />\r\n                        <XAxis interval={1} dataKey=\"Name\" stroke={axisColors}/>\r\n                        <YAxis unit={\"kWh\"} scale={\"linear\"} tickFormatter={(value) => value.toFixed(0)} interval={1} stroke={axisColors}/>\r\n                        <Tooltip contentStyle={toolTipStyle} isAnimationActive={true} content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend onClick={(value) => ShowOrHideData(value)} formatter={(value, entry, index) => <span style={LegendStyle(entry)}>{value}</span>}/>\r\n                        <Bar id=\"SolarProd\" dataKey=\"Solar production\" fill={`url(#SolarProductionColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showSolarProd ? false : true}/>\r\n                        <Bar id=\"Consumed\" dataKey=\"Consumption\" fill={`url(#ConsumptionColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showConsumption ? false : true}/>\r\n                        <Bar id=\"Import\" dataKey=\"Import from grid\" fill={`url(#ImportFromGridColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showImportFromGrid ? false : true}/>\r\n                        <Bar id=\"FromPv\" dataKey=\"Consumed from PV\" fill={`url(#ConsumedFromPV)`} legendType=\"circle\" unit={\"kWh\"} hide={showConsumedFromPv ? false : true}/>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n            {/* BatteryChart */}\r\n            {BatteryStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <AreaChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"#8ad7b2\" stopOpacity={0.8}/>\r\n                            <stop offset=\"95%\" stopColor=\"#22df83\" stopOpacity={0}/>\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"Name\" stroke={axisColors} tickFormatter={(value) => `${value.split(\":\")[0]}:00:00`} interval={50}/>\r\n                        <YAxis stroke={axisColors} unit={\"%\"} />\r\n                        <Tooltip content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend iconType=\"plainline\" />\r\n                        <Area id=\"BatteryPercent\" type={\"monotone\"} dataKey=\"Battery percentage\" stroke=\"#22df83\" fillOpacity={1} unit={\"%\"} legendType=\"circle\" fill=\"url(#colorUv)\"/>\r\n                        {/* hide={showSolarProd ? false : true} */}\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n            {RevenueStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id={`FedToGridColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#06d3ba' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`FirnControllerProfitColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#0e578b' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"Name\" stroke={axisColors} interval={1}/>\r\n                        <YAxis unit={\"€\"} stroke={axisColors}/>\r\n                        <Tooltip contentStyle={toolTipStyle} isAnimationActive={true} content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend iconType=\"circle\"/>\r\n                        <Bar id=\"FedToGrid\" stackId={'a'} unit={'€'} dataKey=\"Fed to grid\" fill={`url(#FedToGridColor)`} />\r\n                        <Bar id=\"FirnControllerProfit\" stackId={'a'} unit={'€'} dataKey=\"FirnController Profit\" fill={`url(#FirnControllerProfitColor)`} />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// \r\nexport default Charts;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\currentFlow\\currentFlow.jsx",["145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],[],"import './currentFlow.css'\r\nimport Solar_Icon from '../../../Images/Solar_Icon.png'\r\nimport Battery_Icon from '../../../Images/Battery_Icon.png'\r\nimport Grid_Icon from '../../../Images/Grid_Icon.png'\r\nimport Home_Icon from '../../../Images/Home_Icon.png'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Solar_White_Icon from '../../../Images/Solar_White_icon.png'\r\nimport Grid_White_Icon from '../../../Images/Grid_White_Icon.png'\r\nimport Battery_White_Icon from '../../../Images/battery_white_icon.png'\r\nimport Home_White_Icon from '../../../Images/Home_White_Icon.png'\r\n\r\nconst CurrentFlow = ({darkMode, SOLARW, GRIDW, HOMEW, BATTERYW, BATTERYP}) => {\r\n    // Values: \"Import\" = X > 0, \"Export\" = X < 0, \"Static\" = X == 0\r\n    const [SOLAR_BATT, setSOLAR_BATT] = useState(false);\r\n    const [SOLAR_GRID, setSOLAR_GRID] = useState(false);\r\n    const [SOLAR_HOME, setSOLAR_HOME] = useState(false);\r\n    const [GRID_BATT, setGRID_BATT] = useState(false);\r\n    const [GRID_HOME, setGRID_HOME] = useState(false);\r\n    const [BATT_GRID, setBATT_GRID] = useState(false);\r\n    const [BATT_HOME, setBATT_HOME] = useState(false);\r\n    const [BatteryPercentage, setBatteryPercentage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (BATTERYP >= 0.2) {\r\n            const battpercentage = Math.floor(BATTERYP * 100)\r\n            setBatteryPercentage(battpercentage)\r\n        } else {\r\n            setBatteryPercentage(20)\r\n        }\r\n        \r\n        setSOLAR_BATT(false)\r\n        setSOLAR_GRID(false)\r\n        setSOLAR_HOME(false)\r\n        setGRID_BATT(false)\r\n        setGRID_HOME(false)\r\n        setBATT_GRID(false)\r\n        setBATT_HOME(false)\r\n\r\n        switch (true) {\r\n            case GRIDW > 0:\r\n                switch (true) {\r\n                    case HOMEW - GRIDW < 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Grid -> Batt\r\n                                setGRID_BATT(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                //Solar -> Batt\r\n                                setSOLAR_BATT(true)\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Grid -> Batt\r\n                                setGRID_BATT(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW - GRIDW === 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                //Solar -> Batt\r\n                                setSOLAR_BATT(true)\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW - GRIDW > 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Batt -> Home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch (true) {\r\n                                    case SOLARW + GRIDW < HOMEW:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        //batt -> home\r\n                                        setBATT_HOME(true)\r\n                                        break;\r\n                                    case SOLARW + GRIDW === HOMEW:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        break;\r\n\r\n                                    case SOLARW + GRIDW > HOMEW:\r\n                                        //solar -> batt\r\n                                        setSOLAR_BATT(true)\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case GRIDW === 0:\r\n                switch(true) {\r\n                    case SOLARW === 0:\r\n                        switch(true) {\r\n                            case HOMEW === 0:\r\n                                //niets\r\n                                break;\r\n                            case HOMEW > 0:\r\n                                //Batt -> home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case SOLARW > 0:\r\n                        switch(true) {\r\n                            case HOMEW - SOLARW < 0:\r\n                                //solar -> batt\r\n                                setSOLAR_BATT(true)\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                break;\r\n                            case HOMEW - SOLARW === 0:\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                break;\r\n                            case HOMEW - SOLARW > 0:\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                //batt -> home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case GRIDW < 0:\r\n                const GRIDWABS = Math.abs(GRIDW);\r\n                switch(true) {\r\n                    case HOMEW === 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //batt -> grid\r\n                                setBATT_GRID(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch(true) {\r\n                                    case SOLARW - GRIDWABS < 0:\r\n                                        //batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - GRIDWABS === 0:\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - GRIDWABS > 0:\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        //solar -> batt\r\n                                        setSOLAR_BATT(true)\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW > 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //batt -> grid\r\n                                setBATT_GRID(true)\r\n                                //batt -> home\r\n                                setBATT_HOME(true)\r\n\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch(true) {\r\n                                    case SOLARW - HOMEW < 0:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //batt -> home\r\n                                        setBATT_HOME(true)\r\n                                        //batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - HOMEW === 0:\r\n                                        //Batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        break;\r\n                                    case SOLARW - HOMEW > 0:\r\n                                        switch(true) {\r\n                                            case BATTERYW < 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //batt -> grid\r\n                                                setBATT_GRID(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                            case BATTERYW === 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                            case BATTERYW > 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //solar -> batt\r\n                                                setSOLAR_BATT(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n    }, [BATTERYP, GRIDW, HOMEW]);\r\n    \r\n  return (\r\n    <>\r\n        <div className=\"CurrentFlow-Container\">\r\n            <div className='SOLAR'>\r\n                <div className='CurrentFlow-Outer-Circle SOLAR-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Solar_White_Icon : Solar_Icon} alt=\"\" />\r\n                        <div>{SOLARW} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='GRID'>\r\n                <div className='CurrentFlow-Outer-Circle GRID-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Grid_White_Icon : Grid_Icon} alt=\"\" />\r\n                        <div>{Math.abs(GRIDW)} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='BATTERY'>\r\n                <div className='CurrentFlow-Outer-Circle BATTERY-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <div className='CurrentFlow-BATTERY-Percentage'>\r\n                            <img className='BATTERY-icon' src={darkMode ? Battery_White_Icon : Battery_Icon} alt=\"\" />\r\n                            <div className='BATTERY-percentage'>{BatteryPercentage}%</div>\r\n                        </div>\r\n                        <div>{Math.abs(BATTERYW)} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='HOME'>\r\n                <div className='CurrentFlow-Outer-Circle HOME-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Home_White_Icon : Home_Icon} alt=\"\" />\r\n                        <div>{HOMEW} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <svg className='BATTER-GRID-Line' xmlns=\"http://www.w3.org/2000/svg\" viewBox='0 0 450 500'>\r\n                    <defs>\r\n                        <linearGradient id=\"horizontal-line\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\" gradientUnits='userSpaceOnUse'>\r\n                            <stop offset=\"0%\" stopColor=\"#65D8A0\" />\r\n                            <stop offset=\"40%\" stopColor=\"#76CF9E\" />\r\n                            <stop offset=\"60%\" stopColor=\"#F88C8C\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"vertical-line\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\" gradientUnits='userSpaceOnUse'>\r\n                            <stop offset=\"0%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"40%\" stopColor=\"#D9B857\" />\r\n                            <stop offset=\"60%\" stopColor=\"#CE80EA\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"solargrid-line\" gradientUnits=\"userSpaceOnUse\" x1=\"230\" y1=\"151.5\" x2=\"300.6\" y2=\"245\">\r\n                            <stop offset=\"10%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"50%\" stopColor=\"#e0b15d\" />\r\n                            <stop offset=\"90%\" stopColor=\"#F88C8C\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"solarbatt-line\" gradientUnits=\"userSpaceOnUse\" x1=\"220\" y1=\"151.5\" x2=\"148\" y2=\"245\">\r\n                            <stop offset=\"10%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"50%\" stopColor=\"#b6c469\" />\r\n                            <stop offset=\"90%\" stopColor=\"#65D8A0\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"batthome-line\" gradientUnits=\"userSpaceOnUse\" x1=\"148\" y1=\"255\" x2=\"220\" y2=\"349\">\r\n                            <stop offset=\"10%\" stopColor=\"#65d8a0\" />\r\n                            <stop offset=\"50%\" stopColor=\"#85beb6\" />\r\n                            <stop offset=\"90%\" stopColor=\"#ce80ea\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"homegrid-line\" gradientUnits=\"userSpaceOnUse\" x1=\"230\" y1=\"349\" x2=\"300.6\" y2=\"255\">\r\n                            <stop offset=\"10%\" stopColor=\"#ce80ea\" />\r\n                            <stop offset=\"50%\" stopColor=\"#e486b9\" />\r\n                            <stop offset=\"90%\" stopColor=\"#f88c8c\" />\r\n                        </linearGradient>\r\n                        {/* BATTERY | GIRD MARKERS */}\r\n                            {/* BATTERY TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"BATT_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"10\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65D8A0; #F88C8C\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"GRID_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"0\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#F88C8C; #65D8A0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* SOLAR | HOME MARKERS */}\r\n                            {/* SOLAR TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"10\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #CE80EA\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                            {/* HOME TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"HOME_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"0\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#CE80EA; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                        {/* SOLAR | GRID MARKERS */}\r\n                            {/* SOLAR TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #e0b15d; #F88C8C\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"GRID_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#F88C8C; #e0b15d; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                        {/* SOLAR | BATTERY MARKERS */}\r\n                            {/* SOLAR TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #b6c469; #65D8A0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                                \r\n                            </marker>\r\n                            {/* BATTERY TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"BATT_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65D8A0; #b6c469; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* HOME | BATTERY MARKERS */}\r\n                            {/* BATTERY TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"BATT_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65d8a0; #85beb6; #ce80ea\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* HOME TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"HOME_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#ce80ea; #85beb6; #65d8a0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* HOME | GRID MARKERS */}\r\n                            {/* HOME TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"HOME_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#ce80ea; #e486b9; #f88c8c\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"GRID_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#f88c8c; #e486b9; #ce80ea\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                    </defs>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/* BATTERY | GRID LINE */}\r\n                    {BATT_GRID | GRID_BATT ? <line x1=\"33%\" y1=\"50%\" x2=\"66.8%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"2\" /> : <></>}\r\n                    {/* BATTERY to GRID */}\r\n                    {BATT_GRID ? <line x1=\"33%\" y1=\"50%\" x2=\"66.8%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_GRID)\">\r\n                        <animate attributeName=\"x2\" from=\"36%\" to=\"66.8%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* GRID to BATTERY */}\r\n                    {GRID_BATT ? <line x1=\"66.8%\" y1=\"50%\" x2=\"33%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_BATT)\">\r\n                        <animate attributeName=\"x2\" from=\"66.8%\" to=\"36%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* SOLAR | HOME LINE */}\r\n                    {SOLAR_HOME ? <line x1=\"50%\" y1=\"30.4%\" x2=\"50%\" y2=\"69.8%\" stroke=\"url(#vertical-line)\" strokeWidth=\"2\" /> : <></>}\r\n                    {/* SOLAR to HOME */}\r\n                    {SOLAR_HOME ? <line x1=\"50%\" y1=\"30.4%\" x2=\"50%\" y2=\"69.8%\" stroke=\"url(#vertical-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_HOME)\">\r\n                        <animate attributeName=\"y2\" from=\"32.5%\" to=\"69.8%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* HOME to SOLAR */}\r\n                    {/* <line x1=\"50%\" y1=\"69.8%\" x2=\"50%\" y2=\"30.4%\" stroke=\"url(#vertical-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_SOLAR)\">\r\n                        <animate attributeName=\"y2\" from=\"69.8%\" to=\"32.5%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> */}\r\n\r\n\r\n                    {/* SOLAR | GRID LINE */}\r\n                    {SOLAR_GRID ? <path d=\"M230,151.5 L230,210 C230,245 230,245 260,245 L300.6,245\" fill=\"none\" stroke=\"url(#solargrid-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {SOLAR_GRID ? <path d=\"M230,153 L230,210 C230,245 230,245 260,245 L293.6,245\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"SOLARGRID\"/> : <></>}\r\n                    {/* <path d=\"M293.6,245 L260,245 C230,245 230,245 230,210 L230,153\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"GRIDSOLAR\"/> */}\r\n                    {/* SOLAR to GRID */}\r\n                    {SOLAR_GRID ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#SOLAR_GRID)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_GRID)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#SOLARGRID\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* GRID to SOLAR */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#GRID_SOLAR)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_SOLAR)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#GRIDSOLAR\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n\r\n                    {/* SOLAR | BATTERY LINE */}\r\n                    {SOLAR_BATT ? <path d=\"M220,151.5 L220,210 C220,245 220,245 188,245 L148,245\" fill=\"none\" stroke=\"url(#solarbatt-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {SOLAR_BATT ? <path d=\"M220,153 L220,210 C220,245 220,245 188,245 L155,245\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"SOLARBATT\"/> : <></>}\r\n                    {/* <path d=\"M155,245 L188,245 C220,245 220,245 220,210 L220,153\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"BATTSOLAR\"/> */}\r\n                    {/* SOLAR to BATTERY */}\r\n                    {SOLAR_BATT ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#SOLAR_BATT)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_BATT)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#SOLARBATT\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* BATTERY to SOLAR */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#BATT_SOLAR)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_SOLAR)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#BATTSOLAR\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n                    {/* BATTERY | HOME LINE */}\r\n                    {BATT_HOME ? <path d=\"M148,255 L188,255 C220,255 220,255 220,290.5 L220,349\" fill=\"none\" stroke=\"url(#batthome-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {BATT_HOME ? <path d=\"M155,255 L188,255 C220,255 220,255 220,290.5 L220,345.5\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"BATTHOME\"/> : <></>}\r\n                    {/* <path d=\"M220,345.5 L220,290.5 C220,255 220,255 188,255 L155,255\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"HOMEBATT\"/> */}\r\n                    {/* BATTERY to HOME */}\r\n                    {BATT_HOME ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#BATT_HOME)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_HOME)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#BATTHOME\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* HOME to BATTERY */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#HOME_BATT)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_BATT)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#HOMEBATT\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n                    {/* HOME | GRID LINE */}\r\n                    {GRID_HOME ? <path d=\"M230,349 L230,290.5 C230,255 230,255 260,255 L300.6,255\" fill=\"none\" stroke=\"url(#homegrid-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {GRID_HOME ? <path d=\"M293.6,255 L260,255 C230,255 230,255 230,290.5 L230,345.5\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"GRIDHOME\"/> : <></>}\r\n                    {/* <path d=\"M230,345.5 L230,290.5 C230,255 230,255 260,255 L293.6,255\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"HOMEGRID\"/> */}\r\n                    {/* HOME to GRID */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#HOME_GRID)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_GRID)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#HOMEGRID\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n                    {/* GRID to HOME */}\r\n                    {GRID_HOME ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#GRID_HOME)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_HOME)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#GRIDHOME\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    </>\r\n);};\r\n\r\nexport default CurrentFlow;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\WebHomePage.jsx",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177"],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Authentication\\login.jsx",["178","179","180","181","182","183","184","185"],[],"import { useEffect, useState } from 'react';\r\nimport './login.css'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport User from '../../api/user';\r\nimport SlantedImage from '../../Images/LightmodeSlanted.png'\r\nimport Logo from '../../Images/firn-embleem-brown.png';\r\nimport SlantedImageBlack from '../../Images/DarkmodeSlanted.png'\r\n\r\nconst Login = () => {\r\n\r\n    const navigate = useNavigate();\r\n    const userApi = User();\r\n    const [errorMessages, setErrorMessages] = useState({})\r\n    const [Succesfull, setSuccesfull] = useState(false);\r\n    const [Failed, setFailed] = useState(false);\r\n    const [Login, setLogin] = useState(true);\r\n    const [userExists, setUserExists] = useState(false);\r\n\r\n    const renderErrorMessage = (name) => name === errorMessages.name && (<div className='error'>{errorMessages.message}</div>);\r\n\r\n    const KeepLoggedIn = async() => {\r\n        const token = localStorage.getItem('jwtToken');\r\n\r\n        if (token) {\r\n\r\n            const user = await userApi.GetUsername(token);\r\n\r\n            if (user.data.user.role == \"USER\") {\r\n                navigate('/HomePage');\r\n            } else if (user.data.user.role == \"ADMIN\") {\r\n                navigate('/AdminPage');\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        KeepLoggedIn();\r\n    })\r\n\r\n    const handleLogin = async (event) => {\r\n        event.preventDefault();\r\n        //check if user exisits\r\n\r\n        setFailed(false)\r\n        setSuccesfull(false)\r\n\r\n        var { email, pass, remember } = document.forms[0];\r\n\r\n        const response = await userApi.login(email.value, pass.value, remember.checked);\r\n        \r\n        if (response.status === 204) {\r\n            setFailed(true);\r\n            \r\n        } else {\r\n            setSuccesfull(true);\r\n            localStorage.setItem('jwtToken', response.data.token);\r\n\r\n            if (response.data.role == 'USER') {\r\n                navigate('/HomePage');\r\n            } else if (response.data.role == 'ADMIN') {\r\n                //navigate to admin view\r\n                navigate('/AdminPage');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (event) => {\r\n        event.preventDefault();\r\n        //check if user exisits\r\n\r\n        setFailed(false)\r\n        setSuccesfull(false)\r\n\r\n        var { email, pass, street, housenumber, postcode, city, phonenumber} = document.forms[0];\r\n\r\n        const user = {\r\n            \"email\": email.value,\r\n            \"password\": pass.value,\r\n            \"phonenumber\": phonenumber.value,\r\n            \"city\": city.value,\r\n            \"street\": street.value,\r\n            \"housenumber\": housenumber.value,\r\n            \"postcode\": postcode.value,\r\n            \"role\": \"USER\",\r\n            \"deviceid\": \"\",\r\n        }\r\n\r\n        try {\r\n            setUserExists(false)\r\n            const response = await userApi.register(user);\r\n            setSuccesfull(true)\r\n        } catch (error) {\r\n            setUserExists(true)\r\n        }\r\n\r\n       \r\n        // if (response.status === 204) {\r\n        //     setFailed(true);\r\n            \r\n        // } else {\r\n        //     setSuccesfull(true);\r\n        //     localStorage.setItem('jwtToken', response.data.token);\r\n\r\n        //     if (response.data.role == 'USER') {\r\n        //         navigate('/HomePage');\r\n        //     } else {\r\n        //         //navigate to admin view\r\n        //         console.log(response)\r\n        //     }\r\n\r\n        // }\r\n\r\n    };\r\n\r\n    const HandleSwitch = () => {\r\n        setLogin(!Login);\r\n    }\r\n\r\n    const handleBackClick= () => {\r\n        navigate('/');\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n            <div className=\"image-org-container\">\r\n                {/* <img className='LoginImage' src={SlantedImage} alt=\"Desktop Website\" />  */}\r\n                <div className=\"image-container\">\r\n                    <img className=\"image front-image\" src={SlantedImageBlack} alt=\"Front Image\" />\r\n                    <img className=\"image back-image\" src={SlantedImage} alt=\"Back Image\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"login-container\">\r\n                <div className='GoBackButton-Container'>\r\n                    <button onClick={handleBackClick} className='GoBackButton'>Go back</button>\r\n                </div>\r\n                <img width={150} src={Logo} alt=\"\" />\r\n                <h1 className='Login-Header'>{Login ? \"Login\" : \"Register\"}</h1>\r\n                {Login ? \r\n\r\n                    <form className='LoginForm' onSubmit={handleLogin}>\r\n                        <div className=\"input-group\">\r\n                            <label className='input-Label'>Email </label>\r\n                            <input className='input-Field' type=\"text\" name=\"email\" required />\r\n                            {renderErrorMessage(\"email\")}\r\n                        </div>\r\n                        <div className=\"input-group\">\r\n                            <label className='input-Label'>Password </label>\r\n                            <input className='input-Field' type=\"password\" name=\"pass\" required />\r\n                            {renderErrorMessage(\"pass\")}\r\n                        </div>\r\n                        <div className='login-Details'>\r\n                            <div>\r\n                                <input type=\"checkbox\" id=\"remember\" name=\"remember\"/>\r\n                                <label htmlFor=\"remember\" className='input-Checkbox-Label'>Remember me</label>\r\n                            </div>\r\n                            <div className='login-switch-button-container'>\r\n                                <button onClick={HandleSwitch} className='login-switch-button'>Register</button>\r\n                            </div>\r\n                        </div>\r\n                        <button className='Login-form-button' type=\"submit\">Login</button>\r\n                        {Succesfull ? <div className='LoginSuccesfull'>Loggin Succesfull!</div> : <></>}\r\n                        {Failed ? <div className='LoginFailed'>Loggin Failed!</div> : <></>}\r\n                    </form>\r\n\r\n                : \r\n                    <form className='LoginForm' onSubmit={handleRegister}>\r\n                        <div className='input-group-one'>\r\n                            <div className=\"input-group-register\">\r\n                                <label className='input-Label'>Email </label>\r\n                                <input className='input-Field' type=\"text\" name=\"email\" required />\r\n                                {renderErrorMessage(\"email\")}\r\n                            </div>\r\n                            <div className=\"input-group-register\">\r\n                                <label className='input-Label'>Password </label>\r\n                                <input className='input-Field' type=\"password\" name=\"pass\" required />\r\n                                {renderErrorMessage(\"pass\")}\r\n                            </div>\r\n                        </div>\r\n                        <div className='input-group-one'>\r\n                            <div className=\"input-group-register input-group-street\">\r\n                                <label className='input-Label'>Street </label>\r\n                                <input className='input-Field' type=\"text\" name=\"street\" required />\r\n                            </div>\r\n                            <div className=\"input-group-register input-group-housenumber\">\r\n                                <label className='input-Label'>House number </label>\r\n                                <input className='input-Field' name=\"housenumber\" required />\r\n                                {renderErrorMessage(\"pass\")}\r\n                            </div>\r\n                        </div>\r\n                        <div className='input-group-one'>\r\n                            <div className=\"input-group-register\">\r\n                                <label className='input-Label'>Postcode </label>\r\n                                <input className='input-Field' type=\"text\" name=\"postcode\" required />\r\n                            </div>\r\n                            <div className=\"input-group-register\">\r\n                                <label className='input-Label'>City </label>\r\n                                <input className='input-Field' name=\"city\" required />\r\n                            </div>\r\n                        </div>\r\n                        <div className='input-group-one'>\r\n                            <div className=\"input-group-register\">\r\n                                <label className='input-Label'>Phone number </label>\r\n                                <input className='input-Field' type=\"text\" name=\"phonenumber\" required />\r\n                            </div>\r\n                            <button className='Login-form-button' type=\"submit\">Register</button>\r\n                        </div>\r\n                        <div className='login-Details'>\r\n                            {/* <div>\r\n                                <input type=\"checkbox\" id=\"remember\" name=\"remember\"/>\r\n                                <label htmlFor=\"remember\" className='input-Checkbox-Label'>Remember me</label>\r\n                            </div> */}\r\n                            <div className='login-switch-button-container'>\r\n                                <button onClick={HandleSwitch} className='login-switch-button'>Allready have an account?</button>\r\n                            </div>\r\n                        </div>\r\n                        {Succesfull ? <div className='LoginSuccesfull'>{Login ? \"Loggin Succesfull!\" : \"Registration Succesfull!\"} </div> : <></>}\r\n                        {Failed ? <div className='LoginFailed'>Loggin Failed!</div> : <></>}\r\n                        {userExists ? <div className='LoginFailed'>User allready exists!</div> : <></>}\r\n                    </form>\r\n                \r\n                \r\n                }\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default Login;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\adminPage.jsx",["186"],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\usersList.jsx",["187","188","189"],[],"import { useEffect, useState } from \"react\";\r\nimport User from '../../../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserDisplay from './userDisplay';\r\nimport './usersList.css'\r\n\r\nimport Authenticate from '../../../../api/authenticate'\r\n\r\nconst UsersList = () => {\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const [reloadUserList, setReloadUserList] = useState(false);\r\n\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(() => {\r\n\r\n        setReloadUserList(false)\r\n\r\n        const ConfirmUserRole = async () => {\r\n            const token = localStorage.getItem('jwtToken');\r\n            try {\r\n                const user = await userApi.GetUsername(token);\r\n\r\n                if (user.data.user.role != 'ADMIN') {\r\n                    throw Error;\r\n                }\r\n\r\n                //get the users\r\n                const users = await userApi.GetUserData(token);\r\n                \r\n                setUsers(users.data);\r\n\r\n            } catch (error) {\r\n                //token expired or invalid navigate to Login\r\n                localStorage.removeItem('jwtToken');\r\n                navigate('/');\r\n            }\r\n        }\r\n        ConfirmUserRole();\r\n        \r\n    }, [reloadUserList]);\r\n\r\n    const RefreshUserListPage = () => {\r\n        setReloadUserList(true);\r\n    }\r\n\r\n    // const [data, setData] = useState([]);\r\n    // const AuthApi = Authenticate();\r\n\r\n    // useEffect(() => {\r\n        \r\n    //     const retrievedata = async() => {\r\n    //         const JwtToken = localStorage.getItem('jwtToken');\r\n    //         const AccessToken = await userApi.GetAccessToken(JwtToken);\r\n    //         console.log(AccessToken)\r\n    //         const dete = await AuthApi.Devices(AccessToken);\r\n    //         setData(dete);\r\n    //     }\r\n    //     retrievedata();\r\n\r\n    // }, [])\r\n\r\n    return (\r\n        <div className=\"UserList-Container\">\r\n            {users.map((user, index) => (\r\n                <div key={index} className=\"UserSet\">\r\n                <UserDisplay\r\n                    email={user.email}\r\n                    password={user.password}\r\n                    deviceId={user.deviceid}\r\n                    enirisEmail={user.enirisEmail}\r\n                    enirisPassword={user.enirisPassword}\r\n                    RefreshUserListPage={RefreshUserListPage}\r\n                />\r\n                </div>\r\n            ))}\r\n        </div>\r\n        // <div>\r\n        //     {data}\r\n        // </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UsersList;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\userDisplay.jsx",["190","191","192","193","194","195","196"],[],"import { useState } from 'react';\r\nimport './userDisplay.css';\r\nimport User from '../../../../api/user';\r\n\r\n\r\n\r\nconst UserDisplay = ({email, password, enirisEmail, deviceId, enirisPassword, RefreshUserListPage}) => {\r\n\r\n    const [nothingFilledError, setNothingFilledError] = useState(false);\r\n    const [Error, setError] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [passwordresetSuccess, setPasswordResetSuccess] = useState(false);\r\n    const [passwordresetFailed, setPasswordResetFailed] = useState(false);\r\n\r\n    const [newEnirisEmail, setNewEnirisEmail] = useState('');\r\n    const [newDeviceId, setNewDeviceId] = useState('');\r\n    const [newEnirisPassword, setNewEnirisPassword] = useState('');\r\n    const [newDefaultPassword, setNewDefaultPassword] = useState('');\r\n\r\n    const [EnirisPasswordNotHashed, setEnirisPasswordNotHashed] = useState('');\r\n\r\n    const userApi = User();\r\n\r\n    const HandleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        setNothingFilledError(false);\r\n        setSuccess(false);\r\n        setError(false);\r\n        setPasswordResetSuccess(false);\r\n        setPasswordResetFailed(false);\r\n\r\n        //check if admin > change fields that are not empty\r\n\r\n        if (newEnirisEmail === \"\" && newDeviceId === \"\" && newEnirisPassword === \"\") {\r\n            setNothingFilledError(true)\r\n        } else {\r\n            try {\r\n                const token = localStorage.getItem('jwtToken');\r\n                if (newEnirisEmail != \"\") {\r\n                    //update enirisemial\r\n                    const response = await userApi.changeEnirisEmail(token, email, newEnirisEmail);\r\n                }\r\n                if (newDeviceId != \"\") {\r\n                    //update device id\r\n                    const response = await userApi.changeDeviceId(token, email, newDeviceId);\r\n                }\r\n                if (newEnirisPassword != \"\") {\r\n                    //update eniris pass\r\n                    const response = await userApi.changeEnirisPassword(token, email, newEnirisPassword);\r\n                    setEnirisPasswordNotHashed(newEnirisPassword);\r\n                }\r\n                setSuccess(true);\r\n                RefreshUserListPage();\r\n            } catch (error) {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const HandlePasswordReset = async() => {\r\n        const token = localStorage.getItem('jwtToken');\r\n        const randompass = generatePassword(10);\r\n        setNewDefaultPassword(randompass);\r\n\r\n        setNothingFilledError(false);\r\n        setSuccess(false);\r\n        setError(false);\r\n        setPasswordResetSuccess(false);\r\n        setPasswordResetFailed(false);\r\n\r\n        try {\r\n            setNothingFilledError(false);\r\n            setSuccess(false);\r\n            setError(false);\r\n            const response = await userApi.ResetPassword(token, email, randompass);\r\n            setPasswordResetSuccess(true);\r\n            setNothingFilledError(false);\r\n            setSuccess(false);\r\n            setError(false);\r\n        } catch (error) {\r\n            setPasswordResetFailed(true);\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n    function generatePassword(length) {\r\n        const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?\";\r\n        let password = \"\";\r\n      \r\n        for (let i = 0; i < length; i++) {\r\n          const randomIndex = Math.floor(Math.random() * charset.length);\r\n          password += charset[randomIndex];\r\n        }\r\n      \r\n        return password;\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <form className='UserDisplay-Container' onSubmit={HandleSubmit}>\r\n                <div className='UserDisplay-Container-Column'>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>User:</div>\r\n                        <div className='UserDisplay-Container-Column-Item-Value'>{email}</div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Password:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{newDefaultPassword}</div>\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={HandlePasswordReset} type='' className='UserDisplay-Container-Column-Item-ResetPassword'>Reset Password</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Eniris email:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{enirisEmail}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newenirisemail' type=\"text\" onChange={(e) => setNewEnirisEmail(e.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='UserDisplay-Container-Column'>\r\n                <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>DeviceId:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{deviceId}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newdeviceid' type=\"text\" onChange={(e) => setNewDeviceId(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Eniris pass:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{EnirisPasswordNotHashed}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newenirispassword' type=\"text\" onChange={(e) => setNewEnirisPassword(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-button-container'><button type=\"submit\" className='UserDisplay-Container-Column-Item-button'>Submit</button></div>\r\n                        \r\n                    </div>\r\n                    {passwordresetFailed ? <div className='UserDisplay-errorText'>Password reset failed!</div> : <></>}\r\n                    {passwordresetSuccess ? <div className='UserDisplay-successText'>Password reset!</div> : <></>}\r\n                    {Error ? <div className='UserDisplay-errorText'>Error see log!</div> : <></>}\r\n                    {nothingFilledError ? <div className='UserDisplay-errorText'>Nothing filled in!</div> : <></>} \r\n                    {success ? <div className='UserDisplay-successText'>Successfully changed!</div> : <></>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default UserDisplay;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\OldWebHomePage.jsx",["197"],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\signals\\signalDisplay.jsx",["198","199","200","201","202","203","204","205"],[],{"ruleId":"206","severity":1,"message":"207","line":3,"column":8,"nodeType":"208","messageId":"209","endLine":3,"endColumn":14},{"ruleId":"206","severity":1,"message":"210","line":4,"column":8,"nodeType":"208","messageId":"209","endLine":4,"endColumn":12},{"ruleId":"206","severity":1,"message":"211","line":6,"column":25,"nodeType":"208","messageId":"209","endLine":6,"endColumn":31},{"ruleId":"206","severity":1,"message":"212","line":12,"column":11,"nodeType":"208","messageId":"209","endLine":12,"endColumn":25},{"ruleId":"206","severity":1,"message":"213","line":5,"column":8,"nodeType":"208","messageId":"209","endLine":5,"endColumn":16},{"ruleId":"206","severity":1,"message":"214","line":6,"column":8,"nodeType":"208","messageId":"209","endLine":6,"endColumn":20},{"ruleId":"206","severity":1,"message":"215","line":8,"column":9,"nodeType":"208","messageId":"209","endLine":8,"endColumn":13},{"ruleId":"216","severity":1,"message":"217","line":56,"column":8,"nodeType":"218","endLine":56,"endColumn":10,"suggestions":"219"},{"ruleId":"206","severity":1,"message":"220","line":2,"column":8,"nodeType":"208","messageId":"209","endLine":2,"endColumn":12},{"ruleId":"206","severity":1,"message":"214","line":4,"column":8,"nodeType":"208","messageId":"209","endLine":4,"endColumn":20},{"ruleId":"206","severity":1,"message":"221","line":16,"column":11,"nodeType":"208","messageId":"209","endLine":16,"endColumn":18},{"ruleId":"216","severity":1,"message":"222","line":56,"column":8,"nodeType":"218","endLine":56,"endColumn":10,"suggestions":"223"},{"ruleId":"216","severity":1,"message":"224","line":84,"column":8,"nodeType":"218","endLine":84,"endColumn":20,"suggestions":"225"},{"ruleId":"216","severity":1,"message":"226","line":113,"column":8,"nodeType":"218","endLine":113,"endColumn":20,"suggestions":"227"},{"ruleId":"216","severity":1,"message":"228","line":140,"column":8,"nodeType":"218","endLine":140,"endColumn":20,"suggestions":"229"},{"ruleId":"206","severity":1,"message":"230","line":1,"column":10,"nodeType":"208","messageId":"209","endLine":1,"endColumn":19},{"ruleId":"206","severity":1,"message":"231","line":2,"column":10,"nodeType":"208","messageId":"209","endLine":2,"endColumn":19},{"ruleId":"206","severity":1,"message":"232","line":5,"column":7,"nodeType":"208","messageId":"209","endLine":5,"endColumn":14},{"ruleId":"206","severity":1,"message":"232","line":3,"column":7,"nodeType":"208","messageId":"209","endLine":3,"endColumn":14},{"ruleId":"233","severity":1,"message":"234","line":153,"column":26,"nodeType":"235","messageId":"236","endLine":153,"endColumn":37},{"ruleId":"233","severity":1,"message":"237","line":180,"column":23,"nodeType":"235","messageId":"236","endLine":180,"endColumn":31},{"ruleId":"233","severity":1,"message":"238","line":209,"column":29,"nodeType":"235","messageId":"236","endLine":209,"endColumn":43},{"ruleId":"233","severity":1,"message":"239","line":236,"column":23,"nodeType":"235","messageId":"236","endLine":236,"endColumn":31},{"ruleId":"206","severity":1,"message":"240","line":6,"column":8,"nodeType":"208","messageId":"209","endLine":6,"endColumn":16},{"ruleId":"206","severity":1,"message":"241","line":11,"column":12,"nodeType":"208","messageId":"209","endLine":11,"endColumn":24},{"ruleId":"206","severity":1,"message":"242","line":14,"column":5,"nodeType":"208","messageId":"209","endLine":14,"endColumn":17},{"ruleId":"206","severity":1,"message":"243","line":26,"column":12,"nodeType":"208","messageId":"209","endLine":26,"endColumn":23},{"ruleId":"206","severity":1,"message":"244","line":26,"column":25,"nodeType":"208","messageId":"209","endLine":26,"endColumn":39},{"ruleId":"206","severity":1,"message":"245","line":27,"column":12,"nodeType":"208","messageId":"209","endLine":27,"endColumn":24},{"ruleId":"206","severity":1,"message":"246","line":27,"column":26,"nodeType":"208","messageId":"209","endLine":27,"endColumn":41},{"ruleId":"247","severity":1,"message":"248","line":41,"column":17,"nodeType":"249","messageId":"250","endLine":111,"endColumn":18},{"ruleId":"247","severity":1,"message":"248","line":43,"column":25,"nodeType":"249","messageId":"250","endLine":58,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":61,"column":25,"nodeType":"249","messageId":"250","endLine":72,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":75,"column":25,"nodeType":"249","messageId":"250","endLine":109,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":83,"column":33,"nodeType":"249","messageId":"250","endLine":107,"endColumn":34},{"ruleId":"247","severity":1,"message":"248","line":114,"column":17,"nodeType":"249","messageId":"250","endLine":146,"endColumn":18},{"ruleId":"247","severity":1,"message":"248","line":116,"column":25,"nodeType":"249","messageId":"250","endLine":124,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":127,"column":25,"nodeType":"249","messageId":"250","endLine":144,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":150,"column":17,"nodeType":"249","messageId":"250","endLine":234,"endColumn":18},{"ruleId":"247","severity":1,"message":"248","line":152,"column":25,"nodeType":"249","messageId":"250","endLine":177,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":158,"column":33,"nodeType":"249","messageId":"250","endLine":175,"endColumn":34},{"ruleId":"247","severity":1,"message":"248","line":180,"column":25,"nodeType":"249","messageId":"250","endLine":232,"endColumn":26},{"ruleId":"247","severity":1,"message":"248","line":189,"column":33,"nodeType":"249","messageId":"250","endLine":230,"endColumn":34},{"ruleId":"247","severity":1,"message":"248","line":205,"column":41,"nodeType":"249","messageId":"250","endLine":228,"endColumn":42},{"ruleId":"216","severity":1,"message":"251","line":241,"column":8,"nodeType":"218","endLine":241,"endColumn":32,"suggestions":"252"},{"ruleId":"206","severity":1,"message":"253","line":2,"column":36,"nodeType":"208","messageId":"209","endLine":2,"endColumn":44},{"ruleId":"206","severity":1,"message":"254","line":6,"column":8,"nodeType":"208","messageId":"209","endLine":6,"endColumn":18},{"ruleId":"206","severity":1,"message":"255","line":10,"column":8,"nodeType":"208","messageId":"209","endLine":10,"endColumn":16},{"ruleId":"206","severity":1,"message":"256","line":11,"column":8,"nodeType":"208","messageId":"209","endLine":11,"endColumn":15},{"ruleId":"206","severity":1,"message":"257","line":12,"column":8,"nodeType":"208","messageId":"209","endLine":12,"endColumn":17},{"ruleId":"206","severity":1,"message":"258","line":13,"column":8,"nodeType":"208","messageId":"209","endLine":13,"endColumn":19},{"ruleId":"206","severity":1,"message":"259","line":14,"column":8,"nodeType":"208","messageId":"209","endLine":14,"endColumn":22},{"ruleId":"206","severity":1,"message":"260","line":15,"column":8,"nodeType":"208","messageId":"209","endLine":15,"endColumn":20},{"ruleId":"206","severity":1,"message":"261","line":16,"column":8,"nodeType":"208","messageId":"209","endLine":16,"endColumn":25},{"ruleId":"206","severity":1,"message":"262","line":17,"column":8,"nodeType":"208","messageId":"209","endLine":17,"endColumn":26},{"ruleId":"206","severity":1,"message":"263","line":18,"column":8,"nodeType":"208","messageId":"209","endLine":18,"endColumn":17},{"ruleId":"206","severity":1,"message":"264","line":19,"column":8,"nodeType":"208","messageId":"209","endLine":19,"endColumn":16},{"ruleId":"206","severity":1,"message":"265","line":20,"column":8,"nodeType":"208","messageId":"209","endLine":20,"endColumn":19},{"ruleId":"206","severity":1,"message":"266","line":21,"column":8,"nodeType":"208","messageId":"209","endLine":21,"endColumn":18},{"ruleId":"206","severity":1,"message":"267","line":22,"column":8,"nodeType":"208","messageId":"209","endLine":22,"endColumn":17},{"ruleId":"206","severity":1,"message":"268","line":23,"column":8,"nodeType":"208","messageId":"209","endLine":23,"endColumn":16},{"ruleId":"206","severity":1,"message":"269","line":24,"column":8,"nodeType":"208","messageId":"209","endLine":24,"endColumn":23},{"ruleId":"206","severity":1,"message":"270","line":25,"column":9,"nodeType":"208","messageId":"209","endLine":25,"endColumn":20},{"ruleId":"206","severity":1,"message":"271","line":13,"column":27,"nodeType":"208","messageId":"209","endLine":13,"endColumn":43},{"ruleId":"272","severity":1,"message":"273","line":28,"column":37,"nodeType":"274","messageId":"236","endLine":28,"endColumn":39},{"ruleId":"272","severity":1,"message":"273","line":30,"column":44,"nodeType":"274","messageId":"236","endLine":30,"endColumn":46},{"ruleId":"272","severity":1,"message":"273","line":58,"column":36,"nodeType":"274","messageId":"236","endLine":58,"endColumn":38},{"ruleId":"272","severity":1,"message":"273","line":60,"column":43,"nodeType":"274","messageId":"236","endLine":60,"endColumn":45},{"ruleId":"206","severity":1,"message":"275","line":90,"column":19,"nodeType":"208","messageId":"209","endLine":90,"endColumn":27},{"ruleId":"276","severity":1,"message":"277","line":129,"column":21,"nodeType":"278","endLine":129,"endColumn":100},{"ruleId":"276","severity":1,"message":"277","line":130,"column":21,"nodeType":"278","endLine":130,"endColumn":93},{"ruleId":"206","severity":1,"message":"230","line":1,"column":10,"nodeType":"208","messageId":"209","endLine":1,"endColumn":19},{"ruleId":"206","severity":1,"message":"214","line":7,"column":8,"nodeType":"208","messageId":"209","endLine":7,"endColumn":20},{"ruleId":"272","severity":1,"message":"279","line":26,"column":41,"nodeType":"274","messageId":"236","endLine":26,"endColumn":43},{"ruleId":"216","severity":1,"message":"280","line":43,"column":8,"nodeType":"218","endLine":43,"endColumn":24,"suggestions":"281"},{"ruleId":"272","severity":1,"message":"279","line":40,"column":36,"nodeType":"274","messageId":"236","endLine":40,"endColumn":38},{"ruleId":"206","severity":1,"message":"275","line":42,"column":27,"nodeType":"208","messageId":"209","endLine":42,"endColumn":35},{"ruleId":"272","severity":1,"message":"279","line":44,"column":33,"nodeType":"274","messageId":"236","endLine":44,"endColumn":35},{"ruleId":"206","severity":1,"message":"275","line":46,"column":27,"nodeType":"208","messageId":"209","endLine":46,"endColumn":35},{"ruleId":"272","severity":1,"message":"279","line":48,"column":39,"nodeType":"274","messageId":"236","endLine":48,"endColumn":41},{"ruleId":"206","severity":1,"message":"275","line":50,"column":27,"nodeType":"208","messageId":"209","endLine":50,"endColumn":35},{"ruleId":"206","severity":1,"message":"275","line":78,"column":19,"nodeType":"208","messageId":"209","endLine":78,"endColumn":27},{"ruleId":"206","severity":1,"message":"260","line":8,"column":8,"nodeType":"208","messageId":"209","endLine":8,"endColumn":20},{"ruleId":"206","severity":1,"message":"282","line":11,"column":12,"nodeType":"208","messageId":"209","endLine":11,"endColumn":25},{"ruleId":"206","severity":1,"message":"283","line":11,"column":27,"nodeType":"208","messageId":"209","endLine":11,"endColumn":43},{"ruleId":"206","severity":1,"message":"284","line":12,"column":12,"nodeType":"208","messageId":"209","endLine":12,"endColumn":18},{"ruleId":"206","severity":1,"message":"285","line":12,"column":20,"nodeType":"208","messageId":"209","endLine":12,"endColumn":29},{"ruleId":"206","severity":1,"message":"286","line":13,"column":12,"nodeType":"208","messageId":"209","endLine":13,"endColumn":16},{"ruleId":"206","severity":1,"message":"287","line":13,"column":18,"nodeType":"208","messageId":"209","endLine":13,"endColumn":25},{"ruleId":"206","severity":1,"message":"288","line":14,"column":12,"nodeType":"208","messageId":"209","endLine":14,"endColumn":21},{"ruleId":"206","severity":1,"message":"289","line":14,"column":23,"nodeType":"208","messageId":"209","endLine":14,"endColumn":35},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Body' is defined but never used.","'Router' is defined but never used.","'toggleDarkMode' is assigned a value but never used.","'infoIcon' is defined but never used.","'Authenticate' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUsername'. Either include it or remove the dependency array.","ArrayExpression",["290"],"'Auth' is defined but never used.","'userApi' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetAccessToken' and 'measurementApi'. Either include them or remove the dependency array.",["291"],"React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetCurrentFlowData'. Either include them or remove the dependency array.",["292"],"React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetQuickViewData'. Either include them or remove the dependency array.",["293"],"React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetBarChartData'. Either include them or remove the dependency array.",["294"],"'useEffect' is defined but never used.","'usePython' is defined but never used.","'baseURL' is assigned a value but never used.","no-dupe-keys","Duplicate key 'enirisEmail'.","ObjectExpression","unexpected","Duplicate key 'deviceid'.","Duplicate key 'enirisPassword'.","Duplicate key 'password'.","'CashIcon' is defined but never used.","'foundDevices' is assigned a value but never used.","'ReferenceDot' is defined but never used.","'legendStyle' is assigned a value but never used.","'setLegendStyle' is assigned a value but never used.","'activeHeader' is assigned a value but never used.","'setActiveHeader' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'BATTERYW' and 'SOLARW'. Either include them or remove the dependency array.",["295"],"'useState' is defined but never used.","'CoverImage' is defined but never used.","'userIcon' is defined but never used.","'WebLogo' is defined but never used.","'globeIcon' is defined but never used.","'batteryIcon' is defined but never used.","'batterydisplay' is defined but never used.","'Coverdisplay' is defined but never used.","'Industrialdisplay' is defined but never used.","'Residentialdisplay' is defined but never used.","'flashIcon' is defined but never used.","'snowIcon' is defined but never used.","'monitorIcon' is defined but never used.","'walletIcon' is defined but never used.","'phoneIcon' is defined but never used.","'mailIcon' is defined but never used.","'controllerImage' is defined but never used.","'useNavigate' is defined but never used.","'setErrorMessages' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'response' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'navigate' and 'userApi'. Either include them or remove the dependency array.",["296"],"'powerSetpoint' is assigned a value but never used.","'setPowerSetpoint' is assigned a value but never used.","'policy' is assigned a value but never used.","'setPolicy' is assigned a value but never used.","'body' is assigned a value but never used.","'setBody' is assigned a value but never used.","'signalSet' is assigned a value but never used.","'setSignalSet' is assigned a value but never used.",{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [getUsername]",{"range":"311","text":"312"},"Update the dependencies array to be: [GetAccessToken, measurementApi]",{"range":"313","text":"314"},"Update the dependencies array to be: [GetAccessToken, GetCurrentFlowData, NodeIdList]",{"range":"315","text":"316"},"Update the dependencies array to be: [GetAccessToken, GetQuickViewData, NodeIdList]",{"range":"317","text":"318"},"Update the dependencies array to be: [GetAccessToken, GetBarChartData, NodeIdList]",{"range":"319","text":"320"},"Update the dependencies array to be: [BATTERYP, BATTERYW, GRIDW, HOMEW, SOLARW]",{"range":"321","text":"322"},"Update the dependencies array to be: [navigate, reloadUserList, userApi]",{"range":"323","text":"324"},[1674,1676],"[getUsername]",[1871,1873],"[GetAccessToken, measurementApi]",[2615,2627],"[GetAccessToken, GetCurrentFlowData, NodeIdList]",[3387,3399],"[GetAccessToken, GetQuickViewData, NodeIdList]",[4138,4150],"[GetAccessToken, GetBarChartData, NodeIdList]",[11291,11315],"[BATTERYP, BATTERYW, GRIDW, HOMEW, SOLARW]",[1251,1267],"[navigate, reloadUserList, userApi]"]