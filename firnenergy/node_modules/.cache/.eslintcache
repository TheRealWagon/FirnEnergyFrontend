[{"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\index.js":"1","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\App.js":"2","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\reportWebVitals.js":"3","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Navbar\\navbar.jsx":"4","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\bodyContainer.jsx":"5","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\pages\\pages.jsx":"6","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\authenticate.js":"7","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\measurements.js":"8","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\user.js":"9","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\QuickViewDetails\\QuickView.jsx":"10","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\auth\\auth.jsx":"11","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\charts\\charts.jsx":"12","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\currentFlow\\currentFlow.jsx":"13","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\WebHomePage.jsx":"14","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Authentication\\login.jsx":"15","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\adminPage.jsx":"16","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\usersList.jsx":"17","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\userDisplay.jsx":"18"},{"size":648,"mtime":1694519247934,"results":"19","hashOfConfig":"20"},{"size":868,"mtime":1694519246503,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1694519248028,"results":"22","hashOfConfig":"20"},{"size":3592,"mtime":1694519247572,"results":"23","hashOfConfig":"20"},{"size":8489,"mtime":1694519247729,"results":"24","hashOfConfig":"20"},{"size":1242,"mtime":1694519247855,"results":"25","hashOfConfig":"20"},{"size":3530,"mtime":1694519247456,"results":"26","hashOfConfig":"20"},{"size":27689,"mtime":1694519247473,"results":"27","hashOfConfig":"20"},{"size":7927,"mtime":1694590145064,"results":"28","hashOfConfig":"20"},{"size":4858,"mtime":1694519247619,"results":"29","hashOfConfig":"20"},{"size":1934,"mtime":1694519247698,"results":"30","hashOfConfig":"20"},{"size":17011,"mtime":1694519247761,"results":"31","hashOfConfig":"20"},{"size":33925,"mtime":1694519247793,"results":"32","hashOfConfig":"20"},{"size":9435,"mtime":1694519247526,"results":"33","hashOfConfig":"20"},{"size":10128,"mtime":1694613273850,"results":"34","hashOfConfig":"20"},{"size":197,"mtime":1694519247635,"results":"35","hashOfConfig":"20"},{"size":2519,"mtime":1694519247698,"results":"36","hashOfConfig":"20"},{"size":8247,"mtime":1694519247651,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1da4y6f",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"41"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"41"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"41"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"41"},"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\index.js",[],[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\App.js",["105","106","107","108"],[],"import { useState } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/navbar'\r\nimport Body from './components/body/bodyContainer'\r\nimport { LoginPage, HomePage, WebsiteHomePage, WebAdminPage } from './components/pages/pages'\r\nimport { Routes, Route, Router} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n    const [darkMode, setDarkmode] = useState(false);\r\n\r\n    const toggleDarkMode = () => {\r\n        setDarkmode(!darkMode);\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route index element={<WebsiteHomePage></WebsiteHomePage>}></Route>\r\n        <Route path=\"LoginPage\" element={<LoginPage></LoginPage>}></Route>\r\n        <Route path='HomePage' element={<HomePage></HomePage>}></Route>\r\n        <Route path='AdminPage' element={<WebAdminPage></WebAdminPage>}></Route>\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\reportWebVitals.js",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Navbar\\navbar.jsx",["109","110","111","112"],[],"import './navbar.css'\r\nimport Logo from '../../Images/firnenergyLogo.png'\r\nimport globeIcon from '../../Images/globe_icon.png'\r\nimport userIcon from '../../Images/user_icon.png'\r\nimport infoIcon from \"../../Images/info_icon.png\"\r\nimport Authenticate from \"../../api/authenticate\"\r\nimport { useEffect, useState } from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport User from '../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport userIconBlack from '../../Images/6522516.png';\r\n\r\nconst Navbar = ({ darkMode, toggleDarkMode }) => {\r\n    const [logout, setLogout] = useState(false);\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('');\r\n\r\n    // useEffect(async () => {\r\n        \r\n    //     // const user = await userApi.GetUsername();\r\n    //     // console.log(user)\r\n    //     // setUsername(user.data)\r\n    // }, []);\r\n\r\n    const token = localStorage.getItem('jwtToken');\r\n\r\n    const getUsername = async() => {\r\n        try {\r\n            const user = await userApi.GetUsername(token);\r\n            setUsername(user.data.user.name.split('@')[0]);\r\n        } catch (error) {\r\n            //token expired or invalid navigate to Login\r\n            localStorage.removeItem('jwtToken');\r\n            navigate('/');\r\n        }\r\n    }\r\n   \r\n    const handleLogout = () => {\r\n        setLogout(true);\r\n    }\r\n\r\n    const handleBacklogout = () => {\r\n        setLogout(false);\r\n    }\r\n\r\n    const handleDefLogout = () => {\r\n        setLogout(false);\r\n        localStorage.removeItem('jwtToken');\r\n        navigate('/');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getUsername();\r\n    }, []);\r\n    \r\n    \r\n    return (\r\n        <>\r\n            {logout && (<div className='Logout-Background'><div className='logout-Container'><div className='logout-Label'><div>Do you wish to logout?</div><div className='logout-Label-username'><div><img width={40} src={userIconBlack} alt=\"\" /></div><div>{username}</div></div></div><div className='logout-button-Container'><button className='logout-button' onClick={handleDefLogout}>Logout</button><button className='logout-button' onClick={handleBacklogout}>Back</button></div></div></div>) }\r\n            <div className='NavbarContainer'>\r\n                <div className='LogoContainer'>\r\n                    <div className='Logo'>\r\n                        <img src={Logo} alt='logo_icon' />\r\n                    </div>\r\n                </div>\r\n                <div className='PageContainer'>\r\n                    <div className='Page selected'>Home</div>\r\n                    <div className='Page'>About us</div>\r\n                    <div className='Page'>Feature</div>\r\n                    <div className='Page'>Contact</div>\r\n                </div>\r\n                <div className='InfoContainer'>\r\n                    <div><img src={globeIcon} alt=\"globe_Icon\" />english</div>\r\n                    <div className='NavbarAccount'><button className='AccountLink' onClick={handleLogout}><img style={{paddingRight: \"10px\"}} src={userIcon} alt=\"\" />{username}</button></div>\r\n                    <div className='PageDivider'></div>\r\n                    {/* <div className='Navbar_Info'><img src={infoIcon} alt=\"\" /></div> */}\r\n                    {/* <div><input type='checkbox' checked={darkMode} onChange={toggleDarkMode}/><span className='slider round'></span></div> */}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {/* <button onClick={Login}>Login</button> */}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\bodyContainer.jsx",["113","114","115","116","117","118"],[],"import './bodyContainer.css'\r\nimport Auth from './auth/auth'\r\nimport CurrentFlow from './currentFlow/currentFlow'\r\nimport Authenticate from \"../../api/authenticate\"\r\nimport Measurement from '../../api/measurements'\r\nimport { useEffect, useState } from 'react'\r\nimport Charts from './charts/charts'\r\nimport loaderGIF from '../../Images/firn-embleem-animation.gif'\r\nimport QuickView from './QuickViewDetails/QuickView';\r\nimport User from '../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Body = ({darkMode}) => {\r\n    //API's\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    const measurementApi = Measurement();\r\n\r\n    //variable state's\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //Data\r\n    // const [currentFlowData, setCurrentFlowData] = useState([]);\r\n    // const [quickViewData, setQuickViewData] = useState();\r\n    const [barChartData, setBarChartData] = useState();\r\n    \r\n\r\n    //CurrentflowDataStates\r\n    const [SolarW, setSolarW] = useState('');\r\n    const [BatteryW, setBatteryW] = useState('');\r\n    const [GridW, setGridW] = useState('');\r\n    const [HomeW, setHomeW] = useState('');\r\n    const [BatteryP, setBatteryP] = useState(0);\r\n\r\n    //QuickViewData\r\n    const [YieldToday, setYieldToday] = useState('');\r\n    const [ConsumptionToday, setConsumptionToday] = useState('');\r\n    const [RevenueToday, setRevenueToday] = useState('');\r\n    const [foundFlowData, setfoundFlowData] = useState(false);\r\n\r\n    // CurrentFlowData\r\n    useEffect(() => {\r\n        const temp = () => {\r\n            const date = new Date();\r\n\r\n            console.log(\"CurrentFlowData\")\r\n\r\n            const GetCurrentFlowDataTemp = async() => {\r\n                setLoading(true)\r\n\r\n                const AccessToken = await GetAccessToken();\r\n                await GetCurrentFlowData(AccessToken, date);\r\n\r\n                setLoading(false)\r\n            }\r\n            GetCurrentFlowDataTemp();\r\n        }\r\n        temp();\r\n\r\n        const intervalId = setInterval(temp, 60 * 1000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [])\r\n\r\n    //QuickViewData\r\n    useEffect(() => {\r\n        const temp = () => {\r\n            const date = new Date();\r\n\r\n            console.log(\"QuickViewData\")\r\n\r\n            const GetQuickViewDataTemp = async() => {\r\n                setLoading(true)\r\n\r\n                const AccessToken = await GetAccessToken();\r\n                await GetQuickViewData(AccessToken, date);\r\n\r\n                setLoading(false)\r\n            }\r\n            GetQuickViewDataTemp();\r\n        }\r\n        temp();\r\n\r\n        const QuickintervalId = setInterval(temp, 15 * 60 * 1000);\r\n\r\n        return () => clearInterval(QuickintervalId);\r\n    }, [])\r\n\r\n    //BarChartData\r\n    useEffect(() => {\r\n        const temp = () => {\r\n            const date = new Date();\r\n\r\n            console.log(\"BarChartData\")\r\n\r\n            const GetBarChartDataTemp = async() => {\r\n                setLoading(true)\r\n\r\n                const AccessToken = await GetAccessToken();\r\n                await GetBarChartData(AccessToken, date);\r\n\r\n                setLoading(false)\r\n            }\r\n            GetBarChartDataTemp();\r\n        }\r\n        temp();\r\n\r\n        const BARintervalId = setInterval(temp, 15 * 60 * 1000);\r\n\r\n        return () => clearInterval(BARintervalId);\r\n    }, []);\r\n\r\n    //Gets the access token from the back-end\r\n    const GetAccessToken = async () => {\r\n        const JwtToken = localStorage.getItem('jwtToken');\r\n        try {\r\n            const AccessToken = await userApi.GetAccessToken(JwtToken);\r\n            return AccessToken.data;\r\n        } catch (error) {\r\n            console.log(error)\r\n            localStorage.removeItem('jwtToken');\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    const GetCurrentFlowData = async (AccessToken, date) => {\r\n\r\n        const Data = await measurementApi.FlowData(AccessToken, date);\r\n        setGridW(Math.round(Data[0]['series'][0]['values'][0][1]));\r\n        setHomeW(Math.round(Data[0]['series'][0]['values'][0][2]));\r\n        setSolarW(Math.round(Data[0]['series'][0]['values'][0][3]));\r\n        setBatteryW(Math.round(Data[0]['series'][0]['values'][0][4]));\r\n\r\n        const dataBattery = await measurementApi.BatteryPercentage(AccessToken, date);\r\n        setBatteryP(dataBattery[0]['series'][0]['values'][0][1]);\r\n    }\r\n\r\n    const GetQuickViewData = async (AccessToken, date) => {\r\n        const FoundFlowData = false\r\n\r\n        const QuickViewEarnings = await measurementApi.BarChartRevenueData(AccessToken, date);\r\n        let total = 0\r\n        for (let index = 0; index < Object.keys(QuickViewEarnings).length; index++) {\r\n            const element = parseFloat(QuickViewEarnings[index]['Fed to grid']) + parseFloat(QuickViewEarnings[index]['FirnController Profit']);\r\n            total = total + parseFloat(element);\r\n        }\r\n        total = total.toFixed(2);\r\n        setRevenueToday(total)\r\n        const QuickViewdata = await measurementApi.QuickViewData(AccessToken, date);\r\n        setYieldToday((QuickViewdata[0]['series'][0]['values'][0][1] / 1000).toFixed(2));\r\n        setConsumptionToday((QuickViewdata[0]['series'][0]['values'][0][2] / 1000).toFixed(2));\r\n\r\n        setfoundFlowData(true);\r\n    }           \r\n\r\n    const GetBarChartData = async (AccessToken, date) => {\r\n\r\n        const result = await measurementApi.BarChartData(AccessToken, date)\r\n        setBarChartData(result);\r\n        \r\n    }\r\n\r\n    const requestBarChartData = async (dataToRequest) => {\r\n\r\n        const date = new Date();\r\n\r\n        if (dataToRequest === \"BarChartConsumptionData\") {\r\n            const AccessToken = await GetAccessToken();\r\n            // let result = 1;\r\n            // switch (timePeriod) {\r\n                \r\n\r\n            //     case \"day\":\r\n                    \r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n\r\n            //     case \"month\":\r\n\r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n                \r\n            //     case \"year\":\r\n\r\n            //         result = await measurementApi.BarChartData(AccessToken, date);\r\n\r\n            //         break;\r\n                \r\n            //     default:\r\n            //         break;\r\n            // }\r\n\r\n\r\n            const result = await measurementApi.BarChartData(AccessToken, date);\r\n            setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartBatteryData\") {\r\n            const AccessToken = await GetAccessToken();\r\n            const result = await measurementApi.BatteryPercentageRange(AccessToken, date);\r\n            setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartRevenueData\") {\r\n            const AccessToken = await GetAccessToken();\r\n            const result = await measurementApi.BarChartRevenueData(AccessToken, date);\r\n            setBarChartData(result);\r\n        }\r\n    }\r\n\r\n    const ToggleLoading = (bool) => {\r\n        setLoading(bool)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`Body-Container ${darkMode ? 'Body-Container-Dark' : 'Body-Container-Light'}`}>\r\n                {/* {logout && (<div className='Logout-Background'><div className='logout-Container'><div className='logout-Label'>Do you wish to logout?</div><div className='logout-button-Container'><button className='logout-button'>logout</button><button className='logout-button'>back</button></div></div></div>) } */}\r\n                {loading ? (<div className='overlay block-interactions'><div className=\"loading-container\"><img className='loading-gif' src={loaderGIF} alt=\"\" /></div></div>) : <></> }\r\n                <div className='Body-First-Row'>\r\n                    <div><CurrentFlow darkMode={darkMode} SOLARW={SolarW} GRIDW={GridW} BATTERYW={BatteryW} HOMEW={HomeW} BATTERYP={BatteryP}></CurrentFlow></div>\r\n                    <div><QuickView foundFlowData={foundFlowData} YieldToday={YieldToday} BatteryP={BatteryP} ConsumptionToday={ConsumptionToday} RevenueToday={RevenueToday}/></div>\r\n                </div>\r\n                <div className='Body-Second-row'>\r\n                    <div className='Charts-Container'><Charts Data={barChartData} darkMode={darkMode} requestBarChartData={requestBarChartData} ToggleLoading={ToggleLoading}></Charts></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Body;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\pages\\pages.jsx",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\authenticate.js",["119","120","121"],[],"import { useEffect } from 'react';\r\nimport { usePython } from 'react-py'\r\nimport axios from 'axios';\r\n\r\nconst baseURL = \"https://authentication.eniris.be/\";\r\n\r\nconst Authenticate = () => {\r\n\r\n    const login = async (username, password) => {    \r\n        console.log(\"Login Attempt\")\r\n        let data = JSON.stringify({\r\n            \"username\": username,\r\n            \"password\": password\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/login',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const logout = async (token) => {    \r\n        console.log(\"Logout Attempt\")\r\n        let data = '';\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/logout',\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            // throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const Accesstoken = async (token) => {    \r\n        console.log(\"AccessToken Retrieve\")\r\n        let data = '';\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: 'https://authentication.eniris.be/auth/accesstoken',\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios(config);\r\n            return response.data; // Return the data after successful response\r\n          } catch (error) {\r\n            console.log(error);\r\n            // throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n          }\r\n\r\n    }\r\n\r\n    const Devices = async (accessToken) => {    \r\n        console.log(\"Devices Retrieve\")\r\n        let data = JSON.stringify([\r\n            {\r\n              \r\n            }\r\n          ]);\r\n          \r\n          const corsProxy = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n          let config = {\r\n            method: 'get',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://api.eniris.be/v1/device?id=137206',\r\n            headers: { \r\n              'Content-Type': 'application/json', \r\n              'Authorization': `Bearer ${accessToken}`,\r\n            },\r\n            data : data\r\n          };\r\n          \r\n          try {\r\n            const response = await axios.get(corsProxy + config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        login,\r\n        logout,\r\n        Accesstoken,\r\n        Devices,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Authenticate;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\measurements.js",["122"],[],"import axios from 'axios';\r\n\r\nconst baseURL = \"https://authentication.eniris.be/\";\r\n\r\nconst Measurement = () => {\r\n\r\n    //currentFlowData\r\n    const FlowData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T00:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"actualPowerTot_W\",\r\n                    \"childrenConsumedPower_W\",\r\n                    \"childrenProducedPower_W\",\r\n                    \"childrenStoragePower_W\"\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    //QuickView Yield & Consumption\r\n    const QuickViewData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"operator\": \"sum\",\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\", //yield today\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\" //Consumption today\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n        //importedEnergyDeltaTot_Wh\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChart data Import / Production / Consumption / Self-Consumption\r\n    const BarChartData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\",    //Solar Production\r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\",    //Consumption\r\n                    \"sum_autoconsumedEnergyDeltaTot_Wh\"         //Consumed from Solar Production\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const temp = response['data'][0]['series'][0]['values'];\r\n            let ProductionArray = []\r\n            let ConsumptionArray = []\r\n            let ConsumedFromPvArray = []\r\n            let ImportFromGrid = []\r\n            const result = []\r\n            for (let index = 0; index < Object.keys(temp).length; index++) {\r\n                const element = temp[index];\r\n                ProductionArray[index] = [element[0], element[1]];\r\n                ImportFromGrid[index] = [element[0], element[2]];\r\n                ConsumptionArray[index] = [element[0], element[3]];\r\n                ConsumedFromPvArray[index] = [element[0], element[4]];\r\n            }\r\n            ProductionArray = Sum_Per_Hour(ProductionArray)\r\n            ImportFromGrid = Sum_Per_Hour(ImportFromGrid)\r\n            ConsumptionArray = Sum_Per_Hour(ConsumptionArray)\r\n            ConsumedFromPvArray = Sum_Per_Hour(ConsumedFromPvArray)\r\n            for (let index = 0; index < Object.keys(ProductionArray).length; index++) {\r\n                result[index] = { \"Name\": `${index}:00:00`, \"Solar production\": (ProductionArray[index] / 1000).toFixed(2), \"Import from grid\": (ImportFromGrid[index] / 1000).toFixed(2), \"Consumption\": (ConsumptionArray[index] / 1000).toFixed(2), \"Consumed from PV\": (ConsumedFromPvArray[index] / 1000).toFixed(2) }\r\n            }\r\n            return result; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //QuickView Earnings per uur\r\n    const QuickViewDataRevenue = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_exportedEnergyDeltaTot_Wh\" //Teruglevering net\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   console.log(response['data'][0]['series'][0]['values'])\r\n            const result = Sum_Per_Hour(response['data'][0]['series'][0]['values']);\r\n            const PriceData = await QuickViewDataPrice(accessToken, date);\r\n            let Revenue = [];\r\n            // let Revenue = 0;\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                const multiplication = (result[index] / 1000) * PriceData[index][1];\r\n                Revenue[index] = multiplication;\r\n            }\r\n            return Revenue;\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    \r\n    const getBuyPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n    //QuickView Earnings Hourly price\r\n    const QuickViewDataPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sellPrice_perkWh\" //verkoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChartRevenue\r\n    const BarChartRevenueData = async (accessToken, date) => {\r\n        \r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            \r\n            const BuyPricePerHourContainer = await axios.post(corsProxy + config.url, data, config);\r\n            const BuyPricePerHour = BuyPricePerHourContainer['data'][0]['series'][0]['values'];\r\n            const variablePricePerHour = 0.26\r\n            const EarningsPerHour = await QuickViewDataRevenue(accessToken, date);\r\n            const ImportAndConsumptionContainer = await getImportAndConsumption(accessToken, date);\r\n            const ImportAndConsumption = ImportAndConsumptionContainer['data'][0]['series'][0]['values'];\r\n\r\n            let ImportPerHour = [];\r\n            let ConsumptionPerHour = [];\r\n\r\n            for (let index = 0; index < Object.keys(ImportAndConsumption).length; index++) {\r\n                const element = ImportAndConsumption[index];\r\n                ImportPerHour[index] = [element[0], element[1] / 1000];\r\n                ConsumptionPerHour[index] = [element[0], element[2] / 1000];\r\n            }\r\n\r\n            ImportPerHour = Sum_Per_Hour(ImportPerHour);\r\n            ConsumptionPerHour = Sum_Per_Hour(ConsumptionPerHour);\r\n\r\n            const RevenuePerHour = []\r\n\r\n            for (let index = 0; index < Object.keys(ConsumptionPerHour).length; index++) {\r\n                RevenuePerHour[index] = {\"Name\": `${index}:00:00`, \"Fed to grid\": (EarningsPerHour[index]).toFixed(2), \"FirnController Profit\": ((ConsumptionPerHour[index] * variablePricePerHour) - (ImportPerHour[index] * BuyPricePerHour[index][1])).toFixed(2)};\r\n            }\r\n\r\n            return RevenuePerHour;\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n\r\n    //Battery Percentage\r\n    const BatteryPercentage = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T01:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const BatteryPercentageRange = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const result = response.data[0]['series'][0]['values']\r\n            const endArray = []\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                if (result[index][1] >= 0.2) {\r\n                    result[index][1] = Math.floor(result[index][1] * 100)\r\n                } else {\r\n                    result[index][1] = 20\r\n                }\r\n                let time = result[index][0].split('T')[1]\r\n                time = time.split('.')[0];\r\n                let hour = time.split(':')[0]\r\n                hour = parseInt(hour)\r\n                if (hour >= 22) {\r\n                    hour = hour - 22\r\n                } else {\r\n                    hour = hour + 2\r\n                }\r\n                time = `${hour}:${time.split(':')[1]}:${time.split(':')[2]}`\r\n                endArray[index] = { \"Name\": `${time}`, \"Battery percentage\": result[index][1] };\r\n            }\r\n            return endArray; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    // Function to sum up all data into 1 hour segments\r\n    const Sum_Per_Hour = (data) => {\r\n\r\n        let checkNumber = 22;\r\n        let sum = 0;\r\n        let result = [];\r\n        let plan = 0\r\n        for (let index = 0; index < Object.keys(data).length; index++) {\r\n            const element = data[index];\r\n            const time = element[0].split('T')[1]\r\n\r\n            const timecheck = parseInt(time.split(':')[0]);\r\n            if (checkNumber === 24) {\r\n                checkNumber = 0;\r\n            }\r\n            if (timecheck === checkNumber) {\r\n                sum = sum + element[1];\r\n            } else {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                plan++;\r\n                index--;\r\n                sum = 0;\r\n            }\r\n            if (index + 1 === Object.keys(data).length) {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                sum = 0;\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    const getImportAndConsumption = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [   \r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\"    //Consumption\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    return {\r\n        FlowData,\r\n        BatteryPercentage,\r\n        QuickViewDataRevenue,\r\n        QuickViewData,\r\n        BarChartData,\r\n        BatteryPercentageRange,\r\n        getBuyPrice,\r\n        getImportAndConsumption,\r\n        BarChartRevenueData,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Measurement;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\api\\user.js",["123","124","125","126","127"],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\QuickViewDetails\\QuickView.jsx",["128"],[],"import './QuickView.css'\r\nimport SunIcon from '../../../Images/sun.png'\r\nimport BatteryIcon from '../../../Images/battery.png'\r\nimport BoltIcon from '../../../Images/bolt.png'\r\nimport CoinIcon from '../../../Images/coin.png'\r\nimport CashIcon from '../../../Images/cash.png'\r\nimport GearIcon from '../../../Images/gear.png'\r\nimport ArrowIcon from '../../../Images/icons8-arrow-100.png';\r\nimport PcIcon from '../../../Images/computer-dynamic-color.png';\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst QuickView = ({foundFlowData, YieldToday, BatteryP, ConsumptionToday, RevenueToday}) => {\r\n    const [battCharge, setBattCharge] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (BatteryP >= 0.2) {\r\n            const battpercentage = Math.floor(BatteryP * 100)\r\n            setBattCharge(battpercentage)\r\n        } else {\r\n            setBattCharge(20)\r\n        }\r\n    }, [BatteryP])\r\n\r\n    return (\r\n\r\n        <div className='QuickViewDetails'>\r\n            <div className='QuickViewDetails-Left-Side'>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={SunIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>Yield today</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{YieldToday} kWh</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' src={BatteryIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>Battery charge</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{battCharge} %</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={BoltIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title' style={{fontSize: '90%'}}>Consumption today</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{ConsumptionToday} kWh</span>\r\n                </div>\r\n            </div>\r\n            <div className='QuickViewDetails-Right-Side'>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={CoinIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>\r\n                        <span>Earnings today</span> \r\n                        <span className='QuickViewDetails-Item-Under-Titel'>Energy back to grid</span>\r\n                    </span>\r\n                    <span className='QuickViewDetails-Item-Value'>€ {RevenueToday}</span>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <a className='QuickViewDetails-Link' href=\"https://insights.eniris.be/#/login\">\r\n                        <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={PcIcon} alt=\"\" /></div>\r\n                        <span className='QuickViewDetails-Item-Title'>\r\n                            <span>Advanced view</span>\r\n                            <span className='QuickViewDetails-Item-Under-Titel'>Our partner Eniris</span>\r\n                        </span>\r\n                        <span className='QuickViewDetails-Item-Value'><img width={35} src={ArrowIcon} alt=\"\" /></span>\r\n                    </a>\r\n                </div>\r\n                <div className='QuickViewDetails-Item'>\r\n                    <div className='QuickViewDetails-Item-Image-container'><img className='QuickViewDetails-Item-Image' width=\"17%\" height=\"auto\" src={GearIcon} alt=\"\" /></div>\r\n                    <span className='QuickViewDetails-Item-Title'>{foundFlowData ? <div>Status <span className='Title_Online'>Online</span></div> : <div>Status <span className='Title_Offline'>Offline</span></div>}</span>\r\n                    <span className='QuickViewDetails-Item-Value'>{foundFlowData ? <div className='Status_Online'></div> : <div className='Status_Offline'></div>}</span>\r\n                </div>\r\n                {/* <div className='QuickViewDetails-Item'>\r\n                    <img className='test-quick-image' width=\"17%\" height=\"auto\" src={GearIcon} alt=\"\" />\r\n                    <span className='test-quick-title'></span>\r\n                    <span className='test-quick-val'></span>\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default QuickView;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\auth\\auth.jsx",["129"],[],"import Authenticate from \"../../../api/authenticate\"\r\nimport { useState } from 'react'\r\n\r\nconst Auth = () => {\r\n    const [token, setToken] = useState('');\r\n    const [accessToken, setAccessToken] = useState('');\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isAccessed, setIsAccessed] = useState(false);\r\n    const [response, setResponse] = useState('');\r\n    const [devices, setDevices] = useState('');\r\n    const [foundDevices, setFoundDevices] = useState(false);\r\n\r\n    const authApi = Authenticate();\r\n\r\n    const HandleLoginEvent = async () => {\r\n\r\n        setToken(await authApi.login(\"frank@avalasia.com\", \"8695e05d865d6196\"));\r\n        setIsLoggedIn(true);\r\n    }\r\n\r\n    const HandleLogoutEvent = async () => {\r\n\r\n        setResponse(await authApi.logout(token));\r\n        if (response === \"\") {\r\n            setIsLoggedIn(false);\r\n            setIsAccessed(false);\r\n            setAccessToken('');\r\n            setToken('');\r\n        }\r\n    }\r\n\r\n    const HandleAccessToken = async () => {\r\n\r\n        setAccessToken(await authApi.Accesstoken(token));\r\n        setIsAccessed(true);\r\n    }\r\n\r\n    const handleGetDevices = async () => {\r\n\r\n        setDevices(await authApi.Devices(accessToken));\r\n        setFoundDevices(true);\r\n        console.log(devices)\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <button onClick={HandleLoginEvent}>Login</button>\r\n            {isLoggedIn ? <div>You are logged in</div> : <div>You are logged off</div>}\r\n            {isLoggedIn ? <button onClick={HandleAccessToken}>AccessToken</button> : <></>}\r\n            {isAccessed ? <div>You are accessed</div> : <div></div>}\r\n            <button onClick={HandleLogoutEvent}>logout</button>\r\n            <br />\r\n            <button className='Devices' onClick={handleGetDevices}>Devices</button>\r\n            {/* {foundDevices ? <div>{devices}</div> : <></>} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\charts\\charts.jsx",["130","131","132","133","134"],[],"import React, { useEffect, useState } from \"react\";\r\nimport './charts.css'\r\nimport {\r\n    ResponsiveContainer,\r\n    AreaChart,\r\n    BarChart,\r\n    Legend,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    Area,\r\n    Tooltip,\r\n    CartesianGrid,\r\n    ReferenceDot,\r\n} from \"recharts\";\r\nimport './charts.css';\r\n\r\nconst Charts = ({Data, darkMode, requestBarChartData, ToggleLoading}) => {\r\n    const [data, setData] = useState();\r\n    const [showSolarProd, setShowSolarProd] = useState(true);\r\n    const [showConsumption, setShowConsumption] = useState(true);\r\n    const [showImportFromGrid, setShowImportFromGrid] = useState(true);\r\n    const [showConsumedFromPv, setShowConsumedFromPv] = useState(true);\r\n    const [axisColors, setAxisColors] = useState(\"black\");\r\n    const [toolTipStyle, setToolTipStyle] = useState(\"black\");\r\n    const [legendStyle, setLegendStyle] = useState();\r\n    const [activeHeader, setActiveHeader] = useState(\"ConsumptionProduction\");\r\n    const [ConsumptionProductionHeaderStyle, setConsumptionProductionHeaderStyle] = useState(true);\r\n    const [BatteryStyle, setBatteryStyle] = useState(false);\r\n    const [RevenueStyle, setRevenueStyle] = useState(false);\r\n    const [dayStyle, setDayStyle] = useState(true);\r\n    const [monthStyle, setMonthStyle] = useState(false);\r\n    const [yearStyle, setYearStyle] = useState(false);\r\n    const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\r\n    const [actualDate, setActualDate] = useState(new Date());\r\n    const [allowRightArrow, setAllowRightArrow] = useState(false);\r\n    const arr = {\"SolarProd\": setShowSolarProd, \"Consumed\": setShowConsumption, \"Import\": setShowImportFromGrid, \"FromPv\": setShowConsumedFromPv}\r\n\r\n    //Updates the data if changed\r\n    useEffect(() => {\r\n\r\n        setData(Data)\r\n\r\n    }, [Data])\r\n    \r\n    //hides the bar by clicking on the legend\r\n    const ShowOrHideData = (val) => {\r\n        const methode = arr[val['payload'].id]\r\n        methode(val.inactive);\r\n    }\r\n\r\n    //checks for darkmode\r\n    useEffect(() => {\r\n\r\n        darkMode ? setAxisColors(\"white\") : setAxisColors(\"black\");\r\n        darkMode ? setToolTipStyle({borderRadius: \"25px\", color: \"white\", backgroundColor: \"#181A18\", border: \"solid white 1px\"}) : setToolTipStyle({borderRadius: \"25px\"});\r\n\r\n        // darkMode ? setLegendStyle({color: \"white\"}) : setLegendStyle({color: \"black\"});\r\n\r\n    }, [darkMode]);\r\n\r\n    //checks for darkmode and applies styles\r\n    const LegendStyle = (entry) => {\r\n\r\n        if (entry.inactive) {   \r\n            if (darkMode) {\r\n                return({color: \"white\", opacity: \"0.5\"})\r\n            } else {\r\n                return({color: \"black\", opacity: \"0.5\"})\r\n            }\r\n        } else {\r\n            if (darkMode) {\r\n                return( {color: \"white\"});\r\n            } else {\r\n                return( {color: \"black\"});\r\n            }\r\n        }\r\n        \r\n    }   \r\n\r\n    //this is the tooltip constructor\r\n    const CustomConsumptionToolTip = ({ active, payload, label}) => {\r\n\r\n        const colors = {\"SolarProd\": [\"#ff8057\", \"#ffd17f\"], \"Consumed\": [\"#c069e4\", \"#6c32fb\"], \"Import\": [\"#f46286\", \"#ec2871\"], \"FromPv\": [\"#06d3ba\", \"#189cd8\"], \"BatteryPercent\": [\"#8ad7b2\", \"#22df83\"], \"FedToGrid\": [\"#06d3ba\", \"#189cd8\"], \"FirnControllerProfit\": [\"#020024\", \"#090979\"]}\r\n        const parentStyle = darkMode? {borderRadius: \"25px\", color: \"white\", backgroundColor: \"#181A18\", border: \"solid white 2px\", padding: \"5px 10px 15px 15px\"} : {background: \"white\", borderRadius: \"25px\", padding: \"5px 10px 15px 15px\", border: \"black solid 2px\"}\r\n        if (active && payload && payload.length) {\r\n            return (\r\n                <div style={parentStyle}>\r\n                    <p>{label}</p>\r\n                    {payload.map((item) => <div style={{padding: \"3px 0px\",display: \"flex\", flexFlow: \"row nowrap\", alignItems: \"center\"}}><div style={{width: \"15px\", height: \"15px\", marginLeft: \"-5px\", marginRight: \"5px\", borderRadius: \"50%\", background: `linear-gradient(0deg, ${colors[item.id][0]}, ${colors[item.id][1]})`}}></div><div style={{width: '165px'}}>{item.dataKey}:</div><div>{item.value}</div><div>{item.unit}</div></div>)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        if (dayStyle) {\r\n            setDate(new Date().toISOString().split('T')[0]);\r\n            setActualDate(new Date());\r\n        } else if (monthStyle) {\r\n            const newDate = (new Date().toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${newDate[0]}-${newDate[1]}`);\r\n            setActualDate(new Date());\r\n        } else {\r\n            const newDate = (new Date().toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${newDate[0]}`);\r\n            setActualDate(new Date());\r\n        }\r\n\r\n    }, [dayStyle, monthStyle, yearStyle])\r\n\r\n\r\n    //see which header is active and activate the correct graph and request correct data\r\n    const ConsumptionProductionClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(true)\r\n        setBatteryStyle(false)\r\n        setRevenueStyle(false)\r\n\r\n        //request consumptiondata\r\n        await requestBarChartData(\"BarChartConsumptionData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const BatteryClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(false)\r\n        setBatteryStyle(true)\r\n        setRevenueStyle(false)\r\n        \r\n        //request battery data\r\n        await requestBarChartData(\"BarChartBatteryData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const RevenueClick = async () => {\r\n        ToggleLoading(true)\r\n        setConsumptionProductionHeaderStyle(false)\r\n        setBatteryStyle(false)\r\n        setRevenueStyle(true)\r\n\r\n        //request revenue data\r\n        await requestBarChartData(\"BarChartRevenueData\");\r\n        ToggleLoading(false)\r\n    }\r\n    const DayClick = async() => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(true)\r\n        setMonthStyle(false)\r\n        setYearStyle(false)\r\n\r\n        //request data for day actualdate\r\n\r\n        if (ConsumptionProductionHeaderStyle) {\r\n            await requestBarChartData(\"BarChartConsumptionData\");\r\n        } else if (BatteryStyle) {\r\n            await requestBarChartData(\"BarChartBatteryData\");\r\n        } else {\r\n            await requestBarChartData(\"BarChartRevenueData\");\r\n        }\r\n\r\n        \r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const MonthClick = () => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(false)\r\n        setMonthStyle(true)\r\n        setYearStyle(false)\r\n\r\n\r\n        //request data per day actualdate\r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const YearClick = () => {\r\n        ToggleLoading(true)\r\n\r\n        setDayStyle(false)\r\n        setMonthStyle(false)\r\n        setYearStyle(true)\r\n\r\n        //request data per month actualdate\r\n\r\n\r\n        ToggleLoading(false)\r\n    }\r\n    const HandleBeforeClick = () => {\r\n\r\n        if (dayStyle) {\r\n            let newDate = actualDate;\r\n            newDate.setDate(newDate.getDate() - 1);\r\n\r\n            setDate(newDate.toISOString().split('T')[0]);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n\r\n            //request data\r\n\r\n\r\n\r\n        } else if (monthStyle) {\r\n            let newDate = actualDate;\r\n            newDate.setMonth(newDate.getMonth() - 1);\r\n\r\n            const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${tempDate[0]}-${tempDate[1]}`);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n        } else {\r\n            let newDate = actualDate;\r\n            newDate.setFullYear(newDate.getFullYear() - 1);\r\n\r\n            const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n            setDate(`${tempDate[0]}`);\r\n            setActualDate(newDate);\r\n            setAllowRightArrow(true);\r\n        }\r\n\r\n    }\r\n    const HandleAfterClick = () => {\r\n\r\n        if (allowRightArrow) {\r\n            if (dayStyle) {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setDate(newDate.getDate() + 1);\r\n    \r\n                setDate(newDate.toISOString().split('T')[0])\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getDate() === todayDate.getDate() && newDate.getMonth() === todayDate.getMonth() && newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            } else if (monthStyle) {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setMonth(newDate.getMonth() + 1);\r\n    \r\n                const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n                setDate(`${tempDate[0]}-${tempDate[1]}`);\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getMonth() === todayDate.getMonth() && newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            } else {\r\n                const todayDate = new Date();\r\n                let newDate = actualDate;\r\n                newDate.setFullYear(newDate.getFullYear() + 1);\r\n    \r\n                const tempDate = (newDate.toISOString().split('T')[0]).split(\"-\");\r\n                setDate(`${tempDate[0]}`);\r\n                setActualDate(newDate);\r\n\r\n                if (newDate.getFullYear() === todayDate.getFullYear()) {\r\n                    setAllowRightArrow(false);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"Graph-Headers\">\r\n                <button className=\"Graph-Title\" onClick={ConsumptionProductionClick}><div className={ConsumptionProductionHeaderStyle ? \"activeCons\" : \"inactiveCons\"}>Consumption & Production</div></button>\r\n                <button className=\"Graph-Title\" onClick={BatteryClick}><div className={BatteryStyle ? \"activeBattery\" : \"inactiveBattery\"}>Battery</div></button>\r\n                <button className=\"Graph-Title\" onClick={RevenueClick}><div className={RevenueStyle ? \"activeRevenue\" : \"inactiveRevenue\"}>Revenue</div></button>\r\n                <div className=\"TimeFrame-Container\">\r\n                    <div className=\"TimePeriodButtons\"><button onClick={DayClick} style={dayStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}}>Day</button><button onClick={MonthClick} style={monthStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}} id=\"TimeFrame-Button-Middle\">Month</button><button onClick={YearClick} style={yearStyle ? {backgroundColor: \"#007dff\", color:\"white\"} : {}}>Year</button></div>\r\n                    <div className=\"TimeFrame-Time\"><button onClick={HandleBeforeClick} className=\"TimeFrame-Time-Arrow Time-Frame-Time-Arrow-Left\">{\"<\"}</button><button className=\"TimeFrame-Time-TimeDisplay\">{date}</button><button onClick={HandleAfterClick} style={allowRightArrow ? {} : {opacity: 0.5, cursor: \"default\"}} className=\"TimeFrame-Time-Arrow Time-Frame-Time-Arrow-Right\">{\">\"}</button></div>\r\n                </div>\r\n            </div>\r\n            {/* ConsumptionAndProduction Chart */}\r\n            {ConsumptionProductionHeaderStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id={`SolarProductionColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#ffd17f' />\r\n                            <stop offset='1' stopColor='#ff8057' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ConsumptionColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#c069e4' />\r\n                            <stop offset='1' stopColor='#6c32fb' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ImportFromGridColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#f46286' />\r\n                            <stop offset='1' stopColor='#ec2871' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`ConsumedFromPV`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#06d3ba' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"0 0\" />\r\n                        <XAxis interval={1} dataKey=\"Name\" stroke={axisColors}/>\r\n                        <YAxis unit={\"kWh\"} scale={\"linear\"} tickFormatter={(value) => value.toFixed(0)} interval={1} stroke={axisColors}/>\r\n                        <Tooltip contentStyle={toolTipStyle} isAnimationActive={true} content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend onClick={(value) => ShowOrHideData(value)} formatter={(value, entry, index) => <span style={LegendStyle(entry)}>{value}</span>}/>\r\n                        <Bar id=\"SolarProd\" dataKey=\"Solar production\" fill={`url(#SolarProductionColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showSolarProd ? false : true}/>\r\n                        <Bar id=\"Consumed\" dataKey=\"Consumption\" fill={`url(#ConsumptionColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showConsumption ? false : true}/>\r\n                        <Bar id=\"Import\" dataKey=\"Import from grid\" fill={`url(#ImportFromGridColor)`} legendType=\"circle\" unit={\"kWh\"} hide={showImportFromGrid ? false : true}/>\r\n                        <Bar id=\"FromPv\" dataKey=\"Consumed from PV\" fill={`url(#ConsumedFromPV)`} legendType=\"circle\" unit={\"kWh\"} hide={showConsumedFromPv ? false : true}/>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n            {/* BatteryChart */}\r\n            {BatteryStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <AreaChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"#8ad7b2\" stopOpacity={0.8}/>\r\n                            <stop offset=\"95%\" stopColor=\"#22df83\" stopOpacity={0}/>\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"Name\" stroke={axisColors} tickFormatter={(value) => `${value.split(\":\")[0]}:00:00`} interval={50}/>\r\n                        <YAxis stroke={axisColors} unit={\"%\"} />\r\n                        <Tooltip content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend iconType=\"plainline\" />\r\n                        <Area id=\"BatteryPercent\" type={\"monotone\"} dataKey=\"Battery percentage\" stroke=\"#22df83\" fillOpacity={1} unit={\"%\"} legendType=\"circle\" fill=\"url(#colorUv)\"/>\r\n                        {/* hide={showSolarProd ? false : true} */}\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n            {RevenueStyle ? \r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart width={730} height={250} data={data}>\r\n                    <defs>\r\n                        <linearGradient id={`FedToGridColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#06d3ba' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                        <linearGradient id={`FirnControllerProfitColor`} x1='0' y1='0' x2='0' y2='100%' spreadMethod='reflect'>\r\n                            <stop offset='0' stopColor='#0e578b' />\r\n                            <stop offset='1' stopColor='#189cd8' />\r\n                        </linearGradient>\r\n                    </defs>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"Name\" stroke={axisColors} interval={1}/>\r\n                        <YAxis unit={\"€\"} stroke={axisColors}/>\r\n                        <Tooltip contentStyle={toolTipStyle} isAnimationActive={true} content={<CustomConsumptionToolTip/>}/>\r\n                        <Legend iconType=\"circle\"/>\r\n                        <Bar id=\"FedToGrid\" stackId={'a'} unit={'€'} dataKey=\"Fed to grid\" fill={`url(#FedToGridColor)`} />\r\n                        <Bar id=\"FirnControllerProfit\" stackId={'a'} unit={'€'} dataKey=\"FirnController Profit\" fill={`url(#FirnControllerProfitColor)`} />\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n            : <></>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// \r\nexport default Charts;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\currentFlow\\currentFlow.jsx",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149"],[],"import './currentFlow.css'\r\nimport Solar_Icon from '../../../Images/Solar_Icon.png'\r\nimport Battery_Icon from '../../../Images/Battery_Icon.png'\r\nimport Grid_Icon from '../../../Images/Grid_Icon.png'\r\nimport Home_Icon from '../../../Images/Home_Icon.png'\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Solar_White_Icon from '../../../Images/Solar_White_icon.png'\r\nimport Grid_White_Icon from '../../../Images/Grid_White_Icon.png'\r\nimport Battery_White_Icon from '../../../Images/battery_white_icon.png'\r\nimport Home_White_Icon from '../../../Images/Home_White_Icon.png'\r\n\r\nconst CurrentFlow = ({darkMode, SOLARW, GRIDW, HOMEW, BATTERYW, BATTERYP}) => {\r\n    // Values: \"Import\" = X > 0, \"Export\" = X < 0, \"Static\" = X == 0\r\n    const [SOLAR_BATT, setSOLAR_BATT] = useState(false);\r\n    const [SOLAR_GRID, setSOLAR_GRID] = useState(false);\r\n    const [SOLAR_HOME, setSOLAR_HOME] = useState(false);\r\n    const [GRID_BATT, setGRID_BATT] = useState(false);\r\n    const [GRID_HOME, setGRID_HOME] = useState(false);\r\n    const [BATT_GRID, setBATT_GRID] = useState(false);\r\n    const [BATT_HOME, setBATT_HOME] = useState(false);\r\n    const [BatteryPercentage, setBatteryPercentage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (BATTERYP >= 0.2) {\r\n            const battpercentage = Math.floor(BATTERYP * 100)\r\n            setBatteryPercentage(battpercentage)\r\n        } else {\r\n            setBatteryPercentage(20)\r\n        }\r\n        \r\n        setSOLAR_BATT(false)\r\n        setSOLAR_GRID(false)\r\n        setSOLAR_HOME(false)\r\n        setGRID_BATT(false)\r\n        setGRID_HOME(false)\r\n        setBATT_GRID(false)\r\n        setBATT_HOME(false)\r\n\r\n        switch (true) {\r\n            case GRIDW > 0:\r\n                switch (true) {\r\n                    case HOMEW - GRIDW < 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Grid -> Batt\r\n                                setGRID_BATT(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                //Solar -> Batt\r\n                                setSOLAR_BATT(true)\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Grid -> Batt\r\n                                setGRID_BATT(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW - GRIDW === 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                //Solar -> Batt\r\n                                setSOLAR_BATT(true)\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW - GRIDW > 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //Grid -> Home\r\n                                setGRID_HOME(true)\r\n                                //Batt -> Home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch (true) {\r\n                                    case SOLARW + GRIDW < HOMEW:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        //batt -> home\r\n                                        setBATT_HOME(true)\r\n                                        break;\r\n                                    case SOLARW + GRIDW === HOMEW:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        break;\r\n\r\n                                    case SOLARW + GRIDW > HOMEW:\r\n                                        //solar -> batt\r\n                                        setSOLAR_BATT(true)\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //grid -> home\r\n                                        setGRID_HOME(true)\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case GRIDW === 0:\r\n                switch(true) {\r\n                    case SOLARW === 0:\r\n                        switch(true) {\r\n                            case HOMEW === 0:\r\n                                //niets\r\n                                break;\r\n                            case HOMEW > 0:\r\n                                //Batt -> home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case SOLARW > 0:\r\n                        switch(true) {\r\n                            case HOMEW - SOLARW < 0:\r\n                                //solar -> batt\r\n                                setSOLAR_BATT(true)\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                break;\r\n                            case HOMEW - SOLARW === 0:\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                break;\r\n                            case HOMEW - SOLARW > 0:\r\n                                //solar -> home\r\n                                setSOLAR_HOME(true)\r\n                                //batt -> home\r\n                                setBATT_HOME(true)\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case GRIDW < 0:\r\n                const GRIDWABS = Math.abs(GRIDW);\r\n                switch(true) {\r\n                    case HOMEW === 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //batt -> grid\r\n                                setBATT_GRID(true)\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch(true) {\r\n                                    case SOLARW - GRIDWABS < 0:\r\n                                        //batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - GRIDWABS === 0:\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - GRIDWABS > 0:\r\n                                        //solar -> grid\r\n                                        setSOLAR_GRID(true)\r\n                                        //solar -> batt\r\n                                        setSOLAR_BATT(true)\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                    case HOMEW > 0:\r\n                        switch(true) {\r\n                            case SOLARW === 0:\r\n                                //batt -> grid\r\n                                setBATT_GRID(true)\r\n                                //batt -> home\r\n                                setBATT_HOME(true)\r\n\r\n                                break;\r\n                            case SOLARW > 0:\r\n                                switch(true) {\r\n                                    case SOLARW - HOMEW < 0:\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        //batt -> home\r\n                                        setBATT_HOME(true)\r\n                                        //batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        break;\r\n                                    case SOLARW - HOMEW === 0:\r\n                                        //Batt -> grid\r\n                                        setBATT_GRID(true)\r\n                                        //solar -> home\r\n                                        setSOLAR_HOME(true)\r\n                                        break;\r\n                                    case SOLARW - HOMEW > 0:\r\n                                        switch(true) {\r\n                                            case BATTERYW < 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //batt -> grid\r\n                                                setBATT_GRID(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                            case BATTERYW === 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                            case BATTERYW > 0:\r\n                                                //solar -> home\r\n                                                setSOLAR_HOME(true)\r\n                                                //solar -> batt\r\n                                                setSOLAR_BATT(true)\r\n                                                //solar -> grid\r\n                                                setSOLAR_GRID(true)\r\n                                                break;\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n    }, [BATTERYP, GRIDW, HOMEW]);\r\n    \r\n  return (\r\n    <>\r\n        <div className=\"CurrentFlow-Container\">\r\n            <div className='SOLAR'>\r\n                <div className='CurrentFlow-Outer-Circle SOLAR-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Solar_White_Icon : Solar_Icon} alt=\"\" />\r\n                        <div>{SOLARW} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='GRID'>\r\n                <div className='CurrentFlow-Outer-Circle GRID-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Grid_White_Icon : Grid_Icon} alt=\"\" />\r\n                        <div>{Math.abs(GRIDW)} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='BATTERY'>\r\n                <div className='CurrentFlow-Outer-Circle BATTERY-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <div className='CurrentFlow-BATTERY-Percentage'>\r\n                            <img className='BATTERY-icon' src={darkMode ? Battery_White_Icon : Battery_Icon} alt=\"\" />\r\n                            <div className='BATTERY-percentage'>{BatteryPercentage}%</div>\r\n                        </div>\r\n                        <div>{Math.abs(BATTERYW)} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='HOME'>\r\n                <div className='CurrentFlow-Outer-Circle HOME-Circle'>\r\n                    <div className='CurrentFlow-Inner-Circle'>\r\n                        <img className='SOLAR-icon' src={darkMode ? Home_White_Icon : Home_Icon} alt=\"\" />\r\n                        <div>{HOMEW} W</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <svg className='BATTER-GRID-Line' xmlns=\"http://www.w3.org/2000/svg\" viewBox='0 0 450 500'>\r\n                    <defs>\r\n                        <linearGradient id=\"horizontal-line\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\" gradientUnits='userSpaceOnUse'>\r\n                            <stop offset=\"0%\" stopColor=\"#65D8A0\" />\r\n                            <stop offset=\"40%\" stopColor=\"#76CF9E\" />\r\n                            <stop offset=\"60%\" stopColor=\"#F88C8C\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"vertical-line\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\" gradientUnits='userSpaceOnUse'>\r\n                            <stop offset=\"0%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"40%\" stopColor=\"#D9B857\" />\r\n                            <stop offset=\"60%\" stopColor=\"#CE80EA\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"solargrid-line\" gradientUnits=\"userSpaceOnUse\" x1=\"230\" y1=\"151.5\" x2=\"300.6\" y2=\"245\">\r\n                            <stop offset=\"10%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"50%\" stopColor=\"#e0b15d\" />\r\n                            <stop offset=\"90%\" stopColor=\"#F88C8C\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"solarbatt-line\" gradientUnits=\"userSpaceOnUse\" x1=\"220\" y1=\"151.5\" x2=\"148\" y2=\"245\">\r\n                            <stop offset=\"10%\" stopColor=\"#DABB50\" />\r\n                            <stop offset=\"50%\" stopColor=\"#b6c469\" />\r\n                            <stop offset=\"90%\" stopColor=\"#65D8A0\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"batthome-line\" gradientUnits=\"userSpaceOnUse\" x1=\"148\" y1=\"255\" x2=\"220\" y2=\"349\">\r\n                            <stop offset=\"10%\" stopColor=\"#65d8a0\" />\r\n                            <stop offset=\"50%\" stopColor=\"#85beb6\" />\r\n                            <stop offset=\"90%\" stopColor=\"#ce80ea\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"homegrid-line\" gradientUnits=\"userSpaceOnUse\" x1=\"230\" y1=\"349\" x2=\"300.6\" y2=\"255\">\r\n                            <stop offset=\"10%\" stopColor=\"#ce80ea\" />\r\n                            <stop offset=\"50%\" stopColor=\"#e486b9\" />\r\n                            <stop offset=\"90%\" stopColor=\"#f88c8c\" />\r\n                        </linearGradient>\r\n                        {/* BATTERY | GIRD MARKERS */}\r\n                            {/* BATTERY TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"BATT_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"10\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65D8A0; #F88C8C\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"GRID_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"0\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#F88C8C; #65D8A0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* SOLAR | HOME MARKERS */}\r\n                            {/* SOLAR TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"10\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #CE80EA\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                            {/* HOME TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"HOME_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"0\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#CE80EA; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                        {/* SOLAR | GRID MARKERS */}\r\n                            {/* SOLAR TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #e0b15d; #F88C8C\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"GRID_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#F88C8C; #e0b15d; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                        {/* SOLAR | BATTERY MARKERS */}\r\n                            {/* SOLAR TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"SOLAR_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#DABB50; #b6c469; #65D8A0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                                \r\n                            </marker>\r\n                            {/* BATTERY TO SOLAR MARKER */}\r\n                            <marker\r\n                                id=\"BATT_SOLAR\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65D8A0; #b6c469; #DABB50\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* HOME | BATTERY MARKERS */}\r\n                            {/* BATTERY TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"BATT_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#65d8a0; #85beb6; #ce80ea\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* HOME TO BATTERY MARKER */}\r\n                            <marker\r\n                                id=\"HOME_BATT\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#ce80ea; #85beb6; #65d8a0\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n\r\n                        {/* HOME | GRID MARKERS */}\r\n                            {/* HOME TO GRID MARKER */}\r\n                            <marker\r\n                                id=\"HOME_GRID\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#ce80ea; #e486b9; #f88c8c\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                            {/* GRID TO HOME MARKER */}\r\n                            <marker\r\n                                id=\"GRID_HOME\"\r\n                                markerWidth=\"10\"\r\n                                markerHeight=\"10\"\r\n                                refX=\"5\"\r\n                                refY=\"5\"\r\n                                orient=\"auto\"\r\n                            >\r\n                                <circle cx=\"5\" cy=\"5\" r=\"3\">\r\n                                    <animate\r\n                                        attributeName=\"fill\"\r\n                                        values=\"#f88c8c; #e486b9; #ce80ea\"\r\n                                        dur=\"5s\"\r\n                                        repeatCount=\"indefinite\"\r\n                                    />\r\n                                </circle>\r\n                            </marker>\r\n                    </defs>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/* BATTERY | GRID LINE */}\r\n                    {BATT_GRID | GRID_BATT ? <line x1=\"33%\" y1=\"50%\" x2=\"66.8%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"2\" /> : <></>}\r\n                    {/* BATTERY to GRID */}\r\n                    {BATT_GRID ? <line x1=\"33%\" y1=\"50%\" x2=\"66.8%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_GRID)\">\r\n                        <animate attributeName=\"x2\" from=\"36%\" to=\"66.8%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* GRID to BATTERY */}\r\n                    {GRID_BATT ? <line x1=\"66.8%\" y1=\"50%\" x2=\"33%\" y2=\"50%\" stroke=\"url(#horizontal-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_BATT)\">\r\n                        <animate attributeName=\"x2\" from=\"66.8%\" to=\"36%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* SOLAR | HOME LINE */}\r\n                    {SOLAR_HOME ? <line x1=\"50%\" y1=\"30.4%\" x2=\"50%\" y2=\"69.8%\" stroke=\"url(#vertical-line)\" strokeWidth=\"2\" /> : <></>}\r\n                    {/* SOLAR to HOME */}\r\n                    {SOLAR_HOME ? <line x1=\"50%\" y1=\"30.4%\" x2=\"50%\" y2=\"69.8%\" stroke=\"url(#vertical-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_HOME)\">\r\n                        <animate attributeName=\"y2\" from=\"32.5%\" to=\"69.8%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> : <></>}\r\n                    {/* HOME to SOLAR */}\r\n                    {/* <line x1=\"50%\" y1=\"69.8%\" x2=\"50%\" y2=\"30.4%\" stroke=\"url(#vertical-line)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_SOLAR)\">\r\n                        <animate attributeName=\"y2\" from=\"69.8%\" to=\"32.5%\" dur=\"5s\" repeatCount=\"indefinite\" />\r\n                    </line> */}\r\n\r\n\r\n                    {/* SOLAR | GRID LINE */}\r\n                    {SOLAR_GRID ? <path d=\"M230,151.5 L230,210 C230,245 230,245 260,245 L300.6,245\" fill=\"none\" stroke=\"url(#solargrid-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {SOLAR_GRID ? <path d=\"M230,153 L230,210 C230,245 230,245 260,245 L293.6,245\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"SOLARGRID\"/> : <></>}\r\n                    {/* <path d=\"M293.6,245 L260,245 C230,245 230,245 230,210 L230,153\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"GRIDSOLAR\"/> */}\r\n                    {/* SOLAR to GRID */}\r\n                    {SOLAR_GRID ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#SOLAR_GRID)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_GRID)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#SOLARGRID\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* GRID to SOLAR */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#GRID_SOLAR)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_SOLAR)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#GRIDSOLAR\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n\r\n                    {/* SOLAR | BATTERY LINE */}\r\n                    {SOLAR_BATT ? <path d=\"M220,151.5 L220,210 C220,245 220,245 188,245 L148,245\" fill=\"none\" stroke=\"url(#solarbatt-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {SOLAR_BATT ? <path d=\"M220,153 L220,210 C220,245 220,245 188,245 L155,245\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"SOLARBATT\"/> : <></>}\r\n                    {/* <path d=\"M155,245 L188,245 C220,245 220,245 220,210 L220,153\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"BATTSOLAR\"/> */}\r\n                    {/* SOLAR to BATTERY */}\r\n                    {SOLAR_BATT ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#SOLAR_BATT)\" strokeWidth=\"1.3\" markerEnd=\"url(#SOLAR_BATT)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#SOLARBATT\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* BATTERY to SOLAR */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#BATT_SOLAR)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_SOLAR)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#BATTSOLAR\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n                    {/* BATTERY | HOME LINE */}\r\n                    {BATT_HOME ? <path d=\"M148,255 L188,255 C220,255 220,255 220,290.5 L220,349\" fill=\"none\" stroke=\"url(#batthome-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {BATT_HOME ? <path d=\"M155,255 L188,255 C220,255 220,255 220,290.5 L220,345.5\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"BATTHOME\"/> : <></>}\r\n                    {/* <path d=\"M220,345.5 L220,290.5 C220,255 220,255 188,255 L155,255\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"HOMEBATT\"/> */}\r\n                    {/* BATTERY to HOME */}\r\n                    {BATT_HOME ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#BATT_HOME)\" strokeWidth=\"1.3\" markerEnd=\"url(#BATT_HOME)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#BATTHOME\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                    {/* HOME to BATTERY */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#HOME_BATT)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_BATT)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#HOMEBATT\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n\r\n                    {/* HOME | GRID LINE */}\r\n                    {GRID_HOME ? <path d=\"M230,349 L230,290.5 C230,255 230,255 260,255 L300.6,255\" fill=\"none\" stroke=\"url(#homegrid-line)\" strokeWidth=\"2\"/> : <></>}\r\n                    {GRID_HOME ? <path d=\"M293.6,255 L260,255 C230,255 230,255 230,290.5 L230,345.5\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"GRIDHOME\"/> : <></>}\r\n                    {/* <path d=\"M230,345.5 L230,290.5 C230,255 230,255 260,255 L293.6,255\" fill=\"none\" stroke=\"transparent\" strokeWidth=\"2\" id=\"HOMEGRID\"/> */}\r\n                    {/* HOME to GRID */}\r\n                    {/* <path d=\"M0,0\" fill=\"none\" stroke=\"url(#HOME_GRID)\" strokeWidth=\"1.3\" markerEnd=\"url(#HOME_GRID)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#HOMEGRID\" />\r\n                        </animateMotion>\r\n                    </path> */}\r\n                    {/* GRID to HOME */}\r\n                    {GRID_HOME ? <path d=\"M0,0\" fill=\"none\" stroke=\"url(#GRID_HOME)\" strokeWidth=\"1.3\" markerEnd=\"url(#GRID_HOME)\">\r\n                        <animateMotion dur=\"5s\" repeatCount=\"indefinite\">\r\n                            <mpath href=\"#GRIDHOME\" />\r\n                        </animateMotion>\r\n                    </path> : <></>}\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    </>\r\n);};\r\n\r\nexport default CurrentFlow;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\HomePage\\WebHomePage.jsx",["150"],[],"import \"./homePage.css\"\r\n\r\nimport userIcon from '../../Images/6522516.png'\r\nimport WebLogo from '../../Images/firnenergyLogo.png'\r\nimport globeIcon from '../../Images/icons8-world-100.png'\r\nimport batteryIcon from '../../Images/battery_611153.png'\r\nimport batterydisplay from \"../../Images/batterijdisplaytest-PhotoRoom.png-PhotoRoom.png\"\r\nimport Coverdisplay from \"../../Images/Runway 2023-07-11T13_43_48.777Z Expand Image.jpg\"\r\nimport Industrialdisplay from '../../Images/interior-large-logistics-warehouse-ai-generative.jpg'\r\nimport Residentialdisplay from \"../../Images/aerial-view-new-houses-bridgwater-somerset-uk.jpg\"\r\nimport flashIcon from '../../Images/flash_4083922.png'\r\nimport snowIcon from \"../../Images/snowflake_2529995.png\"\r\nimport monitorIcon from \"../../Images/monitor_1150587.png\"\r\nimport walletIcon from \"../../Images/icons8-wallet-100.png\"\r\nimport phoneIcon from \"../../Images/icons8-phone-100.png\";\r\nimport mailIcon from \"../../Images/icons8-mail-100.png\"\r\nimport controllerImage from \"../../Images/finis-removebg-preview.png\"\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\nconst WebHomePage = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleUserLogin = () => {\r\n        navigate(\"/LoginPage\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"Navbar\">\r\n                <div><img className=\"NavbarLogo\" src={WebLogo} alt=\"https://ibb.co/LdnxQng\" /></div>\r\n                <div className=\"Navbar_Items\">\r\n                    <div style={{color: \"#AB745A\", textDecoration: \"underline\"}}>Home</div>\r\n                    <div>|</div>\r\n                    <div><a href=\"#AboutUsLink\">Over Ons</a></div>\r\n                    <div>|</div>\r\n                    <div><a href=\"#ContactLink\">Contact</a></div>\r\n                    <div>|</div>\r\n                    <div>Industrieel</div>\r\n                    <div>|</div>\r\n                    <div>Residentieel</div>\r\n                </div>\r\n                <div className=\"Navbar_info\">\r\n                    <div><button onClick={handleUserLogin} className=\"user_icon_button\"><img className=\"user_icon\" src={userIcon} alt=\"https://ibb.co/P5ZFx1K\" /></button></div>\r\n                    <div><img className=\"info_icon\" src={globeIcon} alt=\"https://ibb.co/wR9CG6h\" /></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"cover\"> \r\n                <span className=\"Cover_Title\">FirnEnergy</span>\r\n                <span className=\"Cover_Line\"></span>\r\n                <span className=\"Cover_description\">Innovatieve energie opslag & energie trading</span>\r\n            </div>\r\n            <div className=\"BatteryDisplay\">\r\n                <div className=\"BatteryText\">\r\n                    <div className=\"BatteryTitel\">Optimaliseer uw batterij</div>\r\n                    <div className=\"BatteryDesc\">Verslim de energie aankoop en verkoop, dankzij FIRN energy koopt u energie aan de laagste prijs en verkoopt u overshot aan de hoogste prijs</div>\r\n                </div>\r\n                <div><img className=\"BatteryImage\" src={batterydisplay} alt=\"\" /></div>\r\n            </div>\r\n            <div className=\"Properties\">\r\n                <table>\r\n                    <tr className=\"flex-row\">\r\n                        <td>\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src={batteryIcon} alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\">Duurzame batterijoplossingen</div>\r\n                            <div className=\"PropDesc\">Dankzij de FIRN controller wordt uw batterij efficiënter gebruikt wat dan zorgt voor duurzame en betrouwbare batterij oplossingen.</div>\r\n                        </td>\r\n                        <td>\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src={flashIcon} alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\">Geavanceerd energiemanagement</div>\r\n                            <div className=\"PropDesc\">Met behulp van real time data wordt uw systeem aangestuurd om op ieder moment de meest gepaste beslissing te nemen.</div>\r\n                        </td>\r\n                        <td>\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src={snowIcon} alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\">Geoptimaliseerde winter</div>\r\n                            <div className=\"PropDesc\">Uw batterij wordt automatisch s ’nachts opgeladen om zo aan lage prijzen energie tijdens de dag te kunnen gebruiken.</div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr className=\"flex-row2\">\r\n                        <td>\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src={monitorIcon} alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\">Real time monitoring</div>\r\n                            <div className=\"PropDesc\">Bekijk uw statistieken waar en wanneer u wilt. Ook kunt u geavanceerde grafieken bekijken om een zo gedetailleerd mogelijk beeld van de geleverde prestaties te krijgen.</div>\r\n                        </td>\r\n                        <td>\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src={walletIcon} alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\">Slimme teruglevering</div>\r\n                            <div className=\"PropDesc\">Aan de hand van wisselende uurprijzen verkoopt de FIRN controller uw opgewekte energie aan de beste tarieven.</div>\r\n                        </td>\r\n                        <td className=\"notVisible\">\r\n                            <div className=\"PropImage\"><div className=\"Circle\"><img className=\"PropBat\" src=\"icons8-wallet-100.png\" alt=\"\" /></div></div>\r\n                            <div className=\"PropTitle\"></div>\r\n                            <div className=\"PropDesc\"></div>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            <div className=\"profiel\">\r\n                <div className=\"ProfielHeader\">\r\n                    <div className=\"slider\"></div>\r\n                    <div className=\"ProfielTitel\">Kies je profiel</div>\r\n                    <div className=\"slider\"></div>\r\n                </div>\r\n                <div className=\"profielBoxes\">\r\n                    <div className=\"IndustrieelBox\" style={{backgroundImage: Industrialdisplay}}>\r\n                        <div className=\"BoxText\">\r\n                            <span className=\"BoxTitle\">Industrieel</span>\r\n                            <span className=\"BoxSlider\"></span>\r\n                            <span className=\"BoxDesc\">Laat jouw zonne-installatie slimmer werken</span>\r\n                        </div>\r\n                        <span className=\"BoxFollow\">Ontdek meer →</span>\r\n                    </div>\r\n                    <div className=\"ResidentieelBox\" style={{backgroundImage: Residentialdisplay}}>\r\n                        <div className=\"BoxText\">\r\n                            <span className=\"BoxTitle\">Residentieel</span>\r\n                            <span className=\"BoxSlider\"></span>\r\n                            <span className=\"BoxDesc\">Bespaar meer met slimme batterij integraties</span>\r\n                        </div>\r\n                        <span className=\"BoxFollow\">Ontdek meer →</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"AboutUs\" id=\"AboutUsLink\">\r\n                <div><img src={controllerImage} alt=\"\" /></div>\r\n                <div className=\"AboutUsText\">\r\n                    <div className=\"AboutUsTitel\">Laat ons jou helpen</div>\r\n                    <div className=\"AboutUsDesc\">FIRN Energy is een toonaangevend bedrijf dat zich richt op het ontwikkelen van geavanceerde batterijoplossingen en energiemanagementsystemen. Wij geloven in de kracht van energieopslag en de impact die het kan hebben op de manier waarop we energie consumeren en beheren. Onze missie is om duurzame en betrouwbare energieopslagoplossingen te bieden die de overgang naar een groenere toekomst ondersteunen.</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"Contact\" id=\"ContactLink\">\r\n                <div className=\"ProfielHeader\">\r\n                    <div className=\"slider\"></div>\r\n                    <div className=\"ProfielTitel\">Contacteer ons</div>\r\n                    <div className=\"slider\"></div>\r\n                </div>\r\n                <div className=\"ContactInfo\">\r\n                    <div className=\"ContactDesc\">Wilt u meer informatie over onze innovatieve batterijoplossingen en energiemanagementsystemen? Neem vandaag nog  \r\n                        contact met ons op en ontdek hoe FIRN Energy uw energiebeheer optimaliseert</div>\r\n                    <div className=\"ContactButtons\">\r\n                        <div className=\"PhoneButton\"><img className=\"ContactImage\" src={phoneIcon} alt=\"\" /><div>+32 56 19 88 77</div></div>\r\n                        <div className=\"EmailButton\"><img className=\"ContactImage\" src={mailIcon} alt=\"\" /><div>Sales@firnenergy.com</div></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default WebHomePage;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\Authentication\\login.jsx",["151","152","153","154","155","156","157","158"],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\adminPage.jsx",[],[],"C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\usersList.jsx",["159","160","161"],[],"import { useEffect, useState } from \"react\";\r\nimport User from '../../../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserDisplay from './userDisplay';\r\nimport './usersList.css'\r\n\r\nimport Authenticate from '../../../../api/authenticate'\r\n\r\nconst UsersList = () => {\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const [reloadUserList, setReloadUserList] = useState(false);\r\n\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n    \r\n    useEffect(() => {\r\n\r\n        setReloadUserList(false)\r\n\r\n        const ConfirmUserRole = async () => {\r\n            const token = localStorage.getItem('jwtToken');\r\n            try {\r\n                const user = await userApi.GetUsername(token);\r\n\r\n                if (user.data.user.role != 'ADMIN') {\r\n                    throw Error;\r\n                }\r\n\r\n                //get the users\r\n                const users = await userApi.GetUserData(token);\r\n                setUsers(users.data);\r\n\r\n            } catch (error) {\r\n                //token expired or invalid navigate to Login\r\n                localStorage.removeItem('jwtToken');\r\n                navigate('/');\r\n            }\r\n        }\r\n        ConfirmUserRole();\r\n        \r\n    }, [reloadUserList]);\r\n\r\n    const RefreshUserListPage = () => {\r\n        setReloadUserList(true);\r\n    }\r\n\r\n    // const [data, setData] = useState([]);\r\n    // const AuthApi = Authenticate();\r\n\r\n    // useEffect(() => {\r\n        \r\n    //     const retrievedata = async() => {\r\n    //         const JwtToken = localStorage.getItem('jwtToken');\r\n    //         const AccessToken = await userApi.GetAccessToken(JwtToken);\r\n    //         console.log(AccessToken)\r\n    //         const dete = await AuthApi.Devices(AccessToken);\r\n    //         setData(dete);\r\n    //     }\r\n    //     retrievedata();\r\n\r\n    // }, [])\r\n\r\n    return (\r\n        <div className=\"UserList-Container\">\r\n            {users.map((user, index) => (\r\n                <div key={index} className=\"UserSet\">\r\n                <UserDisplay\r\n                    email={user.email}\r\n                    password={user.password}\r\n                    deviceId={user.deviceid}\r\n                    enirisEmail={user.enirisEmail}\r\n                    enirisPassword={user.enirisPassword}\r\n                    RefreshUserListPage={RefreshUserListPage}\r\n                />\r\n                </div>\r\n            ))}\r\n        </div>\r\n        // <div>\r\n        //     {data}\r\n        // </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UsersList;","C:\\Users\\thoma\\OneDrive\\Documenten\\GitHub\\FirnEnergyFrontend\\firnenergy\\src\\components\\body\\admin\\users\\userDisplay.jsx",["162","163","164","165","166","167","168"],[],"import { useState } from 'react';\r\nimport './userDisplay.css';\r\nimport User from '../../../../api/user';\r\n\r\n\r\n\r\nconst UserDisplay = ({email, password, enirisEmail, deviceId, enirisPassword, RefreshUserListPage}) => {\r\n\r\n    const [nothingFilledError, setNothingFilledError] = useState(false);\r\n    const [Error, setError] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [passwordresetSuccess, setPasswordResetSuccess] = useState(false);\r\n    const [passwordresetFailed, setPasswordResetFailed] = useState(false);\r\n\r\n    const [newEnirisEmail, setNewEnirisEmail] = useState('');\r\n    const [newDeviceId, setNewDeviceId] = useState('');\r\n    const [newEnirisPassword, setNewEnirisPassword] = useState('');\r\n    const [newDefaultPassword, setNewDefaultPassword] = useState('');\r\n\r\n    const [EnirisPasswordNotHashed, setEnirisPasswordNotHashed] = useState('');\r\n\r\n    const userApi = User();\r\n\r\n    const HandleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        setNothingFilledError(false);\r\n        setSuccess(false);\r\n        setError(false);\r\n        setPasswordResetSuccess(false);\r\n        setPasswordResetFailed(false);\r\n\r\n        //check if admin > change fields that are not empty\r\n\r\n        if (newEnirisEmail === \"\" && newDeviceId === \"\" && newEnirisPassword === \"\") {\r\n            setNothingFilledError(true)\r\n        } else {\r\n            try {\r\n                const token = localStorage.getItem('jwtToken');\r\n                if (newEnirisEmail != \"\") {\r\n                    //update enirisemial\r\n                    const response = await userApi.changeEnirisEmail(token, email, newEnirisEmail);\r\n                }\r\n                if (newDeviceId != \"\") {\r\n                    //update device id\r\n                    const response = await userApi.changeDeviceId(token, email, newDeviceId);\r\n                }\r\n                if (newEnirisPassword != \"\") {\r\n                    //update eniris pass\r\n                    const response = await userApi.changeEnirisPassword(token, email, newEnirisPassword);\r\n                    setEnirisPasswordNotHashed(newEnirisPassword);\r\n                }\r\n                setSuccess(true);\r\n                RefreshUserListPage();\r\n            } catch (error) {\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const HandlePasswordReset = async() => {\r\n        const token = localStorage.getItem('jwtToken');\r\n        const randompass = generatePassword(10);\r\n        setNewDefaultPassword(randompass);\r\n\r\n        setNothingFilledError(false);\r\n        setSuccess(false);\r\n        setError(false);\r\n        setPasswordResetSuccess(false);\r\n        setPasswordResetFailed(false);\r\n\r\n        try {\r\n            setNothingFilledError(false);\r\n            setSuccess(false);\r\n            setError(false);\r\n            const response = await userApi.ResetPassword(token, email, randompass);\r\n            setPasswordResetSuccess(true);\r\n            setNothingFilledError(false);\r\n            setSuccess(false);\r\n            setError(false);\r\n        } catch (error) {\r\n            setPasswordResetFailed(true);\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n    function generatePassword(length) {\r\n        const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?\";\r\n        let password = \"\";\r\n      \r\n        for (let i = 0; i < length; i++) {\r\n          const randomIndex = Math.floor(Math.random() * charset.length);\r\n          password += charset[randomIndex];\r\n        }\r\n      \r\n        return password;\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <form className='UserDisplay-Container' onSubmit={HandleSubmit}>\r\n                <div className='UserDisplay-Container-Column'>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>User:</div>\r\n                        <div className='UserDisplay-Container-Column-Item-Value'>{email}</div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Password:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{newDefaultPassword}</div>\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={HandlePasswordReset} type='' className='UserDisplay-Container-Column-Item-ResetPassword'>Reset Password</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Eniris email:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{enirisEmail}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newenirisemail' type=\"text\" onChange={(e) => setNewEnirisEmail(e.target.value)} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='UserDisplay-Container-Column'>\r\n                <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>DeviceId:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{deviceId}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newdeviceid' type=\"text\" onChange={(e) => setNewDeviceId(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-Label'>Eniris pass:</div>\r\n                        <div className='UserDisplay-Container-Column-Items'>\r\n                            <div className='UserDisplay-Container-Column-Item-ScrollValue'>\r\n                                <div>{EnirisPasswordNotHashed}</div>\r\n                            </div>\r\n                            <div className='UserDisplay-Container-Column-Input-Field-Container'>\r\n                                <input className='UserDisplay-Input-Field' name='newenirispassword' type=\"text\" onChange={(e) => setNewEnirisPassword(e.target.value)}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='UserDisplay-Container-Column-Item'>\r\n                        <div className='UserDisplay-Container-Column-Item-button-container'><button type=\"submit\" className='UserDisplay-Container-Column-Item-button'>Submit</button></div>\r\n                        \r\n                    </div>\r\n                    {passwordresetFailed ? <div className='UserDisplay-errorText'>Password reset failed!</div> : <></>}\r\n                    {passwordresetSuccess ? <div className='UserDisplay-successText'>Password reset!</div> : <></>}\r\n                    {Error ? <div className='UserDisplay-errorText'>Error see log!</div> : <></>}\r\n                    {nothingFilledError ? <div className='UserDisplay-errorText'>Nothing filled in!</div> : <></>} \r\n                    {success ? <div className='UserDisplay-successText'>Successfully changed!</div> : <></>}\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default UserDisplay;",{"ruleId":"169","severity":1,"message":"170","line":3,"column":8,"nodeType":"171","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"169","severity":1,"message":"173","line":4,"column":8,"nodeType":"171","messageId":"172","endLine":4,"endColumn":12},{"ruleId":"169","severity":1,"message":"174","line":6,"column":25,"nodeType":"171","messageId":"172","endLine":6,"endColumn":31},{"ruleId":"169","severity":1,"message":"175","line":12,"column":11,"nodeType":"171","messageId":"172","endLine":12,"endColumn":25},{"ruleId":"169","severity":1,"message":"176","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":16},{"ruleId":"169","severity":1,"message":"177","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":20},{"ruleId":"169","severity":1,"message":"178","line":8,"column":9,"nodeType":"171","messageId":"172","endLine":8,"endColumn":13},{"ruleId":"179","severity":1,"message":"180","line":56,"column":8,"nodeType":"181","endLine":56,"endColumn":10,"suggestions":"182"},{"ruleId":"169","severity":1,"message":"183","line":2,"column":8,"nodeType":"171","messageId":"172","endLine":2,"endColumn":12},{"ruleId":"169","severity":1,"message":"177","line":4,"column":8,"nodeType":"171","messageId":"172","endLine":4,"endColumn":20},{"ruleId":"179","severity":1,"message":"184","line":64,"column":8,"nodeType":"181","endLine":64,"endColumn":10,"suggestions":"185"},{"ruleId":"179","severity":1,"message":"186","line":88,"column":8,"nodeType":"181","endLine":88,"endColumn":10,"suggestions":"187"},{"ruleId":"179","severity":1,"message":"188","line":112,"column":8,"nodeType":"181","endLine":112,"endColumn":10,"suggestions":"189"},{"ruleId":"169","severity":1,"message":"190","line":140,"column":15,"nodeType":"171","messageId":"172","endLine":140,"endColumn":28},{"ruleId":"169","severity":1,"message":"191","line":1,"column":10,"nodeType":"171","messageId":"172","endLine":1,"endColumn":19},{"ruleId":"169","severity":1,"message":"192","line":2,"column":10,"nodeType":"171","messageId":"172","endLine":2,"endColumn":19},{"ruleId":"169","severity":1,"message":"193","line":5,"column":7,"nodeType":"171","messageId":"172","endLine":5,"endColumn":14},{"ruleId":"169","severity":1,"message":"193","line":3,"column":7,"nodeType":"171","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"169","severity":1,"message":"193","line":3,"column":7,"nodeType":"171","messageId":"172","endLine":3,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":153,"column":26,"nodeType":"196","messageId":"197","endLine":153,"endColumn":37},{"ruleId":"194","severity":1,"message":"198","line":180,"column":23,"nodeType":"196","messageId":"197","endLine":180,"endColumn":31},{"ruleId":"194","severity":1,"message":"199","line":209,"column":29,"nodeType":"196","messageId":"197","endLine":209,"endColumn":43},{"ruleId":"194","severity":1,"message":"200","line":236,"column":23,"nodeType":"196","messageId":"197","endLine":236,"endColumn":31},{"ruleId":"169","severity":1,"message":"201","line":6,"column":8,"nodeType":"171","messageId":"172","endLine":6,"endColumn":16},{"ruleId":"169","severity":1,"message":"202","line":11,"column":12,"nodeType":"171","messageId":"172","endLine":11,"endColumn":24},{"ruleId":"169","severity":1,"message":"203","line":14,"column":5,"nodeType":"171","messageId":"172","endLine":14,"endColumn":17},{"ruleId":"169","severity":1,"message":"204","line":26,"column":12,"nodeType":"171","messageId":"172","endLine":26,"endColumn":23},{"ruleId":"169","severity":1,"message":"205","line":26,"column":25,"nodeType":"171","messageId":"172","endLine":26,"endColumn":39},{"ruleId":"169","severity":1,"message":"206","line":27,"column":12,"nodeType":"171","messageId":"172","endLine":27,"endColumn":24},{"ruleId":"169","severity":1,"message":"207","line":27,"column":26,"nodeType":"171","messageId":"172","endLine":27,"endColumn":41},{"ruleId":"208","severity":1,"message":"209","line":41,"column":17,"nodeType":"210","messageId":"211","endLine":111,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":43,"column":25,"nodeType":"210","messageId":"211","endLine":58,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":61,"column":25,"nodeType":"210","messageId":"211","endLine":72,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":75,"column":25,"nodeType":"210","messageId":"211","endLine":109,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":83,"column":33,"nodeType":"210","messageId":"211","endLine":107,"endColumn":34},{"ruleId":"208","severity":1,"message":"209","line":114,"column":17,"nodeType":"210","messageId":"211","endLine":146,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":116,"column":25,"nodeType":"210","messageId":"211","endLine":124,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":127,"column":25,"nodeType":"210","messageId":"211","endLine":144,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":150,"column":17,"nodeType":"210","messageId":"211","endLine":234,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":152,"column":25,"nodeType":"210","messageId":"211","endLine":177,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":158,"column":33,"nodeType":"210","messageId":"211","endLine":175,"endColumn":34},{"ruleId":"208","severity":1,"message":"209","line":180,"column":25,"nodeType":"210","messageId":"211","endLine":232,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":189,"column":33,"nodeType":"210","messageId":"211","endLine":230,"endColumn":34},{"ruleId":"208","severity":1,"message":"209","line":205,"column":41,"nodeType":"210","messageId":"211","endLine":228,"endColumn":42},{"ruleId":"179","severity":1,"message":"212","line":241,"column":8,"nodeType":"181","endLine":241,"endColumn":32,"suggestions":"213"},{"ruleId":"169","severity":1,"message":"214","line":8,"column":8,"nodeType":"171","messageId":"172","endLine":8,"endColumn":20},{"ruleId":"169","severity":1,"message":"215","line":13,"column":27,"nodeType":"171","messageId":"172","endLine":13,"endColumn":43},{"ruleId":"216","severity":1,"message":"217","line":27,"column":45,"nodeType":"218","messageId":"197","endLine":27,"endColumn":47},{"ruleId":"216","severity":1,"message":"217","line":29,"column":52,"nodeType":"218","messageId":"197","endLine":29,"endColumn":54},{"ruleId":"216","severity":1,"message":"217","line":57,"column":36,"nodeType":"218","messageId":"197","endLine":57,"endColumn":38},{"ruleId":"216","severity":1,"message":"217","line":59,"column":43,"nodeType":"218","messageId":"197","endLine":59,"endColumn":45},{"ruleId":"169","severity":1,"message":"219","line":89,"column":19,"nodeType":"171","messageId":"172","endLine":89,"endColumn":27},{"ruleId":"220","severity":1,"message":"221","line":128,"column":21,"nodeType":"222","endLine":128,"endColumn":100},{"ruleId":"220","severity":1,"message":"221","line":129,"column":21,"nodeType":"222","endLine":129,"endColumn":93},{"ruleId":"169","severity":1,"message":"177","line":7,"column":8,"nodeType":"171","messageId":"172","endLine":7,"endColumn":20},{"ruleId":"216","severity":1,"message":"223","line":26,"column":41,"nodeType":"218","messageId":"197","endLine":26,"endColumn":43},{"ruleId":"179","severity":1,"message":"224","line":42,"column":8,"nodeType":"181","endLine":42,"endColumn":24,"suggestions":"225"},{"ruleId":"216","severity":1,"message":"223","line":40,"column":36,"nodeType":"218","messageId":"197","endLine":40,"endColumn":38},{"ruleId":"169","severity":1,"message":"219","line":42,"column":27,"nodeType":"171","messageId":"172","endLine":42,"endColumn":35},{"ruleId":"216","severity":1,"message":"223","line":44,"column":33,"nodeType":"218","messageId":"197","endLine":44,"endColumn":35},{"ruleId":"169","severity":1,"message":"219","line":46,"column":27,"nodeType":"171","messageId":"172","endLine":46,"endColumn":35},{"ruleId":"216","severity":1,"message":"223","line":48,"column":39,"nodeType":"218","messageId":"197","endLine":48,"endColumn":41},{"ruleId":"169","severity":1,"message":"219","line":50,"column":27,"nodeType":"171","messageId":"172","endLine":50,"endColumn":35},{"ruleId":"169","severity":1,"message":"219","line":78,"column":19,"nodeType":"171","messageId":"172","endLine":78,"endColumn":27},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'Body' is defined but never used.","'Router' is defined but never used.","'toggleDarkMode' is assigned a value but never used.","'infoIcon' is defined but never used.","'Authenticate' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUsername'. Either include it or remove the dependency array.","ArrayExpression",["226"],"'Auth' is defined but never used.","React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetCurrentFlowData'. Either include them or remove the dependency array.",["227"],"React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetQuickViewData'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'GetAccessToken' and 'GetBarChartData'. Either include them or remove the dependency array.",["229"],"'FoundFlowData' is assigned a value but never used.","'useEffect' is defined but never used.","'usePython' is defined but never used.","'baseURL' is assigned a value but never used.","no-dupe-keys","Duplicate key 'enirisEmail'.","ObjectExpression","unexpected","Duplicate key 'deviceid'.","Duplicate key 'enirisPassword'.","Duplicate key 'password'.","'CashIcon' is defined but never used.","'foundDevices' is assigned a value but never used.","'ReferenceDot' is defined but never used.","'legendStyle' is assigned a value but never used.","'setLegendStyle' is assigned a value but never used.","'activeHeader' is assigned a value but never used.","'setActiveHeader' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'BATTERYW' and 'SOLARW'. Either include them or remove the dependency array.",["230"],"'Coverdisplay' is defined but never used.","'setErrorMessages' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'response' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'navigate' and 'userApi'. Either include them or remove the dependency array.",["231"],{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [getUsername]",{"range":"244","text":"245"},"Update the dependencies array to be: [GetAccessToken, GetCurrentFlowData]",{"range":"246","text":"247"},"Update the dependencies array to be: [GetAccessToken, GetQuickViewData]",{"range":"248","text":"249"},"Update the dependencies array to be: [GetAccessToken, GetBarChartData]",{"range":"250","text":"251"},"Update the dependencies array to be: [BATTERYP, BATTERYW, GRIDW, HOMEW, SOLARW]",{"range":"252","text":"253"},"Update the dependencies array to be: [navigate, reloadUserList, userApi]",{"range":"254","text":"255"},[1674,1676],"[getUsername]",[2101,2103],"[GetAccessToken, GetCurrentFlowData]",[2728,2730],"[GetAccessToken, GetQuickViewData]",[3346,3348],"[GetAccessToken, GetBarChartData]",[11291,11315],"[BATTERYP, BATTERYW, GRIDW, HOMEW, SOLARW]",[1233,1249],"[navigate, reloadUserList, userApi]"]