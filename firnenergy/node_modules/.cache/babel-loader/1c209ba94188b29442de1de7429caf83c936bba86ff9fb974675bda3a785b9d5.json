{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = \"https://firnenergybackend.onrender.com/api/users/\";\nconst User = () => {\n  const login = async (email, password, remember) => {\n    let data = JSON.stringify({\n      \"email\": email,\n      \"password\": password,\n      \"remember\": remember\n    });\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/login`,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(config.url, data, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const GetUsername = async token => {\n    let data = JSON.stringify({});\n    let config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/info`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.get(config.url, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const GetAccessToken = async token => {\n    let data = JSON.stringify({});\n    let config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/AccessToken`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.get(config.url, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const register = async user => {\n    let data = JSON.stringify({\n      \"email\": user.email,\n      \"password\": user.password,\n      \"phonenumber\": user.phonenumber,\n      \"city\": user.city,\n      \"street\": user.street,\n      \"housenumber\": user.housenumber,\n      \"postcode\": user.postcode,\n      \"role\": \"USER\",\n      \"deviceid\": \"\"\n    });\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/add`,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(config.url, data, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const GetUserData = async token => {\n    let data = JSON.stringify({});\n    let config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/users`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.get(config.url, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const changeEnirisEmail = async (token, email, enirisEmail) => {\n    let data = JSON.stringify({\n      email: email,\n      enirisEmail,\n      enirisEmail\n    });\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/change/enirisEmail`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(config.url, data, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  return {\n    login,\n    GetUsername,\n    GetAccessToken,\n    register,\n    GetUserData,\n    changeEnirisEmail\n  };\n};\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["axios","baseURL","User","login","email","password","remember","data","JSON","stringify","config","method","maxBodyLength","Infinity","url","headers","response","post","error","console","log","GetUsername","token","Authorization","get","GetAccessToken","register","user","phonenumber","city","street","housenumber","postcode","GetUserData","changeEnirisEmail","enirisEmail","_c","$RefreshReg$"],"sources":["C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/src/api/user.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL = \"https://firnenergybackend.onrender.com/api/users/\";\r\n\r\nconst User = () => {\r\n\r\n    const login = async (email, password, remember) => {\r\n\r\n        let data = JSON.stringify({\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"remember\": remember,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/login`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const GetUsername = async (token) => {\r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/info`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const GetAccessToken = async (token) => {    \r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/AccessToken`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const register = async (user) => {\r\n\r\n        let data = JSON.stringify({\r\n            \"email\": user.email,\r\n            \"password\": user.password,\r\n            \"phonenumber\": user.phonenumber,\r\n            \"city\": user.city,\r\n            \"street\": user.street,\r\n            \"housenumber\": user.housenumber,\r\n            \"postcode\": user.postcode,\r\n            \"role\": \"USER\",\r\n            \"deviceid\": \"\",\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/add`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    const GetUserData = async (token) => {    \r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/users`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const changeEnirisEmail = async (token, email, enirisEmail) => {\r\n\r\n        let data = JSON.stringify({\r\n            email: email,\r\n            enirisEmail, enirisEmail,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/change/enirisEmail`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        login,\r\n        GetUsername,\r\n        GetAccessToken,\r\n        register,\r\n        GetUserData,\r\n        changeEnirisEmail,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default User;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}