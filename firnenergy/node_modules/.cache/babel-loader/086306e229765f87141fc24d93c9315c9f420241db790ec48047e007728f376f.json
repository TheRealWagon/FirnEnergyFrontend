{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import axios from'axios';var baseURL=\"https://authentication.eniris.be/\";var Measurement=function Measurement(){//currentFlowData\nvar FlowData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(accessToken,date){var day,month,year,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:day=date.getDate()+4;month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}data=JSON.stringify([{\"type\":\"previous\",\"time\":[\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T00:00:00Z\")],\"retentionPolicy\":\"rp_one_m\",\"fields\":[\"actualPowerTot_W\",\"childrenConsumedPower_W\",\"childrenProducedPower_W\",\"childrenStoragePower_W\"],\"measurement\":\"submeteringMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context.prev=8;_context.next=11;return axios.post(corsProxy+config.url,data,config);case 11:response=_context.sent;return _context.abrupt(\"return\",response.data);case 15:_context.prev=15;_context.t0=_context[\"catch\"](8);console.log(_context.t0);throw _context.t0;case 19:case\"end\":return _context.stop();}},_callee,null,[[8,15]]);}));return function FlowData(_x,_x2){return _ref.apply(this,arguments);};}();//QuickView Yield & Consumption\nvar QuickViewData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"operator\":\"sum\",\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"sum_childrenProducedEnergyDeltaTot_Wh\",//yield today\n\"sum_childrenConsumedEnergyDeltaTot_Wh\"//Consumption today\n],\"measurement\":\"submeteringMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);//importedEnergyDeltaTot_Wh\ncorsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context2.prev=15;_context2.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context2.sent;return _context2.abrupt(\"return\",response.data);case 22:_context2.prev=22;_context2.t0=_context2[\"catch\"](15);console.log(_context2.t0);throw _context2.t0;case 26:case\"end\":return _context2.stop();}},_callee2,null,[[15,22]]);}));return function QuickViewData(_x3,_x4){return _ref2.apply(this,arguments);};}();//BarChart data Import / Production / Consumption / Self-Consumption\nvar BarChartData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response,temp,ProductionArray,ConsumptionArray,ConsumedFromPvArray,ImportFromGrid,result,index,element,_index;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"sum_childrenProducedEnergyDeltaTot_Wh\",//Solar Production\n\"sum_importedEnergyDeltaTot_Wh\",//Import from grid\n\"sum_childrenConsumedEnergyDeltaTot_Wh\",//Consumption\n\"sum_autoconsumedEnergyDeltaTot_Wh\"//Consumed from Solar Production\n],\"measurement\":\"submeteringMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context3.prev=15;_context3.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context3.sent;temp=response['data'][0]['series'][0]['values'];ProductionArray=[];ConsumptionArray=[];ConsumedFromPvArray=[];ImportFromGrid=[];result=[];for(index=0;index<Object.keys(temp).length;index++){element=temp[index];ProductionArray[index]=[element[0],element[1]];ImportFromGrid[index]=[element[0],element[2]];ConsumptionArray[index]=[element[0],element[3]];ConsumedFromPvArray[index]=[element[0],element[4]];}ProductionArray=Sum_Per_Hour(ProductionArray);ImportFromGrid=Sum_Per_Hour(ImportFromGrid);ConsumptionArray=Sum_Per_Hour(ConsumptionArray);ConsumedFromPvArray=Sum_Per_Hour(ConsumedFromPvArray);for(_index=0;_index<Object.keys(ProductionArray).length;_index++){result[_index]={\"Name\":\"\".concat(_index,\":00:00\"),\"Solar production\":(ProductionArray[_index]/1000).toFixed(2),\"Import from grid\":(ImportFromGrid[_index]/1000).toFixed(2),\"Consumption\":(ConsumptionArray[_index]/1000).toFixed(2),\"Consumed from PV\":(ConsumedFromPvArray[_index]/1000).toFixed(2)};}return _context3.abrupt(\"return\",result);case 34:_context3.prev=34;_context3.t0=_context3[\"catch\"](15);console.log(_context3.t0);throw _context3.t0;case 38:case\"end\":return _context3.stop();}},_callee3,null,[[15,34]]);}));return function BarChartData(_x5,_x6){return _ref3.apply(this,arguments);};}();//QuickView Earnings per uur\nvar QuickViewDataRevenue=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response,result,PriceData,Revenue,index,multiplication;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"sum_exportedEnergyDeltaTot_Wh\"//Teruglevering net\n],\"measurement\":\"submeteringMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context4.prev=15;_context4.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context4.sent;//   console.log(response['data'][0]['series'][0]['values'])\nresult=Sum_Per_Hour(response['data'][0]['series'][0]['values']);_context4.next=22;return QuickViewDataPrice(accessToken,date);case 22:PriceData=_context4.sent;Revenue=[];// let Revenue = 0;\nfor(index=0;index<Object.keys(result).length;index++){multiplication=result[index]/1000*PriceData[index][1];Revenue[index]=multiplication;}return _context4.abrupt(\"return\",Revenue);case 28:_context4.prev=28;_context4.t0=_context4[\"catch\"](15);console.log(_context4.t0);throw _context4.t0;case 32:case\"end\":return _context4.stop();}},_callee4,null,[[15,28]]);}));return function QuickViewDataRevenue(_x7,_x8){return _ref4.apply(this,arguments);};}();var getBuyPrice=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"buyPrice_perkWh\"//aankoop prijs\n],\"measurement\":\"planning\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context5.prev=15;_context5.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context5.sent;return _context5.abrupt(\"return\",response['data'][0]['series'][0]['values']);case 22:_context5.prev=22;_context5.t0=_context5[\"catch\"](15);console.log(_context5.t0);throw _context5.t0;case 26:case\"end\":return _context5.stop();}},_callee5,null,[[15,22]]);}));return function getBuyPrice(_x9,_x10){return _ref5.apply(this,arguments);};}();//QuickView Earnings Hourly price\nvar QuickViewDataPrice=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"sellPrice_perkWh\"//verkoop prijs\n],\"measurement\":\"planning\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context6.prev=15;_context6.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context6.sent;return _context6.abrupt(\"return\",response['data'][0]['series'][0]['values']);case 22:_context6.prev=22;_context6.t0=_context6[\"catch\"](15);console.log(_context6.t0);throw _context6.t0;case 26:case\"end\":return _context6.stop();}},_callee6,null,[[15,22]]);}));return function QuickViewDataPrice(_x11,_x12){return _ref6.apply(this,arguments);};}();//BarChartRevenue\nvar BarChartRevenueData=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,BuyPricePerHourContainer,BuyPricePerHour,variablePricePerHour,EarningsPerHour,ImportAndConsumptionContainer,ImportAndConsumption,ImportPerHour,ConsumptionPerHour,index,element,RevenuePerHour,_index2;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"buyPrice_perkWh\"//aankoop prijs\n],\"measurement\":\"planning\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context7.prev=15;_context7.next=18;return axios.post(corsProxy+config.url,data,config);case 18:BuyPricePerHourContainer=_context7.sent;BuyPricePerHour=BuyPricePerHourContainer['data'][0]['series'][0]['values'];variablePricePerHour=0.26;_context7.next=23;return QuickViewDataRevenue(accessToken,date);case 23:EarningsPerHour=_context7.sent;_context7.next=26;return getImportAndConsumption(accessToken,date);case 26:ImportAndConsumptionContainer=_context7.sent;ImportAndConsumption=ImportAndConsumptionContainer['data'][0]['series'][0]['values'];ImportPerHour=[];ConsumptionPerHour=[];for(index=0;index<Object.keys(ImportAndConsumption).length;index++){element=ImportAndConsumption[index];ImportPerHour[index]=[element[0],element[1]/1000];ConsumptionPerHour[index]=[element[0],element[2]/1000];}ImportPerHour=Sum_Per_Hour(ImportPerHour);ConsumptionPerHour=Sum_Per_Hour(ConsumptionPerHour);RevenuePerHour=[];for(_index2=0;_index2<Object.keys(ConsumptionPerHour).length;_index2++){RevenuePerHour[_index2]={\"Name\":\"\".concat(_index2,\":00:00\"),\"Fed to grid\":EarningsPerHour[_index2].toFixed(2),\"FirnController Profit\":(ConsumptionPerHour[_index2]*variablePricePerHour-ImportPerHour[_index2]*BuyPricePerHour[_index2][1]).toFixed(2)};}return _context7.abrupt(\"return\",RevenuePerHour);case 38:_context7.prev=38;_context7.t0=_context7[\"catch\"](15);console.log(_context7.t0);throw _context7.t0;case 42:case\"end\":return _context7.stop();}},_callee7,null,[[15,38]]);}));return function BarChartRevenueData(_x13,_x14){return _ref7.apply(this,arguments);};}();//Battery Percentage\nvar BatteryPercentage=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(accessToken,date){var day,month,year,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:day=date.getDate()+4;month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}data=JSON.stringify([{\"type\":\"previous\",\"time\":[\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T01:00:00Z\")],\"retentionPolicy\":\"rp_one_m\",\"fields\":[\"stateOfCharge_frac\"],\"measurement\":\"batteryMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context8.prev=8;_context8.next=11;return axios.post(corsProxy+config.url,data,config);case 11:response=_context8.sent;return _context8.abrupt(\"return\",response.data);case 15:_context8.prev=15;_context8.t0=_context8[\"catch\"](8);console.log(_context8.t0);throw _context8.t0;case 19:case\"end\":return _context8.stop();}},_callee8,null,[[8,15]]);}));return function BatteryPercentage(_x15,_x16){return _ref8.apply(this,arguments);};}();var BatteryPercentageRange=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response,result,endArray,index,time,hour;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_one_m\",\"fields\":[\"stateOfCharge_frac\"],\"measurement\":\"batteryMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context9.prev=15;_context9.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context9.sent;result=response.data[0]['series'][0]['values'];endArray=[];for(index=0;index<Object.keys(result).length;index++){if(result[index][1]>=0.2){result[index][1]=Math.floor(result[index][1]*100);}else{result[index][1]=20;}time=result[index][0].split('T')[1];time=time.split('.')[0];hour=time.split(':')[0];hour=parseInt(hour);if(hour>=22){hour=hour-22;}else{hour=hour+2;}time=\"\".concat(hour,\":\").concat(time.split(':')[1],\":\").concat(time.split(':')[2]);endArray[index]={\"Name\":\"\".concat(time),\"Battery percentage\":result[index][1]};}return _context9.abrupt(\"return\",endArray);case 25:_context9.prev=25;_context9.t0=_context9[\"catch\"](15);console.log(_context9.t0);throw _context9.t0;case 29:case\"end\":return _context9.stop();}},_callee9,null,[[15,25]]);}));return function BatteryPercentageRange(_x17,_x18){return _ref9.apply(this,arguments);};}();// Function to sum up all data into 1 hour segments\nvar Sum_Per_Hour=function Sum_Per_Hour(data){var checkNumber=22;var sum=0;var result=[];var plan=0;for(var index=0;index<Object.keys(data).length;index++){var element=data[index];var time=element[0].split('T')[1];var timecheck=parseInt(time.split(':')[0]);if(checkNumber===24){checkNumber=0;}if(timecheck===checkNumber){sum=sum+element[1];}else{result[plan]=sum;checkNumber++;plan++;index--;sum=0;}if(index+1===Object.keys(data).length){result[plan]=sum;checkNumber++;sum=0;}}return result;};var getImportAndConsumption=/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(accessToken,date){var day,month,year,yesterday,yesterdayDay,yesterdayMonth,yesterdayYear,data,corsProxy,config,response;return _regeneratorRuntime().wrap(function _callee10$(_context10){while(1)switch(_context10.prev=_context10.next){case 0:day=date.getDate();month=date.getMonth()+1;year=date.getFullYear();if(day<10){day=\"0\".concat(day);}if(month<10){month=\"0\".concat(month);}yesterday=new Date(date);yesterday.setDate(yesterday.getDate()-1);yesterdayDay=yesterday.getDate();yesterdayMonth=yesterday.getMonth()+1;yesterdayYear=yesterday.getFullYear();if(yesterdayDay<10){yesterdayDay=\"0\".concat(yesterdayDay);}if(yesterdayMonth<10){yesterdayMonth=\"0\".concat(yesterdayMonth);}data=JSON.stringify([{\"type\":\"range\",\"time\":[\"\".concat(yesterdayYear,\"-\").concat(yesterdayMonth,\"-\").concat(yesterdayDay,\"T22:00:00Z\"),\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\"T21:59:59Z\")],\"retentionPolicy\":\"rp_ten_m\",\"fields\":[\"sum_importedEnergyDeltaTot_Wh\",//Import from grid\n\"sum_childrenConsumedEnergyDeltaTot_Wh\"//Consumption\n],\"measurement\":\"submeteringMetrics\",\"conditions\":{\"nodeId\":\"dIViYcFwFkSSGRZV-Inepro-3-3\"}}]);corsProxy='https://thingproxy.freeboard.io/fetch/';config={method:'post',maxBodyLength:Infinity,url:'https://middleware-new.eniris.be/v1/influx/get-measurement-data',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)},data:data};_context10.prev=15;_context10.next=18;return axios.post(corsProxy+config.url,data,config);case 18:response=_context10.sent;return _context10.abrupt(\"return\",response);case 22:_context10.prev=22;_context10.t0=_context10[\"catch\"](15);console.log(_context10.t0);throw _context10.t0;case 26:case\"end\":return _context10.stop();}},_callee10,null,[[15,22]]);}));return function getImportAndConsumption(_x19,_x20){return _ref10.apply(this,arguments);};}();return{FlowData:FlowData,BatteryPercentage:BatteryPercentage,QuickViewDataRevenue:QuickViewDataRevenue,QuickViewData:QuickViewData,BarChartData:BarChartData,BatteryPercentageRange:BatteryPercentageRange,getBuyPrice:getBuyPrice,getImportAndConsumption:getImportAndConsumption,BarChartRevenueData:BarChartRevenueData};};export default Measurement;","map":{"version":3,"names":["axios","baseURL","Measurement","FlowData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","accessToken","date","day","month","year","data","corsProxy","config","response","wrap","_callee$","_context","prev","next","getDate","getMonth","getFullYear","concat","JSON","stringify","method","maxBodyLength","Infinity","url","headers","post","sent","abrupt","t0","console","log","stop","_x","_x2","apply","arguments","QuickViewData","_ref2","_callee2","yesterday","yesterdayDay","yesterdayMonth","yesterdayYear","_callee2$","_context2","Date","setDate","_x3","_x4","BarChartData","_ref3","_callee3","temp","ProductionArray","ConsumptionArray","ConsumedFromPvArray","ImportFromGrid","result","index","element","_index","_callee3$","_context3","Object","keys","length","Sum_Per_Hour","toFixed","_x5","_x6","QuickViewDataRevenue","_ref4","_callee4","PriceData","Revenue","multiplication","_callee4$","_context4","QuickViewDataPrice","_x7","_x8","getBuyPrice","_ref5","_callee5","_callee5$","_context5","_x9","_x10","_ref6","_callee6","_callee6$","_context6","_x11","_x12","BarChartRevenueData","_ref7","_callee7","BuyPricePerHourContainer","BuyPricePerHour","variablePricePerHour","EarningsPerHour","ImportAndConsumptionContainer","ImportAndConsumption","ImportPerHour","ConsumptionPerHour","RevenuePerHour","_index2","_callee7$","_context7","getImportAndConsumption","_x13","_x14","BatteryPercentage","_ref8","_callee8","_callee8$","_context8","_x15","_x16","BatteryPercentageRange","_ref9","_callee9","endArray","time","hour","_callee9$","_context9","Math","floor","split","parseInt","_x17","_x18","checkNumber","sum","plan","timecheck","_ref10","_callee10","_callee10$","_context10","_x19","_x20"],"sources":["C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/src/api/measurements.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = \"https://authentication.eniris.be/\";\r\n\r\nconst Measurement = () => {\r\n\r\n    //currentFlowData\r\n    const FlowData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T00:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"actualPowerTot_W\",\r\n                    \"childrenConsumedPower_W\",\r\n                    \"childrenProducedPower_W\",\r\n                    \"childrenStoragePower_W\"\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    //QuickView Yield & Consumption\r\n    const QuickViewData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"operator\": \"sum\",\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\", //yield today\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\" //Consumption today\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n        //importedEnergyDeltaTot_Wh\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChart data Import / Production / Consumption / Self-Consumption\r\n    const BarChartData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\",    //Solar Production\r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\",    //Consumption\r\n                    \"sum_autoconsumedEnergyDeltaTot_Wh\"         //Consumed from Solar Production\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const temp = response['data'][0]['series'][0]['values'];\r\n            let ProductionArray = []\r\n            let ConsumptionArray = []\r\n            let ConsumedFromPvArray = []\r\n            let ImportFromGrid = []\r\n            const result = []\r\n            for (let index = 0; index < Object.keys(temp).length; index++) {\r\n                const element = temp[index];\r\n                ProductionArray[index] = [element[0], element[1]];\r\n                ImportFromGrid[index] = [element[0], element[2]];\r\n                ConsumptionArray[index] = [element[0], element[3]];\r\n                ConsumedFromPvArray[index] = [element[0], element[4]];\r\n            }\r\n            ProductionArray = Sum_Per_Hour(ProductionArray)\r\n            ImportFromGrid = Sum_Per_Hour(ImportFromGrid)\r\n            ConsumptionArray = Sum_Per_Hour(ConsumptionArray)\r\n            ConsumedFromPvArray = Sum_Per_Hour(ConsumedFromPvArray)\r\n            for (let index = 0; index < Object.keys(ProductionArray).length; index++) {\r\n                result[index] = { \"Name\": `${index}:00:00`, \"Solar production\": (ProductionArray[index] / 1000).toFixed(2), \"Import from grid\": (ImportFromGrid[index] / 1000).toFixed(2), \"Consumption\": (ConsumptionArray[index] / 1000).toFixed(2), \"Consumed from PV\": (ConsumedFromPvArray[index] / 1000).toFixed(2) }\r\n            }\r\n            return result; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //QuickView Earnings per uur\r\n    const QuickViewDataRevenue = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_exportedEnergyDeltaTot_Wh\" //Teruglevering net\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   console.log(response['data'][0]['series'][0]['values'])\r\n            const result = Sum_Per_Hour(response['data'][0]['series'][0]['values']);\r\n            const PriceData = await QuickViewDataPrice(accessToken, date);\r\n            let Revenue = [];\r\n            // let Revenue = 0;\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                const multiplication = (result[index] / 1000) * PriceData[index][1];\r\n                Revenue[index] = multiplication;\r\n            }\r\n            return Revenue;\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    \r\n    const getBuyPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n    //QuickView Earnings Hourly price\r\n    const QuickViewDataPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sellPrice_perkWh\" //verkoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChartRevenue\r\n    const BarChartRevenueData = async (accessToken, date) => {\r\n        \r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            \r\n            const BuyPricePerHourContainer = await axios.post(corsProxy + config.url, data, config);\r\n            const BuyPricePerHour = BuyPricePerHourContainer['data'][0]['series'][0]['values'];\r\n            const variablePricePerHour = 0.26\r\n            const EarningsPerHour = await QuickViewDataRevenue(accessToken, date);\r\n            const ImportAndConsumptionContainer = await getImportAndConsumption(accessToken, date);\r\n            const ImportAndConsumption = ImportAndConsumptionContainer['data'][0]['series'][0]['values'];\r\n\r\n            let ImportPerHour = [];\r\n            let ConsumptionPerHour = [];\r\n\r\n            for (let index = 0; index < Object.keys(ImportAndConsumption).length; index++) {\r\n                const element = ImportAndConsumption[index];\r\n                ImportPerHour[index] = [element[0], element[1] / 1000];\r\n                ConsumptionPerHour[index] = [element[0], element[2] / 1000];\r\n            }\r\n\r\n            ImportPerHour = Sum_Per_Hour(ImportPerHour);\r\n            ConsumptionPerHour = Sum_Per_Hour(ConsumptionPerHour);\r\n\r\n            const RevenuePerHour = []\r\n\r\n            for (let index = 0; index < Object.keys(ConsumptionPerHour).length; index++) {\r\n                RevenuePerHour[index] = {\"Name\": `${index}:00:00`, \"Fed to grid\": (EarningsPerHour[index]).toFixed(2), \"FirnController Profit\": ((ConsumptionPerHour[index] * variablePricePerHour) - (ImportPerHour[index] * BuyPricePerHour[index][1])).toFixed(2)};\r\n            }\r\n\r\n            return RevenuePerHour;\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n\r\n    //Battery Percentage\r\n    const BatteryPercentage = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T01:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const BatteryPercentageRange = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const result = response.data[0]['series'][0]['values']\r\n            const endArray = []\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                if (result[index][1] >= 0.2) {\r\n                    result[index][1] = Math.floor(result[index][1] * 100)\r\n                } else {\r\n                    result[index][1] = 20\r\n                }\r\n                let time = result[index][0].split('T')[1]\r\n                time = time.split('.')[0];\r\n                let hour = time.split(':')[0]\r\n                hour = parseInt(hour)\r\n                if (hour >= 22) {\r\n                    hour = hour - 22\r\n                } else {\r\n                    hour = hour + 2\r\n                }\r\n                time = `${hour}:${time.split(':')[1]}:${time.split(':')[2]}`\r\n                endArray[index] = { \"Name\": `${time}`, \"Battery percentage\": result[index][1] };\r\n            }\r\n            return endArray; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    // Function to sum up all data into 1 hour segments\r\n    const Sum_Per_Hour = (data) => {\r\n\r\n        let checkNumber = 22;\r\n        let sum = 0;\r\n        let result = [];\r\n        let plan = 0\r\n        for (let index = 0; index < Object.keys(data).length; index++) {\r\n            const element = data[index];\r\n            const time = element[0].split('T')[1]\r\n\r\n            const timecheck = parseInt(time.split(':')[0]);\r\n            if (checkNumber === 24) {\r\n                checkNumber = 0;\r\n            }\r\n            if (timecheck === checkNumber) {\r\n                sum = sum + element[1];\r\n            } else {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                plan++;\r\n                index--;\r\n                sum = 0;\r\n            }\r\n            if (index + 1 === Object.keys(data).length) {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                sum = 0;\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    const getImportAndConsumption = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [   \r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\"    //Consumption\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    return {\r\n        FlowData,\r\n        BatteryPercentage,\r\n        QuickViewDataRevenue,\r\n        QuickViewData,\r\n        BarChartData,\r\n        BatteryPercentageRange,\r\n        getBuyPrice,\r\n        getImportAndConsumption,\r\n        BarChartRevenueData,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Measurement;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}