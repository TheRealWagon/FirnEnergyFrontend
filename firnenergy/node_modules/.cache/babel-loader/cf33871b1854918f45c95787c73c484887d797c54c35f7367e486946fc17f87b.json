{"ast":null,"code":"import axios from 'axios';\nconst baseURL = \"https://authentication.eniris.be/\";\nconst Measurement = () => {\n  //currentFlowData\n  const FlowData = async (accessToken, date) => {\n    let day = date.getDate() + 4;\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"previous\",\n      \"time\": [`${year}-${month}-${day}T00:00:00Z`],\n      \"retentionPolicy\": \"rp_one_m\",\n      \"fields\": [\"actualPowerTot_W\", \"childrenConsumedPower_W\", \"childrenProducedPower_W\", \"childrenStoragePower_W\"],\n      \"measurement\": \"submeteringMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  //QuickView Yield & Consumption\n  const QuickViewData = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"operator\": \"sum\",\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"sum_childrenProducedEnergyDeltaTot_Wh\",\n      //yield today\n      \"sum_childrenConsumedEnergyDeltaTot_Wh\" //Consumption today\n      ],\n\n      \"measurement\": \"submeteringMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    //importedEnergyDeltaTot_Wh\n\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  //BarChart data Import / Production / Consumption / Self-Consumption\n  const BarChartData = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"sum_childrenProducedEnergyDeltaTot_Wh\",\n      //Solar Production\n      \"sum_importedEnergyDeltaTot_Wh\",\n      //Import from grid\n      \"sum_childrenConsumedEnergyDeltaTot_Wh\",\n      //Consumption\n      \"sum_autoconsumedEnergyDeltaTot_Wh\" //Consumed from Solar Production\n      ],\n\n      \"measurement\": \"submeteringMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      const temp = response['data'][0]['series'][0]['values'];\n      let ProductionArray = [];\n      let ConsumptionArray = [];\n      let ConsumedFromPvArray = [];\n      let ImportFromGrid = [];\n      const result = [];\n      for (let index = 0; index < Object.keys(temp).length; index++) {\n        const element = temp[index];\n        ProductionArray[index] = [element[0], element[1]];\n        ImportFromGrid[index] = [element[0], element[2]];\n        ConsumptionArray[index] = [element[0], element[3]];\n        ConsumedFromPvArray[index] = [element[0], element[4]];\n      }\n      ProductionArray = Sum_Per_Hour(ProductionArray);\n      ImportFromGrid = Sum_Per_Hour(ImportFromGrid);\n      ConsumptionArray = Sum_Per_Hour(ConsumptionArray);\n      ConsumedFromPvArray = Sum_Per_Hour(ConsumedFromPvArray);\n      for (let index = 0; index < Object.keys(ProductionArray).length; index++) {\n        result[index] = {\n          \"Name\": `${index}:00:00`,\n          \"Solar production\": (ProductionArray[index] / 1000).toFixed(2),\n          \"Import from grid\": (ImportFromGrid[index] / 1000).toFixed(2),\n          \"Consumption\": (ConsumptionArray[index] / 1000).toFixed(2),\n          \"Consumed from PV\": (ConsumedFromPvArray[index] / 1000).toFixed(2)\n        };\n      }\n      return result; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  //QuickView Earnings per uur\n  const QuickViewDataRevenue = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"sum_exportedEnergyDeltaTot_Wh\" //Teruglevering net\n      ],\n\n      \"measurement\": \"submeteringMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      //   console.log(response['data'][0]['series'][0]['values'])\n      const result = Sum_Per_Hour(response['data'][0]['series'][0]['values']);\n      const PriceData = await QuickViewDataPrice(accessToken, date);\n      let Revenue = [];\n      // let Revenue = 0;\n      for (let index = 0; index < Object.keys(result).length; index++) {\n        const multiplication = result[index] / 1000 * PriceData[index][1];\n        Revenue[index] = multiplication;\n      }\n      return Revenue;\n      //   return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const getBuyPrice = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"buyPrice_perkWh\" //aankoop prijs\n      ],\n\n      \"measurement\": \"planning\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      //   const result = Sum_Per_Hour(response)\n\n      return response['data'][0]['series'][0]['values'];\n      //   return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n  //QuickView Earnings Hourly price\n  const QuickViewDataPrice = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"sellPrice_perkWh\" //verkoop prijs\n      ],\n\n      \"measurement\": \"planning\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      //   const result = Sum_Per_Hour(response)\n      return response['data'][0]['series'][0]['values'];\n      //   return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  //BarChartRevenue\n  const BarChartRevenueData = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"buyPrice_perkWh\" //aankoop prijs\n      ],\n\n      \"measurement\": \"planning\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const BuyPricePerHourContainer = await axios.post(corsProxy + config.url, data, config);\n      const BuyPricePerHour = BuyPricePerHourContainer['data'][0]['series'][0]['values'];\n      const variablePricePerHour = 0.18;\n      const EarningsPerHour = await QuickViewDataRevenue(accessToken, date);\n      const ImportAndConsumptionContainer = await getImportAndConsumption(accessToken, date);\n      const ImportAndConsumption = ImportAndConsumptionContainer['data'][0]['series'][0]['values'];\n      let ImportPerHour = [];\n      let ConsumptionPerHour = [];\n      for (let index = 0; index < Object.keys(ImportAndConsumption).length; index++) {\n        const element = ImportAndConsumption[index];\n        ImportPerHour[index] = [element[0], element[1] / 1000];\n        ConsumptionPerHour[index] = [element[0], element[2] / 1000];\n      }\n      ImportPerHour = Sum_Per_Hour(ImportPerHour);\n      ConsumptionPerHour = Sum_Per_Hour(ConsumptionPerHour);\n      const RevenuePerHour = [];\n      for (let index = 0; index < Object.keys(ConsumptionPerHour).length; index++) {\n        RevenuePerHour[index] = {\n          \"Name\": `${index}:00:00`,\n          \"Fed to grid\": EarningsPerHour[index].toFixed(2),\n          \"FirnController Profit\": (ConsumptionPerHour[index] * variablePricePerHour - ImportPerHour[index] * BuyPricePerHour[index][1]).toFixed(2)\n        };\n      }\n      return RevenuePerHour;\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  //Battery Percentage\n  const BatteryPercentage = async (accessToken, date) => {\n    let day = date.getDate() + 4;\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"previous\",\n      \"time\": [`${year}-${month}-${day}T01:00:00Z`],\n      \"retentionPolicy\": \"rp_one_m\",\n      \"fields\": [\"stateOfCharge_frac\"],\n      \"measurement\": \"batteryMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      return response.data; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const BatteryPercentageRange = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_one_m\",\n      \"fields\": [\"stateOfCharge_frac\"],\n      \"measurement\": \"batteryMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      const result = response.data[0]['series'][0]['values'];\n      const endArray = [];\n      for (let index = 0; index < Object.keys(result).length; index++) {\n        if (result[index][1] >= 0.2) {\n          result[index][1] = Math.floor(result[index][1] * 100);\n        } else {\n          result[index][1] = 20;\n        }\n        let time = result[index][0].split('T')[1];\n        time = time.split('.')[0];\n        let hour = time.split(':')[0];\n        hour = parseInt(hour);\n        if (hour >= 22) {\n          hour = hour - 22;\n        } else {\n          hour = hour + 2;\n        }\n        time = `${hour}:${time.split(':')[1]}:${time.split(':')[2]}`;\n        endArray[index] = {\n          \"Name\": `${time}`,\n          \"Battery percentage\": result[index][1]\n        };\n      }\n      return endArray; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  // Function to sum up all data into 1 hour segments\n  const Sum_Per_Hour = data => {\n    let checkNumber = 22;\n    let sum = 0;\n    let result = [];\n    let plan = 0;\n    for (let index = 0; index < Object.keys(data).length; index++) {\n      const element = data[index];\n      const time = element[0].split('T')[1];\n      const timecheck = parseInt(time.split(':')[0]);\n      if (checkNumber === 24) {\n        checkNumber = 0;\n      }\n      if (timecheck === checkNumber) {\n        sum = sum + element[1];\n      } else {\n        result[plan] = sum;\n        checkNumber++;\n        plan++;\n        index--;\n        sum = 0;\n      }\n      if (index + 1 === Object.keys(data).length) {\n        result[plan] = sum;\n        checkNumber++;\n        sum = 0;\n      }\n    }\n    return result;\n  };\n  const getImportAndConsumption = async (accessToken, date) => {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    const yesterday = new Date(date);\n    yesterday.setDate(yesterday.getDate() - 1);\n    let yesterdayDay = yesterday.getDate();\n    let yesterdayMonth = yesterday.getMonth() + 1;\n    const yesterdayYear = yesterday.getFullYear();\n    if (yesterdayDay < 10) {\n      yesterdayDay = `0${yesterdayDay}`;\n    }\n    if (yesterdayMonth < 10) {\n      yesterdayMonth = `0${yesterdayMonth}`;\n    }\n    let data = JSON.stringify([{\n      \"type\": \"range\",\n      \"time\": [`${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`, `${year}-${month}-${day}T21:59:59Z`],\n      \"retentionPolicy\": \"rp_ten_m\",\n      \"fields\": [\"sum_importedEnergyDeltaTot_Wh\",\n      //Import from grid\n      \"sum_childrenConsumedEnergyDeltaTot_Wh\" //Consumption\n      ],\n\n      \"measurement\": \"submeteringMetrics\",\n      \"conditions\": {\n        \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\n      }\n    }]);\n    const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(corsProxy + config.url, data, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  return {\n    FlowData,\n    BatteryPercentage,\n    QuickViewDataRevenue,\n    QuickViewData,\n    BarChartData,\n    BatteryPercentageRange,\n    getBuyPrice,\n    getImportAndConsumption,\n    BarChartRevenueData\n  };\n};\n_c = Measurement;\nexport default Measurement;\nvar _c;\n$RefreshReg$(_c, \"Measurement\");","map":{"version":3,"names":["axios","baseURL","Measurement","FlowData","accessToken","date","day","getDate","month","getMonth","year","getFullYear","data","JSON","stringify","corsProxy","config","method","maxBodyLength","Infinity","url","headers","response","post","error","console","log","QuickViewData","yesterday","Date","setDate","yesterdayDay","yesterdayMonth","yesterdayYear","BarChartData","temp","ProductionArray","ConsumptionArray","ConsumedFromPvArray","ImportFromGrid","result","index","Object","keys","length","element","Sum_Per_Hour","toFixed","QuickViewDataRevenue","PriceData","QuickViewDataPrice","Revenue","multiplication","getBuyPrice","BarChartRevenueData","BuyPricePerHourContainer","BuyPricePerHour","variablePricePerHour","EarningsPerHour","ImportAndConsumptionContainer","getImportAndConsumption","ImportAndConsumption","ImportPerHour","ConsumptionPerHour","RevenuePerHour","BatteryPercentage","BatteryPercentageRange","endArray","Math","floor","time","split","hour","parseInt","checkNumber","sum","plan","timecheck","_c","$RefreshReg$"],"sources":["C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/src/api/measurements.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst baseURL = \"https://authentication.eniris.be/\";\r\n\r\nconst Measurement = () => {\r\n\r\n    //currentFlowData\r\n    const FlowData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T00:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"actualPowerTot_W\",\r\n                    \"childrenConsumedPower_W\",\r\n                    \"childrenProducedPower_W\",\r\n                    \"childrenStoragePower_W\"\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    //QuickView Yield & Consumption\r\n    const QuickViewData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"operator\": \"sum\",\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\", //yield today\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\" //Consumption today\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n        //importedEnergyDeltaTot_Wh\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChart data Import / Production / Consumption / Self-Consumption\r\n    const BarChartData = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_childrenProducedEnergyDeltaTot_Wh\",    //Solar Production\r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\",    //Consumption\r\n                    \"sum_autoconsumedEnergyDeltaTot_Wh\"         //Consumed from Solar Production\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const temp = response['data'][0]['series'][0]['values'];\r\n            let ProductionArray = []\r\n            let ConsumptionArray = []\r\n            let ConsumedFromPvArray = []\r\n            let ImportFromGrid = []\r\n            const result = []\r\n            for (let index = 0; index < Object.keys(temp).length; index++) {\r\n                const element = temp[index];\r\n                ProductionArray[index] = [element[0], element[1]];\r\n                ImportFromGrid[index] = [element[0], element[2]];\r\n                ConsumptionArray[index] = [element[0], element[3]];\r\n                ConsumedFromPvArray[index] = [element[0], element[4]];\r\n            }\r\n            ProductionArray = Sum_Per_Hour(ProductionArray)\r\n            ImportFromGrid = Sum_Per_Hour(ImportFromGrid)\r\n            ConsumptionArray = Sum_Per_Hour(ConsumptionArray)\r\n            ConsumedFromPvArray = Sum_Per_Hour(ConsumedFromPvArray)\r\n            for (let index = 0; index < Object.keys(ProductionArray).length; index++) {\r\n                result[index] = { \"Name\": `${index}:00:00`, \"Solar production\": (ProductionArray[index] / 1000).toFixed(2), \"Import from grid\": (ImportFromGrid[index] / 1000).toFixed(2), \"Consumption\": (ConsumptionArray[index] / 1000).toFixed(2), \"Consumed from PV\": (ConsumedFromPvArray[index] / 1000).toFixed(2) }\r\n            }\r\n            return result; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //QuickView Earnings per uur\r\n    const QuickViewDataRevenue = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sum_exportedEnergyDeltaTot_Wh\" //Teruglevering net\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   console.log(response['data'][0]['series'][0]['values'])\r\n            const result = Sum_Per_Hour(response['data'][0]['series'][0]['values']);\r\n            const PriceData = await QuickViewDataPrice(accessToken, date);\r\n            let Revenue = [];\r\n            // let Revenue = 0;\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                const multiplication = (result[index] / 1000) * PriceData[index][1];\r\n                Revenue[index] = multiplication;\r\n            }\r\n            return Revenue;\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    \r\n    const getBuyPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n    //QuickView Earnings Hourly price\r\n    const QuickViewDataPrice = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"sellPrice_perkWh\" //verkoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            //   const result = Sum_Per_Hour(response)\r\n            return response['data'][0]['series'][0]['values'];\r\n            //   return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    //BarChartRevenue\r\n    const BarChartRevenueData = async (accessToken, date) => {\r\n        \r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [\r\n                    \"buyPrice_perkWh\" //aankoop prijs\r\n                ],\r\n                \"measurement\": \"planning\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            \r\n            const BuyPricePerHourContainer = await axios.post(corsProxy + config.url, data, config);\r\n            const BuyPricePerHour = BuyPricePerHourContainer['data'][0]['series'][0]['values'];\r\n            const variablePricePerHour = 0.18\r\n            const EarningsPerHour = await QuickViewDataRevenue(accessToken, date);\r\n            const ImportAndConsumptionContainer = await getImportAndConsumption(accessToken, date);\r\n            const ImportAndConsumption = ImportAndConsumptionContainer['data'][0]['series'][0]['values'];\r\n\r\n            let ImportPerHour = [];\r\n            let ConsumptionPerHour = [];\r\n\r\n            for (let index = 0; index < Object.keys(ImportAndConsumption).length; index++) {\r\n                const element = ImportAndConsumption[index];\r\n                ImportPerHour[index] = [element[0], element[1] / 1000];\r\n                ConsumptionPerHour[index] = [element[0], element[2] / 1000];\r\n            }\r\n\r\n            ImportPerHour = Sum_Per_Hour(ImportPerHour);\r\n            ConsumptionPerHour = Sum_Per_Hour(ConsumptionPerHour);\r\n\r\n            const RevenuePerHour = []\r\n\r\n            for (let index = 0; index < Object.keys(ConsumptionPerHour).length; index++) {\r\n                RevenuePerHour[index] = {\"Name\": `${index}:00:00`, \"Fed to grid\": (EarningsPerHour[index]).toFixed(2), \"FirnController Profit\": ((ConsumptionPerHour[index] * variablePricePerHour) - (ImportPerHour[index] * BuyPricePerHour[index][1])).toFixed(2)};\r\n            }\r\n\r\n            return RevenuePerHour;\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n\r\n    //Battery Percentage\r\n    const BatteryPercentage = async (accessToken, date) => {\r\n\r\n        let day = date.getDate() + 4;\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"previous\",\r\n                \"time\": [\r\n                    `${year}-${month}-${day}T01:00:00Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            return response.data; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const BatteryPercentageRange = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_one_m\",\r\n                \"fields\": [\r\n                    \"stateOfCharge_frac\"\r\n                ],\r\n                \"measurement\": \"batteryMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-10-GoodWe-GW10K-BT-9010KBTU225W0011-BatteryInput1\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n            const result = response.data[0]['series'][0]['values']\r\n            const endArray = []\r\n            for (let index = 0; index < Object.keys(result).length; index++) {\r\n                if (result[index][1] >= 0.2) {\r\n                    result[index][1] = Math.floor(result[index][1] * 100)\r\n                } else {\r\n                    result[index][1] = 20\r\n                }\r\n                let time = result[index][0].split('T')[1]\r\n                time = time.split('.')[0];\r\n                let hour = time.split(':')[0]\r\n                hour = parseInt(hour)\r\n                if (hour >= 22) {\r\n                    hour = hour - 22\r\n                } else {\r\n                    hour = hour + 2\r\n                }\r\n                time = `${hour}:${time.split(':')[1]}:${time.split(':')[2]}`\r\n                endArray[index] = { \"Name\": `${time}`, \"Battery percentage\": result[index][1] };\r\n            }\r\n            return endArray; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    // Function to sum up all data into 1 hour segments\r\n    const Sum_Per_Hour = (data) => {\r\n\r\n        let checkNumber = 22;\r\n        let sum = 0;\r\n        let result = [];\r\n        let plan = 0\r\n        for (let index = 0; index < Object.keys(data).length; index++) {\r\n            const element = data[index];\r\n            const time = element[0].split('T')[1]\r\n\r\n            const timecheck = parseInt(time.split(':')[0]);\r\n            if (checkNumber === 24) {\r\n                checkNumber = 0;\r\n            }\r\n            if (timecheck === checkNumber) {\r\n                sum = sum + element[1];\r\n            } else {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                plan++;\r\n                index--;\r\n                sum = 0;\r\n            }\r\n            if (index + 1 === Object.keys(data).length) {\r\n                result[plan] = sum\r\n                checkNumber++;\r\n                sum = 0;\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    const getImportAndConsumption = async (accessToken, date) => {\r\n\r\n        let day = date.getDate();\r\n        let month = date.getMonth() + 1;\r\n        const year = date.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = `0${day}`;\r\n        }\r\n        if (month < 10) {\r\n            month = `0${month}`;\r\n        }\r\n        const yesterday = new Date(date)\r\n        yesterday.setDate(yesterday.getDate() - 1)\r\n\r\n        let yesterdayDay = yesterday.getDate();\r\n        let yesterdayMonth = yesterday.getMonth() + 1;\r\n        const yesterdayYear = yesterday.getFullYear();\r\n\r\n        if (yesterdayDay < 10) {\r\n            yesterdayDay = `0${yesterdayDay}`;\r\n        }\r\n        if (yesterdayMonth < 10) {\r\n            yesterdayMonth = `0${yesterdayMonth}`;\r\n        }\r\n\r\n\r\n        let data = JSON.stringify([\r\n            {\r\n                \"type\": \"range\",\r\n                \"time\": [\r\n                    `${yesterdayYear}-${yesterdayMonth}-${yesterdayDay}T22:00:00Z`,\r\n                    `${year}-${month}-${day}T21:59:59Z`\r\n                ],\r\n                \"retentionPolicy\": \"rp_ten_m\",\r\n                \"fields\": [   \r\n                    \"sum_importedEnergyDeltaTot_Wh\",            //Import from grid\r\n                    \"sum_childrenConsumedEnergyDeltaTot_Wh\"    //Consumption\r\n                ],\r\n                \"measurement\": \"submeteringMetrics\",\r\n                \"conditions\": {\r\n                    \"nodeId\": \"dIViYcFwFkSSGRZV-Inepro-3-3\"\r\n                }\r\n            }\r\n        ]);\r\n\r\n        const corsProxy = 'https://thingproxy.freeboard.io/fetch/';\r\n\r\n        let config = {\r\n            method: 'post',\r\n            maxBodyLength: Infinity,\r\n            url: 'https://middleware-new.eniris.be/v1/influx/get-measurement-data',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${accessToken}`\r\n            },\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(corsProxy + config.url, data, config);\r\n\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n    }\r\n\r\n    return {\r\n        FlowData,\r\n        BatteryPercentage,\r\n        QuickViewDataRevenue,\r\n        QuickViewData,\r\n        BarChartData,\r\n        BatteryPercentageRange,\r\n        getBuyPrice,\r\n        getImportAndConsumption,\r\n        BarChartRevenueData,\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Measurement;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}