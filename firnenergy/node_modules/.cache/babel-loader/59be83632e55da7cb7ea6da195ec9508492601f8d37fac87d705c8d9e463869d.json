{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dirk Verdoodt\\\\Documents\\\\eniris data\\\\react website\\\\firnenergy\\\\src\\\\components\\\\body\\\\bodyContainer.jsx\",\n  _s = $RefreshSig$();\nimport './bodyContainer.css';\nimport Auth from './auth/auth';\nimport CurrentFlow from './currentFlow/currentFlow';\nimport Authenticate from \"../../api/authenticate\";\nimport Measurement from '../../api/measurements';\nimport { useEffect, useState } from 'react';\nimport Charts from './charts/charts';\nimport loaderGIF from '../../Images/firn-embleem-animation.gif';\nimport QuickView from './QuickViewDetails/QuickView';\nimport User from '../../api/user';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Body = _ref => {\n  _s();\n  let {\n    darkMode\n  } = _ref;\n  //API's\n  const userApi = User();\n  const navigate = useNavigate();\n\n  //variable state's\n  const [loading, setLoading] = useState(false);\n\n  //Data\n  // const [currentFlowData, setCurrentFlowData] = useState([]);\n  const [quickViewData, setQuickViewData] = useState();\n  const [barChartData, setBarChartData] = useState();\n  const [BatteryP, setBatteryP] = useState(0);\n\n  //CurrentflowDataStates\n  const [SolarW, setSolarW] = useState('');\n  const [BatteryW, setBatteryW] = useState('');\n  const [GridW, setGridW] = useState('');\n  const [HomeW, setHomeW] = useState('');\n  const [flowData, setflowData] = useState('');\n  const [foundFlowData, setfoundFlowData] = useState(false);\n  // const [logout, setLogout] = useState(true);\n\n  const [YieldToday, setYieldToday] = useState('');\n  const [ConsumptionToday, setConsumptionToday] = useState('');\n  const [RevenueToday, setRevenueToday] = useState('');\n  const [Profit, setProfit] = useState(0);\n  const measurementApi = Measurement();\n\n  //user logged in\n  //start loading data\n  //currentflowData --> update every 1 minute\n  //quickviewData --> update every 15 minutes / battery every minute\n  //barchart --> Update every 15 minutes\n  //end Loading data\n\n  useEffect(() => {\n    //Today's date\n    const date = new Date();\n    setLoading(true);\n\n    //get CurrentFlowData\n    const GetCurrentFlowDataTemp = async () => {\n      const AccessToken = await GetAccessToken();\n      await GetCurrentFlowData(AccessToken, date);\n      console.log(currentFlowData[0][1]);\n      //Data format = {Time, actualPowerTot_W: Grid, childrenConsumedPower_W: Consumption, childrenProducedPower_W: Production, childrenStoragePower_W: Battery}\n    };\n\n    GetCurrentFlowDataTemp();\n\n    //get QuickViewData\n    const GetQuickViewDataTemp = async () => {\n      const AccessToken = await GetAccessToken();\n      await GetQuickViewData(AccessToken, date);\n      //Data format {Earnings, Yield, Consumption, Battery, FoundData}\n    };\n\n    GetQuickViewDataTemp();\n\n    // GetFlowData(AccessToken, date);\n\n    setLoading(false);\n  }, []);\n\n  //Gets the access token from the back-end\n  const GetAccessToken = async () => {\n    const JwtToken = localStorage.getItem('jwtToken');\n    try {\n      const AccessToken = await userApi.GetAccessToken(JwtToken);\n      return AccessToken.data;\n    } catch (error) {\n      console.log(error);\n      localStorage.removeItem('jwtToken');\n      navigate('/');\n    }\n  };\n  const GetCurrentFlowData = async (AccessToken, date) => {\n    const Data = await measurementApi.FlowData(AccessToken, date);\n    setGridW(Math.round(Data[0]['series'][0]['values'][0][1]));\n    setHomeW(Math.round(Data[0]['series'][0]['values'][0][2]));\n    setSolarW(Math.round(Data[0]['series'][0]['values'][0][3]));\n    setBatteryW(Math.round(Data[0]['series'][0]['values'][0][4]));\n    const dataBattery = await measurementApi.BatteryPercentage(AccessToken, date);\n    setBatteryP(dataBattery[0]['series'][0]['values'][0][1]);\n  };\n  const GetQuickViewData = async (AccessToken, date) => {\n    const FoundFlowData = false;\n    const QuickViewEarnings = await measurementApi.BarChartRevenueData(AccessToken, date);\n    let total = 0;\n    for (let index = 0; index < Object.keys(QuickViewEarnings).length; index++) {\n      const element = parseFloat(QuickViewEarnings[index]['Fed to grid']) + parseFloat(QuickViewEarnings[index]['FirnController Profit']);\n      total = total + parseFloat(element);\n    }\n    total = total.toFixed(2);\n    const QuickViewdata = await measurementApi.QuickViewData(AccessToken, date);\n    const Data = {\n      'Earnings': total,\n      'Yield': (QuickViewdata[0]['series'][0]['values'][0][1] / 1000).toFixed(2),\n      'Consumption': (QuickViewdata[0]['series'][0]['values'][0][2] / 1000).toFixed(2),\n      'FoundData': FoundFlowData\n    };\n    setQuickViewData(Data);\n  };\n\n  // const GetCurrentFlowData = async () => {\n  //     setLoading(true);\n  //     const date = new Date()\n\n  //     //CurrentFlowData\n  //     const data = await measurementApi.FlowData(accessToken, date);\n  //     setflowData(data);\n  //     setfoundFlowData(true);\n  //     setGridW(Math.round(data[0]['series'][0]['values'][0][1]));\n  //     setHomeW(Math.round(data[0]['series'][0]['values'][0][2]));\n  //     setSolarW(Math.round(data[0]['series'][0]['values'][0][3]));\n  //     setBatteryW(Math.round(data[0]['series'][0]['values'][0][4]));\n  //     console.log(\"CurrentFlowData Loaded ✓\")\n\n  //     //Battery Percentage\n  //     const dataBattery = await measurementApi.BatteryPercentage(accessToken, date);\n  //     setBatteryP(dataBattery[0]['series'][0]['values'][0][1]);\n  //     console.log(\"Battery Percentage Loaded ✓\")\n\n  //     //QuickView Earnings\n  //     const QuickViewEarnings = await measurementApi.BarChartRevenueData(accessToken, date)\n  //     let total = 0\n  //     for (let index = 0; index < Object.keys(QuickViewEarnings).length; index++) {\n  //         const element = parseFloat(QuickViewEarnings[index]['Fed to grid']) + parseFloat(QuickViewEarnings[index]['FirnController Profit']);\n  //         total = total + parseFloat(element);\n  //     }\n  //     setRevenueToday(total.toFixed(2));\n\n  //     console.log(\"QuickView Earnings Loaded ✓\")\n\n  //     //QuickView Yeild & Consumption\n  //     const QuickViewdata = await measurementApi.QuickViewData(accessToken, date);\n  //     setYieldToday((QuickViewdata[0]['series'][0]['values'][0][1] / 1000).toFixed(2))\n  //     setConsumptionToday((QuickViewdata[0]['series'][0]['values'][0][2] / 1000).toFixed(2))\n  //     console.log(\"QuickView Yield & Consumption Loaded ✓\")\n\n  //     //barChart Data\n  //     const result = await measurementApi.BarChartData(accessToken, date)\n  //     setBarChartData(result);\n\n  //     setLoading(false);\n  // }\n\n  const requestBarChartData = async dataToRequest => {\n    const date = new Date();\n    if (dataToRequest === \"BarChartConsumptionData\") {\n      // const result = await measurementApi.BarChartData(accessToken, date);\n      // setBarChartData(result);\n    } else if (dataToRequest === \"BarChartBatteryData\") {\n      // const result = await measurementApi.BatteryPercentageRange(accessToken, date);\n      // setBarChartData(result);\n    } else if (dataToRequest === \"BarChartRevenueData\") {\n      // const result = await measurementApi.BarChartRevenueData(accessToken, date);\n      // setBarChartData(result);\n    }\n  };\n\n  // const CurrentDate = async () => {\n  //     const date = new Date()\n\n  //     const result = await measurementApi.BarChartRevenueData(accessToken, date)\n  //     console.log(result)\n  // }\n\n  // const GraphDatabuild = async () => {\n  //     const date = new Date()\n  //     const BuyPrice = await measurementApi.getBuyPrice(accessToken, date);\n  //     console.log(BuyPrice)\n  // }\n\n  const ToggleLoading = bool => {\n    setLoading(bool);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `Body-Container ${darkMode ? 'Body-Container-Dark' : 'Body-Container-Light'}`,\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay block-interactions\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-container\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"loading-gif\",\n            src: loaderGIF,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 109\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 74\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Body-First-Row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(CurrentFlow, {\n            darkMode: darkMode,\n            SOLARW: currentFlowData[0][3],\n            GRIDW: currentFlowData[0][1],\n            BATTERYW: currentFlowData[0][4],\n            HOMEW: currentFlowData[0][2],\n            BATTERYP: BatteryP\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(QuickView, {\n            foundFlowData: foundFlowData,\n            YieldToday: YieldToday,\n            BatteryP: BatteryP,\n            ConsumptionToday: ConsumptionToday,\n            RevenueToday: RevenueToday,\n            Profit: Profit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Body-Second-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Charts-Container\",\n          children: /*#__PURE__*/_jsxDEV(Charts, {\n            Data: barChartData,\n            darkMode: darkMode,\n            requestBarChartData: requestBarChartData,\n            ToggleLoading: ToggleLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Body, \"0wb+kl7GuqkTS63mYL8r+xuLf+8=\", false, function () {\n  return [useNavigate];\n});\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["Auth","CurrentFlow","Authenticate","Measurement","useEffect","useState","Charts","loaderGIF","QuickView","User","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Body","_ref","_s","darkMode","userApi","navigate","loading","setLoading","quickViewData","setQuickViewData","barChartData","setBarChartData","BatteryP","setBatteryP","SolarW","setSolarW","BatteryW","setBatteryW","GridW","setGridW","HomeW","setHomeW","flowData","setflowData","foundFlowData","setfoundFlowData","YieldToday","setYieldToday","ConsumptionToday","setConsumptionToday","RevenueToday","setRevenueToday","Profit","setProfit","measurementApi","date","Date","GetCurrentFlowDataTemp","AccessToken","GetAccessToken","GetCurrentFlowData","console","log","currentFlowData","GetQuickViewDataTemp","GetQuickViewData","JwtToken","localStorage","getItem","data","error","removeItem","Data","FlowData","Math","round","dataBattery","BatteryPercentage","FoundFlowData","QuickViewEarnings","BarChartRevenueData","total","index","Object","keys","length","element","parseFloat","toFixed","QuickViewdata","QuickViewData","requestBarChartData","dataToRequest","ToggleLoading","bool","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","SOLARW","GRIDW","BATTERYW","HOMEW","BATTERYP","_c","$RefreshReg$"],"sources":["C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/src/components/body/bodyContainer.jsx"],"sourcesContent":["import './bodyContainer.css'\r\nimport Auth from './auth/auth'\r\nimport CurrentFlow from './currentFlow/currentFlow'\r\nimport Authenticate from \"../../api/authenticate\"\r\nimport Measurement from '../../api/measurements'\r\nimport { useEffect, useState } from 'react'\r\nimport Charts from './charts/charts'\r\nimport loaderGIF from '../../Images/firn-embleem-animation.gif'\r\nimport QuickView from './QuickViewDetails/QuickView';\r\nimport User from '../../api/user';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst Body = ({darkMode}) => {\r\n    //API's\r\n    const userApi = User();\r\n    const navigate = useNavigate();\r\n\r\n    //variable state's\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    //Data\r\n    // const [currentFlowData, setCurrentFlowData] = useState([]);\r\n    const [quickViewData, setQuickViewData] = useState();\r\n    const [barChartData, setBarChartData] = useState();\r\n    const [BatteryP, setBatteryP] = useState(0);\r\n\r\n    //CurrentflowDataStates\r\n    const [SolarW, setSolarW] = useState('');\r\n    const [BatteryW, setBatteryW] = useState('');\r\n    const [GridW, setGridW] = useState('');\r\n    const [HomeW, setHomeW] = useState('');\r\n\r\n\r\n    const [flowData, setflowData] = useState('');\r\n    const [foundFlowData, setfoundFlowData] = useState(false);\r\n    // const [logout, setLogout] = useState(true);\r\n\r\n    const [YieldToday, setYieldToday] = useState('')\r\n    const [ConsumptionToday, setConsumptionToday] = useState('')\r\n    const [RevenueToday, setRevenueToday] = useState('')\r\n    const [Profit, setProfit] = useState(0)\r\n    \r\n    \r\n\r\n    const measurementApi = Measurement();\r\n\r\n    //user logged in\r\n    //start loading data\r\n    //currentflowData --> update every 1 minute\r\n    //quickviewData --> update every 15 minutes / battery every minute\r\n    //barchart --> Update every 15 minutes\r\n    //end Loading data\r\n\r\n    useEffect(() => {\r\n\r\n        //Today's date\r\n        const date = new Date()\r\n\r\n        setLoading(true)\r\n\r\n        //get CurrentFlowData\r\n        const GetCurrentFlowDataTemp = async() => {\r\n            const AccessToken = await GetAccessToken();\r\n            await GetCurrentFlowData(AccessToken, date);\r\n            console.log(currentFlowData[0][1])\r\n            //Data format = {Time, actualPowerTot_W: Grid, childrenConsumedPower_W: Consumption, childrenProducedPower_W: Production, childrenStoragePower_W: Battery}\r\n        }\r\n        GetCurrentFlowDataTemp();\r\n\r\n        //get QuickViewData\r\n        const GetQuickViewDataTemp = async() => {\r\n            const AccessToken = await GetAccessToken();\r\n            await GetQuickViewData(AccessToken, date);\r\n            //Data format {Earnings, Yield, Consumption, Battery, FoundData}\r\n        }\r\n        GetQuickViewDataTemp();\r\n\r\n\r\n        // GetFlowData(AccessToken, date);\r\n\r\n        setLoading(false)\r\n    }, [])\r\n\r\n    //Gets the access token from the back-end\r\n    const GetAccessToken = async () => {\r\n        const JwtToken = localStorage.getItem('jwtToken');\r\n        try {\r\n            const AccessToken = await userApi.GetAccessToken(JwtToken);\r\n            return AccessToken.data;\r\n        } catch (error) {\r\n            console.log(error)\r\n            localStorage.removeItem('jwtToken');\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    const GetCurrentFlowData = async (AccessToken, date) => {\r\n\r\n        const Data = await measurementApi.FlowData(AccessToken, date);\r\n        setGridW(Math.round(Data[0]['series'][0]['values'][0][1]));\r\n        setHomeW(Math.round(Data[0]['series'][0]['values'][0][2]));\r\n        setSolarW(Math.round(Data[0]['series'][0]['values'][0][3]));\r\n        setBatteryW(Math.round(Data[0]['series'][0]['values'][0][4]));\r\n        \r\n        const dataBattery = await measurementApi.BatteryPercentage(AccessToken, date);\r\n        setBatteryP(dataBattery[0]['series'][0]['values'][0][1]);\r\n    }\r\n\r\n    const GetQuickViewData = async (AccessToken, date) => {\r\n        const FoundFlowData = false\r\n\r\n        const QuickViewEarnings = await measurementApi.BarChartRevenueData(AccessToken, date);\r\n        let total = 0\r\n        for (let index = 0; index < Object.keys(QuickViewEarnings).length; index++) {\r\n            const element = parseFloat(QuickViewEarnings[index]['Fed to grid']) + parseFloat(QuickViewEarnings[index]['FirnController Profit']);\r\n            total = total + parseFloat(element);\r\n        }\r\n        total = total.toFixed(2);\r\n\r\n        const QuickViewdata = await measurementApi.QuickViewData(AccessToken, date);\r\n\r\n        const Data = {'Earnings': total, 'Yield': (QuickViewdata[0]['series'][0]['values'][0][1] / 1000).toFixed(2), 'Consumption': (QuickViewdata[0]['series'][0]['values'][0][2] / 1000).toFixed(2), 'FoundData': FoundFlowData};\r\n        setQuickViewData(Data);\r\n    }           \r\n\r\n\r\n    // const GetCurrentFlowData = async () => {\r\n    //     setLoading(true);\r\n    //     const date = new Date()\r\n\r\n    //     //CurrentFlowData\r\n    //     const data = await measurementApi.FlowData(accessToken, date);\r\n    //     setflowData(data);\r\n    //     setfoundFlowData(true);\r\n    //     setGridW(Math.round(data[0]['series'][0]['values'][0][1]));\r\n    //     setHomeW(Math.round(data[0]['series'][0]['values'][0][2]));\r\n    //     setSolarW(Math.round(data[0]['series'][0]['values'][0][3]));\r\n    //     setBatteryW(Math.round(data[0]['series'][0]['values'][0][4]));\r\n    //     console.log(\"CurrentFlowData Loaded ✓\")\r\n\r\n    //     //Battery Percentage\r\n    //     const dataBattery = await measurementApi.BatteryPercentage(accessToken, date);\r\n    //     setBatteryP(dataBattery[0]['series'][0]['values'][0][1]);\r\n    //     console.log(\"Battery Percentage Loaded ✓\")\r\n        \r\n    //     //QuickView Earnings\r\n    //     const QuickViewEarnings = await measurementApi.BarChartRevenueData(accessToken, date)\r\n    //     let total = 0\r\n    //     for (let index = 0; index < Object.keys(QuickViewEarnings).length; index++) {\r\n    //         const element = parseFloat(QuickViewEarnings[index]['Fed to grid']) + parseFloat(QuickViewEarnings[index]['FirnController Profit']);\r\n    //         total = total + parseFloat(element);\r\n    //     }\r\n    //     setRevenueToday(total.toFixed(2));\r\n        \r\n    //     console.log(\"QuickView Earnings Loaded ✓\")\r\n\r\n    //     //QuickView Yeild & Consumption\r\n    //     const QuickViewdata = await measurementApi.QuickViewData(accessToken, date);\r\n    //     setYieldToday((QuickViewdata[0]['series'][0]['values'][0][1] / 1000).toFixed(2))\r\n    //     setConsumptionToday((QuickViewdata[0]['series'][0]['values'][0][2] / 1000).toFixed(2))\r\n    //     console.log(\"QuickView Yield & Consumption Loaded ✓\")\r\n\r\n    //     //barChart Data\r\n    //     const result = await measurementApi.BarChartData(accessToken, date)\r\n    //     setBarChartData(result);\r\n\r\n    //     setLoading(false);\r\n    // }\r\n\r\n    const requestBarChartData = async (dataToRequest) => {\r\n        const date = new Date()\r\n        if (dataToRequest === \"BarChartConsumptionData\") {\r\n            // const result = await measurementApi.BarChartData(accessToken, date);\r\n            // setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartBatteryData\") {\r\n            // const result = await measurementApi.BatteryPercentageRange(accessToken, date);\r\n            // setBarChartData(result);\r\n        } else if (dataToRequest === \"BarChartRevenueData\") {\r\n            // const result = await measurementApi.BarChartRevenueData(accessToken, date);\r\n            // setBarChartData(result);\r\n        }\r\n    }\r\n\r\n\r\n    // const CurrentDate = async () => {\r\n    //     const date = new Date()\r\n\r\n    //     const result = await measurementApi.BarChartRevenueData(accessToken, date)\r\n    //     console.log(result)\r\n    // }\r\n    \r\n    // const GraphDatabuild = async () => {\r\n    //     const date = new Date()\r\n    //     const BuyPrice = await measurementApi.getBuyPrice(accessToken, date);\r\n    //     console.log(BuyPrice)\r\n    // }\r\n\r\n    const ToggleLoading = (bool) => {\r\n        setLoading(bool)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`Body-Container ${darkMode ? 'Body-Container-Dark' : 'Body-Container-Light'}`}>\r\n                {/* {logout && (<div className='Logout-Background'><div className='logout-Container'><div className='logout-Label'>Do you wish to logout?</div><div className='logout-button-Container'><button className='logout-button'>logout</button><button className='logout-button'>back</button></div></div></div>) } */}\r\n                {loading && (<div className='overlay block-interactions'><div className=\"loading-container\"><img className='loading-gif' src={loaderGIF} alt=\"\" /></div></div>) }\r\n                <div className='Body-First-Row'>\r\n                    <div><CurrentFlow darkMode={darkMode} SOLARW={currentFlowData[0][3]} GRIDW={currentFlowData[0][1]} BATTERYW={currentFlowData[0][4]} HOMEW={currentFlowData[0][2]} BATTERYP={BatteryP}></CurrentFlow></div>\r\n                    <div><QuickView foundFlowData={foundFlowData} YieldToday={YieldToday} BatteryP={BatteryP} ConsumptionToday={ConsumptionToday} RevenueToday={RevenueToday} Profit={Profit}/></div>\r\n                </div>\r\n                <div className='Body-Second-row'>\r\n                    <div></div>\r\n                    {/* YieldToday, ConsumptionToday, RevenueToday, Profit */}\r\n                    <div className='Charts-Container'><Charts Data={barChartData} darkMode={darkMode} requestBarChartData={requestBarChartData} ToggleLoading={ToggleLoading}></Charts></div>\r\n                </div>\r\n                <div>\r\n                    {/* <button className='GetFlowData' onClick={GetCurrentFlowData}>GetFlowData</button>\r\n                    <button onClick={CurrentDate}>date</button>\r\n                    <button onClick={GraphDatabuild}>graphdata</button> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Body;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}