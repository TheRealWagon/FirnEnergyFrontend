{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = \"https://firnenergybackend.onrender.com/api/users/\";\nconst User = () => {\n  const login = async (email, password, remember) => {\n    let data = JSON.stringify({\n      \"email\": email,\n      \"password\": password,\n      \"remember\": remember\n    });\n    let config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/login`,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    };\n    try {\n      const response = await axios.post(config.url, data, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  const GetUsername = async token => {\n    const axiosInstance = axios.create({\n      baseURL: 'http://localhost:9000/api',\n      // Set your base URL here\n      headers: {\n        'Content-Type': 'application/json'\n        // Add any other default headers you need here\n      }\n    });\n\n    let data = JSON.stringify({});\n    let config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `http://localhost:9000/api/users/info`,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: data\n    };\n    try {\n      const response = await axios.get(config.url, config);\n      return response; // Return the data after successful response\n    } catch (error) {\n      console.log(error);\n      throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\n    }\n  };\n\n  return {\n    login\n  };\n};\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["axios","baseURL","User","login","email","password","remember","data","JSON","stringify","config","method","maxBodyLength","Infinity","url","headers","response","post","error","console","log","GetUsername","token","axiosInstance","create","Authorization","get","_c","$RefreshReg$"],"sources":["C:/Users/Dirk Verdoodt/Documents/eniris data/react website/firnenergy/src/api/user.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL = \"https://firnenergybackend.onrender.com/api/users/\";\r\n\r\nconst User = () => {\r\n\r\n    const login = async (email, password, remember) => {\r\n\r\n        let data = JSON.stringify({\r\n            \"email\": email,\r\n            \"password\": password,\r\n            \"remember\": remember,\r\n        });\r\n\r\n        let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/login`,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.post(config.url, data, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    const GetUsername = async (token) => {    \r\n\r\n        const axiosInstance = axios.create({\r\n            baseURL: 'http://localhost:9000/api', // Set your base URL here\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // Add any other default headers you need here\r\n            },\r\n        });\r\n\r\n\r\n        let data = JSON.stringify({\r\n            \r\n        });\r\n\r\n        let config = {\r\n        method: 'get',\r\n        maxBodyLength: Infinity,\r\n        url: `http://localhost:9000/api/users/info`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        data : data\r\n        };\r\n\r\n        try {\r\n            const response = await axios.get(config.url, config);\r\n            return response; // Return the data after successful response\r\n        } catch (error) {\r\n            console.log(error);\r\n            throw error; // Rethrow the error to handle it in HandleLoginEvent if needed\r\n        }\r\n\r\n    }\r\n\r\n    return {\r\n        login\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default User;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,mDAAmD;AAEnE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAEf,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IAE/C,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MACtB,OAAO,EAAEL,KAAK;MACd,UAAU,EAAEC,QAAQ;MACpB,UAAU,EAAEC;IAChB,CAAC,CAAC;IAEF,IAAII,MAAM,GAAG;MACbC,MAAM,EAAE,MAAM;MACdC,aAAa,EAAEC,QAAQ;MACvBC,GAAG,EAAG,uCAAsC;MAC5CC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDR,IAAI,EAAGA;IACP,CAAC;IAED,IAAI;MACA,MAAMS,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAACP,MAAM,CAACI,GAAG,EAAEP,IAAI,EAAEG,MAAM,CAAC;MAC3D,OAAOM,QAAQ,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK,CAAC,CAAC;IACjB;EAEJ,CAAC;;EAED,MAAMG,WAAW,GAAG,MAAOC,KAAK,IAAK;IAEjC,MAAMC,aAAa,GAAGvB,KAAK,CAACwB,MAAM,CAAC;MAC/BvB,OAAO,EAAE,2BAA2B;MAAE;MACtCc,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;MACF;IACJ,CAAC,CAAC;;IAGF,IAAIR,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC,CAE1B,CAAC,CAAC;IAEF,IAAIC,MAAM,GAAG;MACbC,MAAM,EAAE,KAAK;MACbC,aAAa,EAAEC,QAAQ;MACvBC,GAAG,EAAG,sCAAqC;MAC3CC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCU,aAAa,EAAG,UAASH,KAAM;MACnC,CAAC;MACDf,IAAI,EAAGA;IACP,CAAC;IAED,IAAI;MACA,MAAMS,QAAQ,GAAG,MAAMhB,KAAK,CAAC0B,GAAG,CAAChB,MAAM,CAACI,GAAG,EAAEJ,MAAM,CAAC;MACpD,OAAOM,QAAQ,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClB,MAAMA,KAAK,CAAC,CAAC;IACjB;EAEJ,CAAC;;EAED,OAAO;IACHf;EACJ,CAAC;AAGL,CAAC;AAAAwB,EAAA,GAvEKzB,IAAI;AAyEV,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}